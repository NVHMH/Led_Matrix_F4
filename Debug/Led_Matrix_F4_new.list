
Led_Matrix_F4_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045b0  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000420  08004748  08004748  00014748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b68  08004b68  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004b68  08004b68  00014b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b70  08004b70  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b70  08004b70  00014b70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b74  08004b74  00014b74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004b78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000454  2000000c  08004b84  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000460  08004b84  00020460  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f185  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f54  00000000  00000000  0002f1c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e08  00000000  00000000  00031118  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d10  00000000  00000000  00031f20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016888  00000000  00000000  00032c30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a6b2  00000000  00000000  000494b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008dcf0  00000000  00000000  00053b6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e185a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ac4  00000000  00000000  000e18d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004730 	.word	0x08004730

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08004730 	.word	0x08004730

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_UART_RxCpltCallback>:
uint8_t gu8_uart_rx =0;
LED_MATRIX_DATA_t led_matrix_data;
uint8_t gu8_flag_cplt_update = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart2.Instance)
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	681a      	ldr	r2, [r3, #0]
 80004e4:	4b08      	ldr	r3, [pc, #32]	; (8000508 <HAL_UART_RxCpltCallback+0x30>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	429a      	cmp	r2, r3
 80004ea:	d109      	bne.n	8000500 <HAL_UART_RxCpltCallback+0x28>
	{
		COMMAND_LINE_Receive(gu8_uart_rx);
 80004ec:	4b07      	ldr	r3, [pc, #28]	; (800050c <HAL_UART_RxCpltCallback+0x34>)
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	4618      	mov	r0, r3
 80004f2:	f003 fd8b 	bl	800400c <COMMAND_LINE_Receive>
		HAL_UART_Receive_DMA(&huart2, &gu8_uart_rx, 1);
 80004f6:	2201      	movs	r2, #1
 80004f8:	4904      	ldr	r1, [pc, #16]	; (800050c <HAL_UART_RxCpltCallback+0x34>)
 80004fa:	4803      	ldr	r0, [pc, #12]	; (8000508 <HAL_UART_RxCpltCallback+0x30>)
 80004fc:	f002 fea8 	bl	8003250 <HAL_UART_Receive_DMA>
	}
}
 8000500:	bf00      	nop
 8000502:	3708      	adds	r7, #8
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}
 8000508:	200003bc 	.word	0x200003bc
 800050c:	20000028 	.word	0x20000028

08000510 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
	LED_MATRIX_SPI_Handle(&led_matrix_data, hspi);
 8000518:	6879      	ldr	r1, [r7, #4]
 800051a:	4803      	ldr	r0, [pc, #12]	; (8000528 <HAL_SPI_TxCpltCallback+0x18>)
 800051c:	f003 ffc2 	bl	80044a4 <LED_MATRIX_SPI_Handle>
}
 8000520:	bf00      	nop
 8000522:	3708      	adds	r7, #8
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}
 8000528:	20000224 	.word	0x20000224

0800052c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
	if(htim->Instance == htim3.Instance){
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681a      	ldr	r2, [r3, #0]
 8000538:	4b05      	ldr	r3, [pc, #20]	; (8000550 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	429a      	cmp	r2, r3
 800053e:	d103      	bne.n	8000548 <HAL_TIM_PeriodElapsedCallback+0x1c>
		UPDATE_OUTPUT_Buf(&led_matrix_data, &gu8_flag_cplt_update);
 8000540:	4904      	ldr	r1, [pc, #16]	; (8000554 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000542:	4805      	ldr	r0, [pc, #20]	; (8000558 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000544:	f003 fe1c 	bl	8004180 <UPDATE_OUTPUT_Buf>

	}
}
 8000548:	bf00      	nop
 800054a:	3708      	adds	r7, #8
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	200001e4 	.word	0x200001e4
 8000554:	20000029 	.word	0x20000029
 8000558:	20000224 	.word	0x20000224

0800055c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000562:	f000 fc01 	bl	8000d68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000566:	f000 f839 	bl	80005dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056a:	f000 f973 	bl	8000854 <MX_GPIO_Init>
  MX_DMA_Init();
 800056e:	f000 f941 	bl	80007f4 <MX_DMA_Init>
  MX_SPI2_Init();
 8000572:	f000 f891 	bl	8000698 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8000576:	f000 f913 	bl	80007a0 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800057a:	f000 f8c3 	bl	8000704 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  LED_MATRIX_Init(&led_matrix_data, &hspi2, GPIOB, 15, 4);
 800057e:	2304      	movs	r3, #4
 8000580:	9300      	str	r3, [sp, #0]
 8000582:	230f      	movs	r3, #15
 8000584:	4a0e      	ldr	r2, [pc, #56]	; (80005c0 <main+0x64>)
 8000586:	490f      	ldr	r1, [pc, #60]	; (80005c4 <main+0x68>)
 8000588:	480f      	ldr	r0, [pc, #60]	; (80005c8 <main+0x6c>)
 800058a:	f003 ffa7 	bl	80044dc <LED_MATRIX_Init>

  HAL_UART_Receive_DMA(&huart2, &gu8_uart_rx, 1);
 800058e:	2201      	movs	r2, #1
 8000590:	490e      	ldr	r1, [pc, #56]	; (80005cc <main+0x70>)
 8000592:	480f      	ldr	r0, [pc, #60]	; (80005d0 <main+0x74>)
 8000594:	f002 fe5c 	bl	8003250 <HAL_UART_Receive_DMA>

  htim3.Instance->ARR =  led_matrix_data.operation_param.u32_speed_run_text-1;
 8000598:	4b0b      	ldr	r3, [pc, #44]	; (80005c8 <main+0x6c>)
 800059a:	68da      	ldr	r2, [r3, #12]
 800059c:	4b0d      	ldr	r3, [pc, #52]	; (80005d4 <main+0x78>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	3a01      	subs	r2, #1
 80005a2:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_TIM_Base_Start_IT(&htim3);
 80005a4:	480b      	ldr	r0, [pc, #44]	; (80005d4 <main+0x78>)
 80005a6:	f002 fa5e 	bl	8002a66 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(gu8_flag_cplt_update){
 80005aa:	4b0b      	ldr	r3, [pc, #44]	; (80005d8 <main+0x7c>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d0fb      	beq.n	80005aa <main+0x4e>
		  gu8_flag_cplt_update = 0;
 80005b2:	4b09      	ldr	r3, [pc, #36]	; (80005d8 <main+0x7c>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	701a      	strb	r2, [r3, #0]
		  PUSH_OUTPUT_Buf(&led_matrix_data);
 80005b8:	4803      	ldr	r0, [pc, #12]	; (80005c8 <main+0x6c>)
 80005ba:	f003 fd73 	bl	80040a4 <PUSH_OUTPUT_Buf>
	  if(gu8_flag_cplt_update){
 80005be:	e7f4      	b.n	80005aa <main+0x4e>
 80005c0:	40020400 	.word	0x40020400
 80005c4:	2000018c 	.word	0x2000018c
 80005c8:	20000224 	.word	0x20000224
 80005cc:	20000028 	.word	0x20000028
 80005d0:	200003bc 	.word	0x200003bc
 80005d4:	200001e4 	.word	0x200001e4
 80005d8:	20000029 	.word	0x20000029

080005dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b094      	sub	sp, #80	; 0x50
 80005e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e2:	f107 0320 	add.w	r3, r7, #32
 80005e6:	2230      	movs	r2, #48	; 0x30
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f004 f898 	bl	8004720 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f0:	f107 030c 	add.w	r3, r7, #12
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]
 80005fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000600:	2300      	movs	r3, #0
 8000602:	60bb      	str	r3, [r7, #8]
 8000604:	4b22      	ldr	r3, [pc, #136]	; (8000690 <SystemClock_Config+0xb4>)
 8000606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000608:	4a21      	ldr	r2, [pc, #132]	; (8000690 <SystemClock_Config+0xb4>)
 800060a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800060e:	6413      	str	r3, [r2, #64]	; 0x40
 8000610:	4b1f      	ldr	r3, [pc, #124]	; (8000690 <SystemClock_Config+0xb4>)
 8000612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000618:	60bb      	str	r3, [r7, #8]
 800061a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800061c:	2300      	movs	r3, #0
 800061e:	607b      	str	r3, [r7, #4]
 8000620:	4b1c      	ldr	r3, [pc, #112]	; (8000694 <SystemClock_Config+0xb8>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a1b      	ldr	r2, [pc, #108]	; (8000694 <SystemClock_Config+0xb8>)
 8000626:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800062a:	6013      	str	r3, [r2, #0]
 800062c:	4b19      	ldr	r3, [pc, #100]	; (8000694 <SystemClock_Config+0xb8>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000634:	607b      	str	r3, [r7, #4]
 8000636:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000638:	2302      	movs	r3, #2
 800063a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800063c:	2301      	movs	r3, #1
 800063e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000640:	2310      	movs	r3, #16
 8000642:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000644:	2300      	movs	r3, #0
 8000646:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000648:	f107 0320 	add.w	r3, r7, #32
 800064c:	4618      	mov	r0, r3
 800064e:	f001 fa3b 	bl	8001ac8 <HAL_RCC_OscConfig>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000658:	f000 f94e 	bl	80008f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065c:	230f      	movs	r3, #15
 800065e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000660:	2300      	movs	r3, #0
 8000662:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000668:	2300      	movs	r3, #0
 800066a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f001 fc96 	bl	8001fa8 <HAL_RCC_ClockConfig>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000682:	f000 f939 	bl	80008f8 <Error_Handler>
  }
}
 8000686:	bf00      	nop
 8000688:	3750      	adds	r7, #80	; 0x50
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40023800 	.word	0x40023800
 8000694:	40007000 	.word	0x40007000

08000698 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800069c:	4b17      	ldr	r3, [pc, #92]	; (80006fc <MX_SPI2_Init+0x64>)
 800069e:	4a18      	ldr	r2, [pc, #96]	; (8000700 <MX_SPI2_Init+0x68>)
 80006a0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80006a2:	4b16      	ldr	r3, [pc, #88]	; (80006fc <MX_SPI2_Init+0x64>)
 80006a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006a8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80006aa:	4b14      	ldr	r3, [pc, #80]	; (80006fc <MX_SPI2_Init+0x64>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80006b0:	4b12      	ldr	r3, [pc, #72]	; (80006fc <MX_SPI2_Init+0x64>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <MX_SPI2_Init+0x64>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006bc:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <MX_SPI2_Init+0x64>)
 80006be:	2200      	movs	r2, #0
 80006c0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80006c2:	4b0e      	ldr	r3, [pc, #56]	; (80006fc <MX_SPI2_Init+0x64>)
 80006c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006c8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006ca:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <MX_SPI2_Init+0x64>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006d0:	4b0a      	ldr	r3, [pc, #40]	; (80006fc <MX_SPI2_Init+0x64>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80006d6:	4b09      	ldr	r3, [pc, #36]	; (80006fc <MX_SPI2_Init+0x64>)
 80006d8:	2200      	movs	r2, #0
 80006da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006dc:	4b07      	ldr	r3, [pc, #28]	; (80006fc <MX_SPI2_Init+0x64>)
 80006de:	2200      	movs	r2, #0
 80006e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80006e2:	4b06      	ldr	r3, [pc, #24]	; (80006fc <MX_SPI2_Init+0x64>)
 80006e4:	220a      	movs	r2, #10
 80006e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80006e8:	4804      	ldr	r0, [pc, #16]	; (80006fc <MX_SPI2_Init+0x64>)
 80006ea:	f001 fe29 	bl	8002340 <HAL_SPI_Init>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80006f4:	f000 f900 	bl	80008f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80006f8:	bf00      	nop
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	2000018c 	.word	0x2000018c
 8000700:	40003800 	.word	0x40003800

08000704 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b086      	sub	sp, #24
 8000708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800070a:	f107 0308 	add.w	r3, r7, #8
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	605a      	str	r2, [r3, #4]
 8000714:	609a      	str	r2, [r3, #8]
 8000716:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000718:	463b      	mov	r3, r7
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000720:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <MX_TIM3_Init+0x94>)
 8000722:	4a1e      	ldr	r2, [pc, #120]	; (800079c <MX_TIM3_Init+0x98>)
 8000724:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15999;
 8000726:	4b1c      	ldr	r3, [pc, #112]	; (8000798 <MX_TIM3_Init+0x94>)
 8000728:	f643 627f 	movw	r2, #15999	; 0x3e7f
 800072c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <MX_TIM3_Init+0x94>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <MX_TIM3_Init+0x94>)
 8000736:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800073a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800073c:	4b16      	ldr	r3, [pc, #88]	; (8000798 <MX_TIM3_Init+0x94>)
 800073e:	2200      	movs	r2, #0
 8000740:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000742:	4b15      	ldr	r3, [pc, #84]	; (8000798 <MX_TIM3_Init+0x94>)
 8000744:	2200      	movs	r2, #0
 8000746:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000748:	4813      	ldr	r0, [pc, #76]	; (8000798 <MX_TIM3_Init+0x94>)
 800074a:	f002 f961 	bl	8002a10 <HAL_TIM_Base_Init>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000754:	f000 f8d0 	bl	80008f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000758:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800075c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800075e:	f107 0308 	add.w	r3, r7, #8
 8000762:	4619      	mov	r1, r3
 8000764:	480c      	ldr	r0, [pc, #48]	; (8000798 <MX_TIM3_Init+0x94>)
 8000766:	f002 faaa 	bl	8002cbe <HAL_TIM_ConfigClockSource>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000770:	f000 f8c2 	bl	80008f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000774:	2300      	movs	r3, #0
 8000776:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000778:	2300      	movs	r3, #0
 800077a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800077c:	463b      	mov	r3, r7
 800077e:	4619      	mov	r1, r3
 8000780:	4805      	ldr	r0, [pc, #20]	; (8000798 <MX_TIM3_Init+0x94>)
 8000782:	f002 fc95 	bl	80030b0 <HAL_TIMEx_MasterConfigSynchronization>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800078c:	f000 f8b4 	bl	80008f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000790:	bf00      	nop
 8000792:	3718      	adds	r7, #24
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	200001e4 	.word	0x200001e4
 800079c:	40000400 	.word	0x40000400

080007a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007a4:	4b11      	ldr	r3, [pc, #68]	; (80007ec <MX_USART2_UART_Init+0x4c>)
 80007a6:	4a12      	ldr	r2, [pc, #72]	; (80007f0 <MX_USART2_UART_Init+0x50>)
 80007a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007aa:	4b10      	ldr	r3, [pc, #64]	; (80007ec <MX_USART2_UART_Init+0x4c>)
 80007ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007b2:	4b0e      	ldr	r3, [pc, #56]	; (80007ec <MX_USART2_UART_Init+0x4c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007b8:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <MX_USART2_UART_Init+0x4c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007be:	4b0b      	ldr	r3, [pc, #44]	; (80007ec <MX_USART2_UART_Init+0x4c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007c4:	4b09      	ldr	r3, [pc, #36]	; (80007ec <MX_USART2_UART_Init+0x4c>)
 80007c6:	220c      	movs	r2, #12
 80007c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ca:	4b08      	ldr	r3, [pc, #32]	; (80007ec <MX_USART2_UART_Init+0x4c>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d0:	4b06      	ldr	r3, [pc, #24]	; (80007ec <MX_USART2_UART_Init+0x4c>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007d6:	4805      	ldr	r0, [pc, #20]	; (80007ec <MX_USART2_UART_Init+0x4c>)
 80007d8:	f002 fcec 	bl	80031b4 <HAL_UART_Init>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007e2:	f000 f889 	bl	80008f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	200003bc 	.word	0x200003bc
 80007f0:	40004400 	.word	0x40004400

080007f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	607b      	str	r3, [r7, #4]
 80007fe:	4b14      	ldr	r3, [pc, #80]	; (8000850 <MX_DMA_Init+0x5c>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a13      	ldr	r2, [pc, #76]	; (8000850 <MX_DMA_Init+0x5c>)
 8000804:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b11      	ldr	r3, [pc, #68]	; (8000850 <MX_DMA_Init+0x5c>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000816:	2200      	movs	r2, #0
 8000818:	2100      	movs	r1, #0
 800081a:	200f      	movs	r0, #15
 800081c:	f000 fbf1 	bl	8001002 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000820:	200f      	movs	r0, #15
 8000822:	f000 fc0a 	bl	800103a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000826:	2200      	movs	r2, #0
 8000828:	2100      	movs	r1, #0
 800082a:	2010      	movs	r0, #16
 800082c:	f000 fbe9 	bl	8001002 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000830:	2010      	movs	r0, #16
 8000832:	f000 fc02 	bl	800103a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000836:	2200      	movs	r2, #0
 8000838:	2100      	movs	r1, #0
 800083a:	2011      	movs	r0, #17
 800083c:	f000 fbe1 	bl	8001002 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000840:	2011      	movs	r0, #17
 8000842:	f000 fbfa 	bl	800103a <HAL_NVIC_EnableIRQ>

}
 8000846:	bf00      	nop
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40023800 	.word	0x40023800

08000854 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b088      	sub	sp, #32
 8000858:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085a:	f107 030c 	add.w	r3, r7, #12
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	605a      	str	r2, [r3, #4]
 8000864:	609a      	str	r2, [r3, #8]
 8000866:	60da      	str	r2, [r3, #12]
 8000868:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	60bb      	str	r3, [r7, #8]
 800086e:	4b20      	ldr	r3, [pc, #128]	; (80008f0 <MX_GPIO_Init+0x9c>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a1f      	ldr	r2, [pc, #124]	; (80008f0 <MX_GPIO_Init+0x9c>)
 8000874:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b1d      	ldr	r3, [pc, #116]	; (80008f0 <MX_GPIO_Init+0x9c>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000882:	60bb      	str	r3, [r7, #8]
 8000884:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	607b      	str	r3, [r7, #4]
 800088a:	4b19      	ldr	r3, [pc, #100]	; (80008f0 <MX_GPIO_Init+0x9c>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a18      	ldr	r2, [pc, #96]	; (80008f0 <MX_GPIO_Init+0x9c>)
 8000890:	f043 0301 	orr.w	r3, r3, #1
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b16      	ldr	r3, [pc, #88]	; (80008f0 <MX_GPIO_Init+0x9c>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	603b      	str	r3, [r7, #0]
 80008a6:	4b12      	ldr	r3, [pc, #72]	; (80008f0 <MX_GPIO_Init+0x9c>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a11      	ldr	r2, [pc, #68]	; (80008f0 <MX_GPIO_Init+0x9c>)
 80008ac:	f043 0302 	orr.w	r3, r3, #2
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
 80008b2:	4b0f      	ldr	r3, [pc, #60]	; (80008f0 <MX_GPIO_Init+0x9c>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f003 0302 	and.w	r3, r3, #2
 80008ba:	603b      	str	r3, [r7, #0]
 80008bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80008be:	2200      	movs	r2, #0
 80008c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008c4:	480b      	ldr	r0, [pc, #44]	; (80008f4 <MX_GPIO_Init+0xa0>)
 80008c6:	f001 f8e5 	bl	8001a94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80008ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d0:	2301      	movs	r3, #1
 80008d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d8:	2300      	movs	r3, #0
 80008da:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008dc:	f107 030c 	add.w	r3, r7, #12
 80008e0:	4619      	mov	r1, r3
 80008e2:	4804      	ldr	r0, [pc, #16]	; (80008f4 <MX_GPIO_Init+0xa0>)
 80008e4:	f000 ff54 	bl	8001790 <HAL_GPIO_Init>

}
 80008e8:	bf00      	nop
 80008ea:	3720      	adds	r7, #32
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40023800 	.word	0x40023800
 80008f4:	40020400 	.word	0x40020400

080008f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008fc:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008fe:	e7fe      	b.n	80008fe <Error_Handler+0x6>

08000900 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	607b      	str	r3, [r7, #4]
 800090a:	4b10      	ldr	r3, [pc, #64]	; (800094c <HAL_MspInit+0x4c>)
 800090c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800090e:	4a0f      	ldr	r2, [pc, #60]	; (800094c <HAL_MspInit+0x4c>)
 8000910:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000914:	6453      	str	r3, [r2, #68]	; 0x44
 8000916:	4b0d      	ldr	r3, [pc, #52]	; (800094c <HAL_MspInit+0x4c>)
 8000918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800091a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	603b      	str	r3, [r7, #0]
 8000926:	4b09      	ldr	r3, [pc, #36]	; (800094c <HAL_MspInit+0x4c>)
 8000928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092a:	4a08      	ldr	r2, [pc, #32]	; (800094c <HAL_MspInit+0x4c>)
 800092c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000930:	6413      	str	r3, [r2, #64]	; 0x40
 8000932:	4b06      	ldr	r3, [pc, #24]	; (800094c <HAL_MspInit+0x4c>)
 8000934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800093a:	603b      	str	r3, [r7, #0]
 800093c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800093e:	bf00      	nop
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	40023800 	.word	0x40023800

08000950 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b08a      	sub	sp, #40	; 0x28
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000958:	f107 0314 	add.w	r3, r7, #20
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	609a      	str	r2, [r3, #8]
 8000964:	60da      	str	r2, [r3, #12]
 8000966:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a38      	ldr	r2, [pc, #224]	; (8000a50 <HAL_SPI_MspInit+0x100>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d16a      	bne.n	8000a48 <HAL_SPI_MspInit+0xf8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	613b      	str	r3, [r7, #16]
 8000976:	4b37      	ldr	r3, [pc, #220]	; (8000a54 <HAL_SPI_MspInit+0x104>)
 8000978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097a:	4a36      	ldr	r2, [pc, #216]	; (8000a54 <HAL_SPI_MspInit+0x104>)
 800097c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000980:	6413      	str	r3, [r2, #64]	; 0x40
 8000982:	4b34      	ldr	r3, [pc, #208]	; (8000a54 <HAL_SPI_MspInit+0x104>)
 8000984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000986:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800098a:	613b      	str	r3, [r7, #16]
 800098c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	60fb      	str	r3, [r7, #12]
 8000992:	4b30      	ldr	r3, [pc, #192]	; (8000a54 <HAL_SPI_MspInit+0x104>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	4a2f      	ldr	r2, [pc, #188]	; (8000a54 <HAL_SPI_MspInit+0x104>)
 8000998:	f043 0302 	orr.w	r3, r3, #2
 800099c:	6313      	str	r3, [r2, #48]	; 0x30
 800099e:	4b2d      	ldr	r3, [pc, #180]	; (8000a54 <HAL_SPI_MspInit+0x104>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	f003 0302 	and.w	r3, r3, #2
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80009aa:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80009ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b0:	2302      	movs	r3, #2
 80009b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b8:	2303      	movs	r3, #3
 80009ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009bc:	2305      	movs	r3, #5
 80009be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c0:	f107 0314 	add.w	r3, r7, #20
 80009c4:	4619      	mov	r1, r3
 80009c6:	4824      	ldr	r0, [pc, #144]	; (8000a58 <HAL_SPI_MspInit+0x108>)
 80009c8:	f000 fee2 	bl	8001790 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80009cc:	4b23      	ldr	r3, [pc, #140]	; (8000a5c <HAL_SPI_MspInit+0x10c>)
 80009ce:	4a24      	ldr	r2, [pc, #144]	; (8000a60 <HAL_SPI_MspInit+0x110>)
 80009d0:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80009d2:	4b22      	ldr	r3, [pc, #136]	; (8000a5c <HAL_SPI_MspInit+0x10c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009d8:	4b20      	ldr	r3, [pc, #128]	; (8000a5c <HAL_SPI_MspInit+0x10c>)
 80009da:	2240      	movs	r2, #64	; 0x40
 80009dc:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009de:	4b1f      	ldr	r3, [pc, #124]	; (8000a5c <HAL_SPI_MspInit+0x10c>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80009e4:	4b1d      	ldr	r3, [pc, #116]	; (8000a5c <HAL_SPI_MspInit+0x10c>)
 80009e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009ea:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009ec:	4b1b      	ldr	r3, [pc, #108]	; (8000a5c <HAL_SPI_MspInit+0x10c>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009f2:	4b1a      	ldr	r3, [pc, #104]	; (8000a5c <HAL_SPI_MspInit+0x10c>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80009f8:	4b18      	ldr	r3, [pc, #96]	; (8000a5c <HAL_SPI_MspInit+0x10c>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80009fe:	4b17      	ldr	r3, [pc, #92]	; (8000a5c <HAL_SPI_MspInit+0x10c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000a04:	4b15      	ldr	r3, [pc, #84]	; (8000a5c <HAL_SPI_MspInit+0x10c>)
 8000a06:	2204      	movs	r2, #4
 8000a08:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000a0a:	4b14      	ldr	r3, [pc, #80]	; (8000a5c <HAL_SPI_MspInit+0x10c>)
 8000a0c:	2203      	movs	r2, #3
 8000a0e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000a10:	4b12      	ldr	r3, [pc, #72]	; (8000a5c <HAL_SPI_MspInit+0x10c>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000a16:	4b11      	ldr	r3, [pc, #68]	; (8000a5c <HAL_SPI_MspInit+0x10c>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000a1c:	480f      	ldr	r0, [pc, #60]	; (8000a5c <HAL_SPI_MspInit+0x10c>)
 8000a1e:	f000 fb27 	bl	8001070 <HAL_DMA_Init>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <HAL_SPI_MspInit+0xdc>
    {
      Error_Handler();
 8000a28:	f7ff ff66 	bl	80008f8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	4a0b      	ldr	r2, [pc, #44]	; (8000a5c <HAL_SPI_MspInit+0x10c>)
 8000a30:	649a      	str	r2, [r3, #72]	; 0x48
 8000a32:	4a0a      	ldr	r2, [pc, #40]	; (8000a5c <HAL_SPI_MspInit+0x10c>)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	2024      	movs	r0, #36	; 0x24
 8000a3e:	f000 fae0 	bl	8001002 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000a42:	2024      	movs	r0, #36	; 0x24
 8000a44:	f000 faf9 	bl	800103a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000a48:	bf00      	nop
 8000a4a:	3728      	adds	r7, #40	; 0x28
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	40003800 	.word	0x40003800
 8000a54:	40023800 	.word	0x40023800
 8000a58:	40020400 	.word	0x40020400
 8000a5c:	200003fc 	.word	0x200003fc
 8000a60:	40026070 	.word	0x40026070

08000a64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a0e      	ldr	r2, [pc, #56]	; (8000aac <HAL_TIM_Base_MspInit+0x48>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d115      	bne.n	8000aa2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	4b0d      	ldr	r3, [pc, #52]	; (8000ab0 <HAL_TIM_Base_MspInit+0x4c>)
 8000a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7e:	4a0c      	ldr	r2, [pc, #48]	; (8000ab0 <HAL_TIM_Base_MspInit+0x4c>)
 8000a80:	f043 0302 	orr.w	r3, r3, #2
 8000a84:	6413      	str	r3, [r2, #64]	; 0x40
 8000a86:	4b0a      	ldr	r3, [pc, #40]	; (8000ab0 <HAL_TIM_Base_MspInit+0x4c>)
 8000a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8a:	f003 0302 	and.w	r3, r3, #2
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000a92:	2200      	movs	r2, #0
 8000a94:	2100      	movs	r1, #0
 8000a96:	201d      	movs	r0, #29
 8000a98:	f000 fab3 	bl	8001002 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000a9c:	201d      	movs	r0, #29
 8000a9e:	f000 facc 	bl	800103a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000aa2:	bf00      	nop
 8000aa4:	3710      	adds	r7, #16
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40000400 	.word	0x40000400
 8000ab0:	40023800 	.word	0x40023800

08000ab4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b08a      	sub	sp, #40	; 0x28
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abc:	f107 0314 	add.w	r3, r7, #20
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
 8000aca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a4b      	ldr	r2, [pc, #300]	; (8000c00 <HAL_UART_MspInit+0x14c>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	f040 8090 	bne.w	8000bf8 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ad8:	2300      	movs	r3, #0
 8000ada:	613b      	str	r3, [r7, #16]
 8000adc:	4b49      	ldr	r3, [pc, #292]	; (8000c04 <HAL_UART_MspInit+0x150>)
 8000ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae0:	4a48      	ldr	r2, [pc, #288]	; (8000c04 <HAL_UART_MspInit+0x150>)
 8000ae2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ae6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae8:	4b46      	ldr	r3, [pc, #280]	; (8000c04 <HAL_UART_MspInit+0x150>)
 8000aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000af0:	613b      	str	r3, [r7, #16]
 8000af2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af4:	2300      	movs	r3, #0
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	4b42      	ldr	r3, [pc, #264]	; (8000c04 <HAL_UART_MspInit+0x150>)
 8000afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afc:	4a41      	ldr	r2, [pc, #260]	; (8000c04 <HAL_UART_MspInit+0x150>)
 8000afe:	f043 0301 	orr.w	r3, r3, #1
 8000b02:	6313      	str	r3, [r2, #48]	; 0x30
 8000b04:	4b3f      	ldr	r3, [pc, #252]	; (8000c04 <HAL_UART_MspInit+0x150>)
 8000b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b08:	f003 0301 	and.w	r3, r3, #1
 8000b0c:	60fb      	str	r3, [r7, #12]
 8000b0e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b10:	230c      	movs	r3, #12
 8000b12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b14:	2302      	movs	r3, #2
 8000b16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b1c:	2303      	movs	r3, #3
 8000b1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b20:	2307      	movs	r3, #7
 8000b22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b24:	f107 0314 	add.w	r3, r7, #20
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4837      	ldr	r0, [pc, #220]	; (8000c08 <HAL_UART_MspInit+0x154>)
 8000b2c:	f000 fe30 	bl	8001790 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000b30:	4b36      	ldr	r3, [pc, #216]	; (8000c0c <HAL_UART_MspInit+0x158>)
 8000b32:	4a37      	ldr	r2, [pc, #220]	; (8000c10 <HAL_UART_MspInit+0x15c>)
 8000b34:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000b36:	4b35      	ldr	r3, [pc, #212]	; (8000c0c <HAL_UART_MspInit+0x158>)
 8000b38:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b3c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b3e:	4b33      	ldr	r3, [pc, #204]	; (8000c0c <HAL_UART_MspInit+0x158>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b44:	4b31      	ldr	r3, [pc, #196]	; (8000c0c <HAL_UART_MspInit+0x158>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b4a:	4b30      	ldr	r3, [pc, #192]	; (8000c0c <HAL_UART_MspInit+0x158>)
 8000b4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b50:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b52:	4b2e      	ldr	r3, [pc, #184]	; (8000c0c <HAL_UART_MspInit+0x158>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b58:	4b2c      	ldr	r3, [pc, #176]	; (8000c0c <HAL_UART_MspInit+0x158>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000b5e:	4b2b      	ldr	r3, [pc, #172]	; (8000c0c <HAL_UART_MspInit+0x158>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b64:	4b29      	ldr	r3, [pc, #164]	; (8000c0c <HAL_UART_MspInit+0x158>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b6a:	4b28      	ldr	r3, [pc, #160]	; (8000c0c <HAL_UART_MspInit+0x158>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000b70:	4826      	ldr	r0, [pc, #152]	; (8000c0c <HAL_UART_MspInit+0x158>)
 8000b72:	f000 fa7d 	bl	8001070 <HAL_DMA_Init>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000b7c:	f7ff febc 	bl	80008f8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	4a22      	ldr	r2, [pc, #136]	; (8000c0c <HAL_UART_MspInit+0x158>)
 8000b84:	635a      	str	r2, [r3, #52]	; 0x34
 8000b86:	4a21      	ldr	r2, [pc, #132]	; (8000c0c <HAL_UART_MspInit+0x158>)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000b8c:	4b21      	ldr	r3, [pc, #132]	; (8000c14 <HAL_UART_MspInit+0x160>)
 8000b8e:	4a22      	ldr	r2, [pc, #136]	; (8000c18 <HAL_UART_MspInit+0x164>)
 8000b90:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000b92:	4b20      	ldr	r3, [pc, #128]	; (8000c14 <HAL_UART_MspInit+0x160>)
 8000b94:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b98:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b9a:	4b1e      	ldr	r3, [pc, #120]	; (8000c14 <HAL_UART_MspInit+0x160>)
 8000b9c:	2240      	movs	r2, #64	; 0x40
 8000b9e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ba0:	4b1c      	ldr	r3, [pc, #112]	; (8000c14 <HAL_UART_MspInit+0x160>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ba6:	4b1b      	ldr	r3, [pc, #108]	; (8000c14 <HAL_UART_MspInit+0x160>)
 8000ba8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bac:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bae:	4b19      	ldr	r3, [pc, #100]	; (8000c14 <HAL_UART_MspInit+0x160>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bb4:	4b17      	ldr	r3, [pc, #92]	; (8000c14 <HAL_UART_MspInit+0x160>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000bba:	4b16      	ldr	r3, [pc, #88]	; (8000c14 <HAL_UART_MspInit+0x160>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000bc0:	4b14      	ldr	r3, [pc, #80]	; (8000c14 <HAL_UART_MspInit+0x160>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000bc6:	4b13      	ldr	r3, [pc, #76]	; (8000c14 <HAL_UART_MspInit+0x160>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000bcc:	4811      	ldr	r0, [pc, #68]	; (8000c14 <HAL_UART_MspInit+0x160>)
 8000bce:	f000 fa4f 	bl	8001070 <HAL_DMA_Init>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8000bd8:	f7ff fe8e 	bl	80008f8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	4a0d      	ldr	r2, [pc, #52]	; (8000c14 <HAL_UART_MspInit+0x160>)
 8000be0:	631a      	str	r2, [r3, #48]	; 0x30
 8000be2:	4a0c      	ldr	r2, [pc, #48]	; (8000c14 <HAL_UART_MspInit+0x160>)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000be8:	2200      	movs	r2, #0
 8000bea:	2100      	movs	r1, #0
 8000bec:	2026      	movs	r0, #38	; 0x26
 8000bee:	f000 fa08 	bl	8001002 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000bf2:	2026      	movs	r0, #38	; 0x26
 8000bf4:	f000 fa21 	bl	800103a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bf8:	bf00      	nop
 8000bfa:	3728      	adds	r7, #40	; 0x28
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	40004400 	.word	0x40004400
 8000c04:	40023800 	.word	0x40023800
 8000c08:	40020000 	.word	0x40020000
 8000c0c:	2000012c 	.word	0x2000012c
 8000c10:	40026088 	.word	0x40026088
 8000c14:	2000035c 	.word	0x2000035c
 8000c18:	400260a0 	.word	0x400260a0

08000c1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <NMI_Handler+0x4>

08000c22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c26:	e7fe      	b.n	8000c26 <HardFault_Handler+0x4>

08000c28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c2c:	e7fe      	b.n	8000c2c <MemManage_Handler+0x4>

08000c2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c32:	e7fe      	b.n	8000c32 <BusFault_Handler+0x4>

08000c34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c38:	e7fe      	b.n	8000c38 <UsageFault_Handler+0x4>

08000c3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr

08000c48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr

08000c56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c56:	b480      	push	{r7}
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr

08000c64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c68:	f000 f8d0 	bl	8000e0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c6c:	bf00      	nop
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000c74:	4802      	ldr	r0, [pc, #8]	; (8000c80 <DMA1_Stream4_IRQHandler+0x10>)
 8000c76:	f000 fb23 	bl	80012c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	200003fc 	.word	0x200003fc

08000c84 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000c88:	4802      	ldr	r0, [pc, #8]	; (8000c94 <DMA1_Stream5_IRQHandler+0x10>)
 8000c8a:	f000 fb19 	bl	80012c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	2000012c 	.word	0x2000012c

08000c98 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000c9c:	4802      	ldr	r0, [pc, #8]	; (8000ca8 <DMA1_Stream6_IRQHandler+0x10>)
 8000c9e:	f000 fb0f 	bl	80012c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	2000035c 	.word	0x2000035c

08000cac <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000cb0:	4802      	ldr	r0, [pc, #8]	; (8000cbc <TIM3_IRQHandler+0x10>)
 8000cb2:	f001 fefc 	bl	8002aae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	200001e4 	.word	0x200001e4

08000cc0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000cc4:	4802      	ldr	r0, [pc, #8]	; (8000cd0 <SPI2_IRQHandler+0x10>)
 8000cc6:	f001 fc4d 	bl	8002564 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	2000018c 	.word	0x2000018c

08000cd4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000cd8:	4802      	ldr	r0, [pc, #8]	; (8000ce4 <USART2_IRQHandler+0x10>)
 8000cda:	f002 fb39 	bl	8003350 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	200003bc 	.word	0x200003bc

08000ce8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cec:	4b08      	ldr	r3, [pc, #32]	; (8000d10 <SystemInit+0x28>)
 8000cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cf2:	4a07      	ldr	r2, [pc, #28]	; (8000d10 <SystemInit+0x28>)
 8000cf4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cf8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000cfc:	4b04      	ldr	r3, [pc, #16]	; (8000d10 <SystemInit+0x28>)
 8000cfe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d02:	609a      	str	r2, [r3, #8]
#endif
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	e000ed00 	.word	0xe000ed00

08000d14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d4c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000d18:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000d1a:	e003      	b.n	8000d24 <LoopCopyDataInit>

08000d1c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000d1c:	4b0c      	ldr	r3, [pc, #48]	; (8000d50 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000d1e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000d20:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000d22:	3104      	adds	r1, #4

08000d24 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000d24:	480b      	ldr	r0, [pc, #44]	; (8000d54 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000d26:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000d28:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000d2a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000d2c:	d3f6      	bcc.n	8000d1c <CopyDataInit>
  ldr  r2, =_sbss
 8000d2e:	4a0b      	ldr	r2, [pc, #44]	; (8000d5c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000d30:	e002      	b.n	8000d38 <LoopFillZerobss>

08000d32 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000d32:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000d34:	f842 3b04 	str.w	r3, [r2], #4

08000d38 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000d38:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000d3a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000d3c:	d3f9      	bcc.n	8000d32 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d3e:	f7ff ffd3 	bl	8000ce8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d42:	f003 fcc9 	bl	80046d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d46:	f7ff fc09 	bl	800055c <main>
  bx  lr    
 8000d4a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d4c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000d50:	08004b78 	.word	0x08004b78
  ldr  r0, =_sdata
 8000d54:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000d58:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000d5c:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000d60:	20000460 	.word	0x20000460

08000d64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d64:	e7fe      	b.n	8000d64 <ADC_IRQHandler>
	...

08000d68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d6c:	4b0e      	ldr	r3, [pc, #56]	; (8000da8 <HAL_Init+0x40>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a0d      	ldr	r2, [pc, #52]	; (8000da8 <HAL_Init+0x40>)
 8000d72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d78:	4b0b      	ldr	r3, [pc, #44]	; (8000da8 <HAL_Init+0x40>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a0a      	ldr	r2, [pc, #40]	; (8000da8 <HAL_Init+0x40>)
 8000d7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d84:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <HAL_Init+0x40>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a07      	ldr	r2, [pc, #28]	; (8000da8 <HAL_Init+0x40>)
 8000d8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d90:	2003      	movs	r0, #3
 8000d92:	f000 f92b 	bl	8000fec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d96:	2000      	movs	r0, #0
 8000d98:	f000 f808 	bl	8000dac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d9c:	f7ff fdb0 	bl	8000900 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000da0:	2300      	movs	r3, #0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40023c00 	.word	0x40023c00

08000dac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000db4:	4b12      	ldr	r3, [pc, #72]	; (8000e00 <HAL_InitTick+0x54>)
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	4b12      	ldr	r3, [pc, #72]	; (8000e04 <HAL_InitTick+0x58>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f000 f943 	bl	8001056 <HAL_SYSTICK_Config>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	e00e      	b.n	8000df8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2b0f      	cmp	r3, #15
 8000dde:	d80a      	bhi.n	8000df6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000de0:	2200      	movs	r2, #0
 8000de2:	6879      	ldr	r1, [r7, #4]
 8000de4:	f04f 30ff 	mov.w	r0, #4294967295
 8000de8:	f000 f90b 	bl	8001002 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dec:	4a06      	ldr	r2, [pc, #24]	; (8000e08 <HAL_InitTick+0x5c>)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000df2:	2300      	movs	r3, #0
 8000df4:	e000      	b.n	8000df8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000df6:	2301      	movs	r3, #1
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3708      	adds	r7, #8
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	20000000 	.word	0x20000000
 8000e04:	20000008 	.word	0x20000008
 8000e08:	20000004 	.word	0x20000004

08000e0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e10:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <HAL_IncTick+0x20>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	461a      	mov	r2, r3
 8000e16:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <HAL_IncTick+0x24>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	4a04      	ldr	r2, [pc, #16]	; (8000e30 <HAL_IncTick+0x24>)
 8000e1e:	6013      	str	r3, [r2, #0]
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	20000008 	.word	0x20000008
 8000e30:	2000045c 	.word	0x2000045c

08000e34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  return uwTick;
 8000e38:	4b03      	ldr	r3, [pc, #12]	; (8000e48 <HAL_GetTick+0x14>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	2000045c 	.word	0x2000045c

08000e4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b085      	sub	sp, #20
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	f003 0307 	and.w	r3, r3, #7
 8000e5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e5c:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <__NVIC_SetPriorityGrouping+0x44>)
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e62:	68ba      	ldr	r2, [r7, #8]
 8000e64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e68:	4013      	ands	r3, r2
 8000e6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e7e:	4a04      	ldr	r2, [pc, #16]	; (8000e90 <__NVIC_SetPriorityGrouping+0x44>)
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	60d3      	str	r3, [r2, #12]
}
 8000e84:	bf00      	nop
 8000e86:	3714      	adds	r7, #20
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	e000ed00 	.word	0xe000ed00

08000e94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e98:	4b04      	ldr	r3, [pc, #16]	; (8000eac <__NVIC_GetPriorityGrouping+0x18>)
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	0a1b      	lsrs	r3, r3, #8
 8000e9e:	f003 0307 	and.w	r3, r3, #7
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	db0b      	blt.n	8000eda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ec2:	79fb      	ldrb	r3, [r7, #7]
 8000ec4:	f003 021f 	and.w	r2, r3, #31
 8000ec8:	4907      	ldr	r1, [pc, #28]	; (8000ee8 <__NVIC_EnableIRQ+0x38>)
 8000eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ece:	095b      	lsrs	r3, r3, #5
 8000ed0:	2001      	movs	r0, #1
 8000ed2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eda:	bf00      	nop
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	e000e100 	.word	0xe000e100

08000eec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	6039      	str	r1, [r7, #0]
 8000ef6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	db0a      	blt.n	8000f16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	b2da      	uxtb	r2, r3
 8000f04:	490c      	ldr	r1, [pc, #48]	; (8000f38 <__NVIC_SetPriority+0x4c>)
 8000f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0a:	0112      	lsls	r2, r2, #4
 8000f0c:	b2d2      	uxtb	r2, r2
 8000f0e:	440b      	add	r3, r1
 8000f10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f14:	e00a      	b.n	8000f2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	b2da      	uxtb	r2, r3
 8000f1a:	4908      	ldr	r1, [pc, #32]	; (8000f3c <__NVIC_SetPriority+0x50>)
 8000f1c:	79fb      	ldrb	r3, [r7, #7]
 8000f1e:	f003 030f 	and.w	r3, r3, #15
 8000f22:	3b04      	subs	r3, #4
 8000f24:	0112      	lsls	r2, r2, #4
 8000f26:	b2d2      	uxtb	r2, r2
 8000f28:	440b      	add	r3, r1
 8000f2a:	761a      	strb	r2, [r3, #24]
}
 8000f2c:	bf00      	nop
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	e000e100 	.word	0xe000e100
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b089      	sub	sp, #36	; 0x24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	60b9      	str	r1, [r7, #8]
 8000f4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	f003 0307 	and.w	r3, r3, #7
 8000f52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	f1c3 0307 	rsb	r3, r3, #7
 8000f5a:	2b04      	cmp	r3, #4
 8000f5c:	bf28      	it	cs
 8000f5e:	2304      	movcs	r3, #4
 8000f60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	3304      	adds	r3, #4
 8000f66:	2b06      	cmp	r3, #6
 8000f68:	d902      	bls.n	8000f70 <NVIC_EncodePriority+0x30>
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	3b03      	subs	r3, #3
 8000f6e:	e000      	b.n	8000f72 <NVIC_EncodePriority+0x32>
 8000f70:	2300      	movs	r3, #0
 8000f72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f74:	f04f 32ff 	mov.w	r2, #4294967295
 8000f78:	69bb      	ldr	r3, [r7, #24]
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	43da      	mvns	r2, r3
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	401a      	ands	r2, r3
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f88:	f04f 31ff 	mov.w	r1, #4294967295
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f92:	43d9      	mvns	r1, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f98:	4313      	orrs	r3, r2
         );
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3724      	adds	r7, #36	; 0x24
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
	...

08000fa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	3b01      	subs	r3, #1
 8000fb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fb8:	d301      	bcc.n	8000fbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e00f      	b.n	8000fde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fbe:	4a0a      	ldr	r2, [pc, #40]	; (8000fe8 <SysTick_Config+0x40>)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fc6:	210f      	movs	r1, #15
 8000fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fcc:	f7ff ff8e 	bl	8000eec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fd0:	4b05      	ldr	r3, [pc, #20]	; (8000fe8 <SysTick_Config+0x40>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fd6:	4b04      	ldr	r3, [pc, #16]	; (8000fe8 <SysTick_Config+0x40>)
 8000fd8:	2207      	movs	r2, #7
 8000fda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fdc:	2300      	movs	r3, #0
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	e000e010 	.word	0xe000e010

08000fec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f7ff ff29 	bl	8000e4c <__NVIC_SetPriorityGrouping>
}
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001002:	b580      	push	{r7, lr}
 8001004:	b086      	sub	sp, #24
 8001006:	af00      	add	r7, sp, #0
 8001008:	4603      	mov	r3, r0
 800100a:	60b9      	str	r1, [r7, #8]
 800100c:	607a      	str	r2, [r7, #4]
 800100e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001010:	2300      	movs	r3, #0
 8001012:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001014:	f7ff ff3e 	bl	8000e94 <__NVIC_GetPriorityGrouping>
 8001018:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800101a:	687a      	ldr	r2, [r7, #4]
 800101c:	68b9      	ldr	r1, [r7, #8]
 800101e:	6978      	ldr	r0, [r7, #20]
 8001020:	f7ff ff8e 	bl	8000f40 <NVIC_EncodePriority>
 8001024:	4602      	mov	r2, r0
 8001026:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800102a:	4611      	mov	r1, r2
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff ff5d 	bl	8000eec <__NVIC_SetPriority>
}
 8001032:	bf00      	nop
 8001034:	3718      	adds	r7, #24
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b082      	sub	sp, #8
 800103e:	af00      	add	r7, sp, #0
 8001040:	4603      	mov	r3, r0
 8001042:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff ff31 	bl	8000eb0 <__NVIC_EnableIRQ>
}
 800104e:	bf00      	nop
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b082      	sub	sp, #8
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f7ff ffa2 	bl	8000fa8 <SysTick_Config>
 8001064:	4603      	mov	r3, r0
}
 8001066:	4618      	mov	r0, r3
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
	...

08001070 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800107c:	f7ff feda 	bl	8000e34 <HAL_GetTick>
 8001080:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d101      	bne.n	800108c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001088:	2301      	movs	r3, #1
 800108a:	e099      	b.n	80011c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2200      	movs	r2, #0
 8001090:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2202      	movs	r2, #2
 8001098:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f022 0201 	bic.w	r2, r2, #1
 80010aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010ac:	e00f      	b.n	80010ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010ae:	f7ff fec1 	bl	8000e34 <HAL_GetTick>
 80010b2:	4602      	mov	r2, r0
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	1ad3      	subs	r3, r2, r3
 80010b8:	2b05      	cmp	r3, #5
 80010ba:	d908      	bls.n	80010ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2220      	movs	r2, #32
 80010c0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2203      	movs	r2, #3
 80010c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80010ca:	2303      	movs	r3, #3
 80010cc:	e078      	b.n	80011c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f003 0301 	and.w	r3, r3, #1
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d1e8      	bne.n	80010ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80010e4:	697a      	ldr	r2, [r7, #20]
 80010e6:	4b38      	ldr	r3, [pc, #224]	; (80011c8 <HAL_DMA_Init+0x158>)
 80010e8:	4013      	ands	r3, r2
 80010ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	685a      	ldr	r2, [r3, #4]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	691b      	ldr	r3, [r3, #16]
 8001100:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001106:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	699b      	ldr	r3, [r3, #24]
 800110c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001112:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6a1b      	ldr	r3, [r3, #32]
 8001118:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800111a:	697a      	ldr	r2, [r7, #20]
 800111c:	4313      	orrs	r3, r2
 800111e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001124:	2b04      	cmp	r3, #4
 8001126:	d107      	bne.n	8001138 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001130:	4313      	orrs	r3, r2
 8001132:	697a      	ldr	r2, [r7, #20]
 8001134:	4313      	orrs	r3, r2
 8001136:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	697a      	ldr	r2, [r7, #20]
 800113e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	695b      	ldr	r3, [r3, #20]
 8001146:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	f023 0307 	bic.w	r3, r3, #7
 800114e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001154:	697a      	ldr	r2, [r7, #20]
 8001156:	4313      	orrs	r3, r2
 8001158:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800115e:	2b04      	cmp	r3, #4
 8001160:	d117      	bne.n	8001192 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001166:	697a      	ldr	r2, [r7, #20]
 8001168:	4313      	orrs	r3, r2
 800116a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001170:	2b00      	cmp	r3, #0
 8001172:	d00e      	beq.n	8001192 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f000 fa91 	bl	800169c <DMA_CheckFifoParam>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d008      	beq.n	8001192 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2240      	movs	r2, #64	; 0x40
 8001184:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2201      	movs	r2, #1
 800118a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800118e:	2301      	movs	r3, #1
 8001190:	e016      	b.n	80011c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	697a      	ldr	r2, [r7, #20]
 8001198:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f000 fa48 	bl	8001630 <DMA_CalcBaseAndBitshift>
 80011a0:	4603      	mov	r3, r0
 80011a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011a8:	223f      	movs	r2, #63	; 0x3f
 80011aa:	409a      	lsls	r2, r3
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2200      	movs	r2, #0
 80011b4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2201      	movs	r2, #1
 80011ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80011be:	2300      	movs	r3, #0
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3718      	adds	r7, #24
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	f010803f 	.word	0xf010803f

080011cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b086      	sub	sp, #24
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	607a      	str	r2, [r7, #4]
 80011d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80011da:	2300      	movs	r3, #0
 80011dc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011e2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d101      	bne.n	80011f2 <HAL_DMA_Start_IT+0x26>
 80011ee:	2302      	movs	r3, #2
 80011f0:	e040      	b.n	8001274 <HAL_DMA_Start_IT+0xa8>
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	2201      	movs	r2, #1
 80011f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001200:	b2db      	uxtb	r3, r3
 8001202:	2b01      	cmp	r3, #1
 8001204:	d12f      	bne.n	8001266 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	2202      	movs	r2, #2
 800120a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	2200      	movs	r2, #0
 8001212:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	68b9      	ldr	r1, [r7, #8]
 800121a:	68f8      	ldr	r0, [r7, #12]
 800121c:	f000 f9da 	bl	80015d4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001224:	223f      	movs	r2, #63	; 0x3f
 8001226:	409a      	lsls	r2, r3
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f042 0216 	orr.w	r2, r2, #22
 800123a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001240:	2b00      	cmp	r3, #0
 8001242:	d007      	beq.n	8001254 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f042 0208 	orr.w	r2, r2, #8
 8001252:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f042 0201 	orr.w	r2, r2, #1
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	e005      	b.n	8001272 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	2200      	movs	r2, #0
 800126a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800126e:	2302      	movs	r3, #2
 8001270:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001272:	7dfb      	ldrb	r3, [r7, #23]
}
 8001274:	4618      	mov	r0, r3
 8001276:	3718      	adds	r7, #24
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}

0800127c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800128a:	b2db      	uxtb	r3, r3
 800128c:	2b02      	cmp	r3, #2
 800128e:	d004      	beq.n	800129a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2280      	movs	r2, #128	; 0x80
 8001294:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e00c      	b.n	80012b4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2205      	movs	r2, #5
 800129e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f022 0201 	bic.w	r2, r2, #1
 80012b0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80012b2:	2300      	movs	r3, #0
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80012c8:	2300      	movs	r3, #0
 80012ca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80012cc:	4b92      	ldr	r3, [pc, #584]	; (8001518 <HAL_DMA_IRQHandler+0x258>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a92      	ldr	r2, [pc, #584]	; (800151c <HAL_DMA_IRQHandler+0x25c>)
 80012d2:	fba2 2303 	umull	r2, r3, r2, r3
 80012d6:	0a9b      	lsrs	r3, r3, #10
 80012d8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012de:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012ea:	2208      	movs	r2, #8
 80012ec:	409a      	lsls	r2, r3
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	4013      	ands	r3, r2
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d01a      	beq.n	800132c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f003 0304 	and.w	r3, r3, #4
 8001300:	2b00      	cmp	r3, #0
 8001302:	d013      	beq.n	800132c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f022 0204 	bic.w	r2, r2, #4
 8001312:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001318:	2208      	movs	r2, #8
 800131a:	409a      	lsls	r2, r3
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001324:	f043 0201 	orr.w	r2, r3, #1
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001330:	2201      	movs	r2, #1
 8001332:	409a      	lsls	r2, r3
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	4013      	ands	r3, r2
 8001338:	2b00      	cmp	r3, #0
 800133a:	d012      	beq.n	8001362 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	695b      	ldr	r3, [r3, #20]
 8001342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001346:	2b00      	cmp	r3, #0
 8001348:	d00b      	beq.n	8001362 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800134e:	2201      	movs	r2, #1
 8001350:	409a      	lsls	r2, r3
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800135a:	f043 0202 	orr.w	r2, r3, #2
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001366:	2204      	movs	r2, #4
 8001368:	409a      	lsls	r2, r3
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	4013      	ands	r3, r2
 800136e:	2b00      	cmp	r3, #0
 8001370:	d012      	beq.n	8001398 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 0302 	and.w	r3, r3, #2
 800137c:	2b00      	cmp	r3, #0
 800137e:	d00b      	beq.n	8001398 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001384:	2204      	movs	r2, #4
 8001386:	409a      	lsls	r2, r3
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001390:	f043 0204 	orr.w	r2, r3, #4
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800139c:	2210      	movs	r2, #16
 800139e:	409a      	lsls	r2, r3
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	4013      	ands	r3, r2
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d043      	beq.n	8001430 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0308 	and.w	r3, r3, #8
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d03c      	beq.n	8001430 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013ba:	2210      	movs	r2, #16
 80013bc:	409a      	lsls	r2, r3
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d018      	beq.n	8001402 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d108      	bne.n	80013f0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d024      	beq.n	8001430 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	4798      	blx	r3
 80013ee:	e01f      	b.n	8001430 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d01b      	beq.n	8001430 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	4798      	blx	r3
 8001400:	e016      	b.n	8001430 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800140c:	2b00      	cmp	r3, #0
 800140e:	d107      	bne.n	8001420 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f022 0208 	bic.w	r2, r2, #8
 800141e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001424:	2b00      	cmp	r3, #0
 8001426:	d003      	beq.n	8001430 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001434:	2220      	movs	r2, #32
 8001436:	409a      	lsls	r2, r3
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	4013      	ands	r3, r2
 800143c:	2b00      	cmp	r3, #0
 800143e:	f000 808e 	beq.w	800155e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0310 	and.w	r3, r3, #16
 800144c:	2b00      	cmp	r3, #0
 800144e:	f000 8086 	beq.w	800155e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001456:	2220      	movs	r2, #32
 8001458:	409a      	lsls	r2, r3
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001464:	b2db      	uxtb	r3, r3
 8001466:	2b05      	cmp	r3, #5
 8001468:	d136      	bne.n	80014d8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f022 0216 	bic.w	r2, r2, #22
 8001478:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	695a      	ldr	r2, [r3, #20]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001488:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148e:	2b00      	cmp	r3, #0
 8001490:	d103      	bne.n	800149a <HAL_DMA_IRQHandler+0x1da>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001496:	2b00      	cmp	r3, #0
 8001498:	d007      	beq.n	80014aa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f022 0208 	bic.w	r2, r2, #8
 80014a8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014ae:	223f      	movs	r2, #63	; 0x3f
 80014b0:	409a      	lsls	r2, r3
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2200      	movs	r2, #0
 80014ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2201      	movs	r2, #1
 80014c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d07d      	beq.n	80015ca <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	4798      	blx	r3
        }
        return;
 80014d6:	e078      	b.n	80015ca <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d01c      	beq.n	8001520 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d108      	bne.n	8001506 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d030      	beq.n	800155e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	4798      	blx	r3
 8001504:	e02b      	b.n	800155e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800150a:	2b00      	cmp	r3, #0
 800150c:	d027      	beq.n	800155e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	4798      	blx	r3
 8001516:	e022      	b.n	800155e <HAL_DMA_IRQHandler+0x29e>
 8001518:	20000000 	.word	0x20000000
 800151c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800152a:	2b00      	cmp	r3, #0
 800152c:	d10f      	bne.n	800154e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f022 0210 	bic.w	r2, r2, #16
 800153c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2200      	movs	r2, #0
 8001542:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2201      	movs	r2, #1
 800154a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001552:	2b00      	cmp	r3, #0
 8001554:	d003      	beq.n	800155e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001562:	2b00      	cmp	r3, #0
 8001564:	d032      	beq.n	80015cc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	2b00      	cmp	r3, #0
 8001570:	d022      	beq.n	80015b8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2205      	movs	r2, #5
 8001576:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f022 0201 	bic.w	r2, r2, #1
 8001588:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	3301      	adds	r3, #1
 800158e:	60bb      	str	r3, [r7, #8]
 8001590:	697a      	ldr	r2, [r7, #20]
 8001592:	429a      	cmp	r2, r3
 8001594:	d307      	bcc.n	80015a6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0301 	and.w	r3, r3, #1
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d1f2      	bne.n	800158a <HAL_DMA_IRQHandler+0x2ca>
 80015a4:	e000      	b.n	80015a8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80015a6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2200      	movs	r2, #0
 80015ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2201      	movs	r2, #1
 80015b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d005      	beq.n	80015cc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	4798      	blx	r3
 80015c8:	e000      	b.n	80015cc <HAL_DMA_IRQHandler+0x30c>
        return;
 80015ca:	bf00      	nop
    }
  }
}
 80015cc:	3718      	adds	r7, #24
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop

080015d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
 80015da:	60f8      	str	r0, [r7, #12]
 80015dc:	60b9      	str	r1, [r7, #8]
 80015de:	607a      	str	r2, [r7, #4]
 80015e0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80015f0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	683a      	ldr	r2, [r7, #0]
 80015f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	2b40      	cmp	r3, #64	; 0x40
 8001600:	d108      	bne.n	8001614 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	68ba      	ldr	r2, [r7, #8]
 8001610:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001612:	e007      	b.n	8001624 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	68ba      	ldr	r2, [r7, #8]
 800161a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	60da      	str	r2, [r3, #12]
}
 8001624:	bf00      	nop
 8001626:	3714      	adds	r7, #20
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001630:	b480      	push	{r7}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	b2db      	uxtb	r3, r3
 800163e:	3b10      	subs	r3, #16
 8001640:	4a14      	ldr	r2, [pc, #80]	; (8001694 <DMA_CalcBaseAndBitshift+0x64>)
 8001642:	fba2 2303 	umull	r2, r3, r2, r3
 8001646:	091b      	lsrs	r3, r3, #4
 8001648:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800164a:	4a13      	ldr	r2, [pc, #76]	; (8001698 <DMA_CalcBaseAndBitshift+0x68>)
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	4413      	add	r3, r2
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	461a      	mov	r2, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	2b03      	cmp	r3, #3
 800165c:	d909      	bls.n	8001672 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001666:	f023 0303 	bic.w	r3, r3, #3
 800166a:	1d1a      	adds	r2, r3, #4
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	659a      	str	r2, [r3, #88]	; 0x58
 8001670:	e007      	b.n	8001682 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800167a:	f023 0303 	bic.w	r3, r3, #3
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001686:	4618      	mov	r0, r3
 8001688:	3714      	adds	r7, #20
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	aaaaaaab 	.word	0xaaaaaaab
 8001698:	08004760 	.word	0x08004760

0800169c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800169c:	b480      	push	{r7}
 800169e:	b085      	sub	sp, #20
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016a4:	2300      	movs	r3, #0
 80016a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	699b      	ldr	r3, [r3, #24]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d11f      	bne.n	80016f6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	2b03      	cmp	r3, #3
 80016ba:	d855      	bhi.n	8001768 <DMA_CheckFifoParam+0xcc>
 80016bc:	a201      	add	r2, pc, #4	; (adr r2, 80016c4 <DMA_CheckFifoParam+0x28>)
 80016be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016c2:	bf00      	nop
 80016c4:	080016d5 	.word	0x080016d5
 80016c8:	080016e7 	.word	0x080016e7
 80016cc:	080016d5 	.word	0x080016d5
 80016d0:	08001769 	.word	0x08001769
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d045      	beq.n	800176c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80016e4:	e042      	b.n	800176c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80016ee:	d13f      	bne.n	8001770 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80016f4:	e03c      	b.n	8001770 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	699b      	ldr	r3, [r3, #24]
 80016fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016fe:	d121      	bne.n	8001744 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	2b03      	cmp	r3, #3
 8001704:	d836      	bhi.n	8001774 <DMA_CheckFifoParam+0xd8>
 8001706:	a201      	add	r2, pc, #4	; (adr r2, 800170c <DMA_CheckFifoParam+0x70>)
 8001708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800170c:	0800171d 	.word	0x0800171d
 8001710:	08001723 	.word	0x08001723
 8001714:	0800171d 	.word	0x0800171d
 8001718:	08001735 	.word	0x08001735
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	73fb      	strb	r3, [r7, #15]
      break;
 8001720:	e02f      	b.n	8001782 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001726:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d024      	beq.n	8001778 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001732:	e021      	b.n	8001778 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001738:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800173c:	d11e      	bne.n	800177c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001742:	e01b      	b.n	800177c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	2b02      	cmp	r3, #2
 8001748:	d902      	bls.n	8001750 <DMA_CheckFifoParam+0xb4>
 800174a:	2b03      	cmp	r3, #3
 800174c:	d003      	beq.n	8001756 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800174e:	e018      	b.n	8001782 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	73fb      	strb	r3, [r7, #15]
      break;
 8001754:	e015      	b.n	8001782 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800175a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d00e      	beq.n	8001780 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	73fb      	strb	r3, [r7, #15]
      break;
 8001766:	e00b      	b.n	8001780 <DMA_CheckFifoParam+0xe4>
      break;
 8001768:	bf00      	nop
 800176a:	e00a      	b.n	8001782 <DMA_CheckFifoParam+0xe6>
      break;
 800176c:	bf00      	nop
 800176e:	e008      	b.n	8001782 <DMA_CheckFifoParam+0xe6>
      break;
 8001770:	bf00      	nop
 8001772:	e006      	b.n	8001782 <DMA_CheckFifoParam+0xe6>
      break;
 8001774:	bf00      	nop
 8001776:	e004      	b.n	8001782 <DMA_CheckFifoParam+0xe6>
      break;
 8001778:	bf00      	nop
 800177a:	e002      	b.n	8001782 <DMA_CheckFifoParam+0xe6>
      break;   
 800177c:	bf00      	nop
 800177e:	e000      	b.n	8001782 <DMA_CheckFifoParam+0xe6>
      break;
 8001780:	bf00      	nop
    }
  } 
  
  return status; 
 8001782:	7bfb      	ldrb	r3, [r7, #15]
}
 8001784:	4618      	mov	r0, r3
 8001786:	3714      	adds	r7, #20
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001790:	b480      	push	{r7}
 8001792:	b089      	sub	sp, #36	; 0x24
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800179a:	2300      	movs	r3, #0
 800179c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800179e:	2300      	movs	r3, #0
 80017a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017a2:	2300      	movs	r3, #0
 80017a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017a6:	2300      	movs	r3, #0
 80017a8:	61fb      	str	r3, [r7, #28]
 80017aa:	e159      	b.n	8001a60 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017ac:	2201      	movs	r2, #1
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	697a      	ldr	r2, [r7, #20]
 80017bc:	4013      	ands	r3, r2
 80017be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017c0:	693a      	ldr	r2, [r7, #16]
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	f040 8148 	bne.w	8001a5a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d00b      	beq.n	80017ea <HAL_GPIO_Init+0x5a>
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d007      	beq.n	80017ea <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017de:	2b11      	cmp	r3, #17
 80017e0:	d003      	beq.n	80017ea <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	2b12      	cmp	r3, #18
 80017e8:	d130      	bne.n	800184c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	2203      	movs	r2, #3
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	43db      	mvns	r3, r3
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	4013      	ands	r3, r2
 8001800:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	68da      	ldr	r2, [r3, #12]
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	fa02 f303 	lsl.w	r3, r2, r3
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	4313      	orrs	r3, r2
 8001812:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001820:	2201      	movs	r2, #1
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	43db      	mvns	r3, r3
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	4013      	ands	r3, r2
 800182e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	091b      	lsrs	r3, r3, #4
 8001836:	f003 0201 	and.w	r2, r3, #1
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	4313      	orrs	r3, r2
 8001844:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	2203      	movs	r2, #3
 8001858:	fa02 f303 	lsl.w	r3, r2, r3
 800185c:	43db      	mvns	r3, r3
 800185e:	69ba      	ldr	r2, [r7, #24]
 8001860:	4013      	ands	r3, r2
 8001862:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	689a      	ldr	r2, [r3, #8]
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	4313      	orrs	r3, r2
 8001874:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	2b02      	cmp	r3, #2
 8001882:	d003      	beq.n	800188c <HAL_GPIO_Init+0xfc>
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	2b12      	cmp	r3, #18
 800188a:	d123      	bne.n	80018d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	08da      	lsrs	r2, r3, #3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	3208      	adds	r2, #8
 8001894:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001898:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	f003 0307 	and.w	r3, r3, #7
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	220f      	movs	r2, #15
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	43db      	mvns	r3, r3
 80018aa:	69ba      	ldr	r2, [r7, #24]
 80018ac:	4013      	ands	r3, r2
 80018ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	691a      	ldr	r2, [r3, #16]
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	f003 0307 	and.w	r3, r3, #7
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	08da      	lsrs	r2, r3, #3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	3208      	adds	r2, #8
 80018ce:	69b9      	ldr	r1, [r7, #24]
 80018d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	2203      	movs	r2, #3
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	43db      	mvns	r3, r3
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	4013      	ands	r3, r2
 80018ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f003 0203 	and.w	r2, r3, #3
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	4313      	orrs	r3, r2
 8001900:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001910:	2b00      	cmp	r3, #0
 8001912:	f000 80a2 	beq.w	8001a5a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	60fb      	str	r3, [r7, #12]
 800191a:	4b56      	ldr	r3, [pc, #344]	; (8001a74 <HAL_GPIO_Init+0x2e4>)
 800191c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191e:	4a55      	ldr	r2, [pc, #340]	; (8001a74 <HAL_GPIO_Init+0x2e4>)
 8001920:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001924:	6453      	str	r3, [r2, #68]	; 0x44
 8001926:	4b53      	ldr	r3, [pc, #332]	; (8001a74 <HAL_GPIO_Init+0x2e4>)
 8001928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800192e:	60fb      	str	r3, [r7, #12]
 8001930:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001932:	4a51      	ldr	r2, [pc, #324]	; (8001a78 <HAL_GPIO_Init+0x2e8>)
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	089b      	lsrs	r3, r3, #2
 8001938:	3302      	adds	r3, #2
 800193a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800193e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	f003 0303 	and.w	r3, r3, #3
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	220f      	movs	r2, #15
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	43db      	mvns	r3, r3
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	4013      	ands	r3, r2
 8001954:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a48      	ldr	r2, [pc, #288]	; (8001a7c <HAL_GPIO_Init+0x2ec>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d019      	beq.n	8001992 <HAL_GPIO_Init+0x202>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a47      	ldr	r2, [pc, #284]	; (8001a80 <HAL_GPIO_Init+0x2f0>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d013      	beq.n	800198e <HAL_GPIO_Init+0x1fe>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a46      	ldr	r2, [pc, #280]	; (8001a84 <HAL_GPIO_Init+0x2f4>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d00d      	beq.n	800198a <HAL_GPIO_Init+0x1fa>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a45      	ldr	r2, [pc, #276]	; (8001a88 <HAL_GPIO_Init+0x2f8>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d007      	beq.n	8001986 <HAL_GPIO_Init+0x1f6>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a44      	ldr	r2, [pc, #272]	; (8001a8c <HAL_GPIO_Init+0x2fc>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d101      	bne.n	8001982 <HAL_GPIO_Init+0x1f2>
 800197e:	2304      	movs	r3, #4
 8001980:	e008      	b.n	8001994 <HAL_GPIO_Init+0x204>
 8001982:	2307      	movs	r3, #7
 8001984:	e006      	b.n	8001994 <HAL_GPIO_Init+0x204>
 8001986:	2303      	movs	r3, #3
 8001988:	e004      	b.n	8001994 <HAL_GPIO_Init+0x204>
 800198a:	2302      	movs	r3, #2
 800198c:	e002      	b.n	8001994 <HAL_GPIO_Init+0x204>
 800198e:	2301      	movs	r3, #1
 8001990:	e000      	b.n	8001994 <HAL_GPIO_Init+0x204>
 8001992:	2300      	movs	r3, #0
 8001994:	69fa      	ldr	r2, [r7, #28]
 8001996:	f002 0203 	and.w	r2, r2, #3
 800199a:	0092      	lsls	r2, r2, #2
 800199c:	4093      	lsls	r3, r2
 800199e:	69ba      	ldr	r2, [r7, #24]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019a4:	4934      	ldr	r1, [pc, #208]	; (8001a78 <HAL_GPIO_Init+0x2e8>)
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	089b      	lsrs	r3, r3, #2
 80019aa:	3302      	adds	r3, #2
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019b2:	4b37      	ldr	r3, [pc, #220]	; (8001a90 <HAL_GPIO_Init+0x300>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	43db      	mvns	r3, r3
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	4013      	ands	r3, r2
 80019c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d003      	beq.n	80019d6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019d6:	4a2e      	ldr	r2, [pc, #184]	; (8001a90 <HAL_GPIO_Init+0x300>)
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80019dc:	4b2c      	ldr	r3, [pc, #176]	; (8001a90 <HAL_GPIO_Init+0x300>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	43db      	mvns	r3, r3
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	4013      	ands	r3, r2
 80019ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d003      	beq.n	8001a00 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a00:	4a23      	ldr	r2, [pc, #140]	; (8001a90 <HAL_GPIO_Init+0x300>)
 8001a02:	69bb      	ldr	r3, [r7, #24]
 8001a04:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a06:	4b22      	ldr	r3, [pc, #136]	; (8001a90 <HAL_GPIO_Init+0x300>)
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	43db      	mvns	r3, r3
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	4013      	ands	r3, r2
 8001a14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d003      	beq.n	8001a2a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a22:	69ba      	ldr	r2, [r7, #24]
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a2a:	4a19      	ldr	r2, [pc, #100]	; (8001a90 <HAL_GPIO_Init+0x300>)
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a30:	4b17      	ldr	r3, [pc, #92]	; (8001a90 <HAL_GPIO_Init+0x300>)
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d003      	beq.n	8001a54 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a54:	4a0e      	ldr	r2, [pc, #56]	; (8001a90 <HAL_GPIO_Init+0x300>)
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	61fb      	str	r3, [r7, #28]
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	2b0f      	cmp	r3, #15
 8001a64:	f67f aea2 	bls.w	80017ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a68:	bf00      	nop
 8001a6a:	3724      	adds	r7, #36	; 0x24
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr
 8001a74:	40023800 	.word	0x40023800
 8001a78:	40013800 	.word	0x40013800
 8001a7c:	40020000 	.word	0x40020000
 8001a80:	40020400 	.word	0x40020400
 8001a84:	40020800 	.word	0x40020800
 8001a88:	40020c00 	.word	0x40020c00
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	40013c00 	.word	0x40013c00

08001a94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	807b      	strh	r3, [r7, #2]
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001aa4:	787b      	ldrb	r3, [r7, #1]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d003      	beq.n	8001ab2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001aaa:	887a      	ldrh	r2, [r7, #2]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ab0:	e003      	b.n	8001aba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ab2:	887b      	ldrh	r3, [r7, #2]
 8001ab4:	041a      	lsls	r2, r3, #16
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	619a      	str	r2, [r3, #24]
}
 8001aba:	bf00      	nop
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
	...

08001ac8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d101      	bne.n	8001ada <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e25b      	b.n	8001f92 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d075      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ae6:	4ba3      	ldr	r3, [pc, #652]	; (8001d74 <HAL_RCC_OscConfig+0x2ac>)
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f003 030c 	and.w	r3, r3, #12
 8001aee:	2b04      	cmp	r3, #4
 8001af0:	d00c      	beq.n	8001b0c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001af2:	4ba0      	ldr	r3, [pc, #640]	; (8001d74 <HAL_RCC_OscConfig+0x2ac>)
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001afa:	2b08      	cmp	r3, #8
 8001afc:	d112      	bne.n	8001b24 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001afe:	4b9d      	ldr	r3, [pc, #628]	; (8001d74 <HAL_RCC_OscConfig+0x2ac>)
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b0a:	d10b      	bne.n	8001b24 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b0c:	4b99      	ldr	r3, [pc, #612]	; (8001d74 <HAL_RCC_OscConfig+0x2ac>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d05b      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x108>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d157      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e236      	b.n	8001f92 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b2c:	d106      	bne.n	8001b3c <HAL_RCC_OscConfig+0x74>
 8001b2e:	4b91      	ldr	r3, [pc, #580]	; (8001d74 <HAL_RCC_OscConfig+0x2ac>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a90      	ldr	r2, [pc, #576]	; (8001d74 <HAL_RCC_OscConfig+0x2ac>)
 8001b34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b38:	6013      	str	r3, [r2, #0]
 8001b3a:	e01d      	b.n	8001b78 <HAL_RCC_OscConfig+0xb0>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b44:	d10c      	bne.n	8001b60 <HAL_RCC_OscConfig+0x98>
 8001b46:	4b8b      	ldr	r3, [pc, #556]	; (8001d74 <HAL_RCC_OscConfig+0x2ac>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a8a      	ldr	r2, [pc, #552]	; (8001d74 <HAL_RCC_OscConfig+0x2ac>)
 8001b4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b50:	6013      	str	r3, [r2, #0]
 8001b52:	4b88      	ldr	r3, [pc, #544]	; (8001d74 <HAL_RCC_OscConfig+0x2ac>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a87      	ldr	r2, [pc, #540]	; (8001d74 <HAL_RCC_OscConfig+0x2ac>)
 8001b58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b5c:	6013      	str	r3, [r2, #0]
 8001b5e:	e00b      	b.n	8001b78 <HAL_RCC_OscConfig+0xb0>
 8001b60:	4b84      	ldr	r3, [pc, #528]	; (8001d74 <HAL_RCC_OscConfig+0x2ac>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a83      	ldr	r2, [pc, #524]	; (8001d74 <HAL_RCC_OscConfig+0x2ac>)
 8001b66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b6a:	6013      	str	r3, [r2, #0]
 8001b6c:	4b81      	ldr	r3, [pc, #516]	; (8001d74 <HAL_RCC_OscConfig+0x2ac>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a80      	ldr	r2, [pc, #512]	; (8001d74 <HAL_RCC_OscConfig+0x2ac>)
 8001b72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d013      	beq.n	8001ba8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b80:	f7ff f958 	bl	8000e34 <HAL_GetTick>
 8001b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b88:	f7ff f954 	bl	8000e34 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b64      	cmp	r3, #100	; 0x64
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e1fb      	b.n	8001f92 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b9a:	4b76      	ldr	r3, [pc, #472]	; (8001d74 <HAL_RCC_OscConfig+0x2ac>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d0f0      	beq.n	8001b88 <HAL_RCC_OscConfig+0xc0>
 8001ba6:	e014      	b.n	8001bd2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba8:	f7ff f944 	bl	8000e34 <HAL_GetTick>
 8001bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bae:	e008      	b.n	8001bc2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bb0:	f7ff f940 	bl	8000e34 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	2b64      	cmp	r3, #100	; 0x64
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e1e7      	b.n	8001f92 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bc2:	4b6c      	ldr	r3, [pc, #432]	; (8001d74 <HAL_RCC_OscConfig+0x2ac>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d1f0      	bne.n	8001bb0 <HAL_RCC_OscConfig+0xe8>
 8001bce:	e000      	b.n	8001bd2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d063      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001bde:	4b65      	ldr	r3, [pc, #404]	; (8001d74 <HAL_RCC_OscConfig+0x2ac>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f003 030c 	and.w	r3, r3, #12
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d00b      	beq.n	8001c02 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bea:	4b62      	ldr	r3, [pc, #392]	; (8001d74 <HAL_RCC_OscConfig+0x2ac>)
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001bf2:	2b08      	cmp	r3, #8
 8001bf4:	d11c      	bne.n	8001c30 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bf6:	4b5f      	ldr	r3, [pc, #380]	; (8001d74 <HAL_RCC_OscConfig+0x2ac>)
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d116      	bne.n	8001c30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c02:	4b5c      	ldr	r3, [pc, #368]	; (8001d74 <HAL_RCC_OscConfig+0x2ac>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d005      	beq.n	8001c1a <HAL_RCC_OscConfig+0x152>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	68db      	ldr	r3, [r3, #12]
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d001      	beq.n	8001c1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e1bb      	b.n	8001f92 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c1a:	4b56      	ldr	r3, [pc, #344]	; (8001d74 <HAL_RCC_OscConfig+0x2ac>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	691b      	ldr	r3, [r3, #16]
 8001c26:	00db      	lsls	r3, r3, #3
 8001c28:	4952      	ldr	r1, [pc, #328]	; (8001d74 <HAL_RCC_OscConfig+0x2ac>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c2e:	e03a      	b.n	8001ca6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d020      	beq.n	8001c7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c38:	4b4f      	ldr	r3, [pc, #316]	; (8001d78 <HAL_RCC_OscConfig+0x2b0>)
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c3e:	f7ff f8f9 	bl	8000e34 <HAL_GetTick>
 8001c42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c44:	e008      	b.n	8001c58 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c46:	f7ff f8f5 	bl	8000e34 <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d901      	bls.n	8001c58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	e19c      	b.n	8001f92 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c58:	4b46      	ldr	r3, [pc, #280]	; (8001d74 <HAL_RCC_OscConfig+0x2ac>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0302 	and.w	r3, r3, #2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d0f0      	beq.n	8001c46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c64:	4b43      	ldr	r3, [pc, #268]	; (8001d74 <HAL_RCC_OscConfig+0x2ac>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	691b      	ldr	r3, [r3, #16]
 8001c70:	00db      	lsls	r3, r3, #3
 8001c72:	4940      	ldr	r1, [pc, #256]	; (8001d74 <HAL_RCC_OscConfig+0x2ac>)
 8001c74:	4313      	orrs	r3, r2
 8001c76:	600b      	str	r3, [r1, #0]
 8001c78:	e015      	b.n	8001ca6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c7a:	4b3f      	ldr	r3, [pc, #252]	; (8001d78 <HAL_RCC_OscConfig+0x2b0>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c80:	f7ff f8d8 	bl	8000e34 <HAL_GetTick>
 8001c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c86:	e008      	b.n	8001c9a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c88:	f7ff f8d4 	bl	8000e34 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e17b      	b.n	8001f92 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c9a:	4b36      	ldr	r3, [pc, #216]	; (8001d74 <HAL_RCC_OscConfig+0x2ac>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d1f0      	bne.n	8001c88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0308 	and.w	r3, r3, #8
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d030      	beq.n	8001d14 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	695b      	ldr	r3, [r3, #20]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d016      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cba:	4b30      	ldr	r3, [pc, #192]	; (8001d7c <HAL_RCC_OscConfig+0x2b4>)
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cc0:	f7ff f8b8 	bl	8000e34 <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cc6:	e008      	b.n	8001cda <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cc8:	f7ff f8b4 	bl	8000e34 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e15b      	b.n	8001f92 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cda:	4b26      	ldr	r3, [pc, #152]	; (8001d74 <HAL_RCC_OscConfig+0x2ac>)
 8001cdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d0f0      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x200>
 8001ce6:	e015      	b.n	8001d14 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ce8:	4b24      	ldr	r3, [pc, #144]	; (8001d7c <HAL_RCC_OscConfig+0x2b4>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cee:	f7ff f8a1 	bl	8000e34 <HAL_GetTick>
 8001cf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cf4:	e008      	b.n	8001d08 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cf6:	f7ff f89d 	bl	8000e34 <HAL_GetTick>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d901      	bls.n	8001d08 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e144      	b.n	8001f92 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d08:	4b1a      	ldr	r3, [pc, #104]	; (8001d74 <HAL_RCC_OscConfig+0x2ac>)
 8001d0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d0c:	f003 0302 	and.w	r3, r3, #2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d1f0      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0304 	and.w	r3, r3, #4
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	f000 80a0 	beq.w	8001e62 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d22:	2300      	movs	r3, #0
 8001d24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d26:	4b13      	ldr	r3, [pc, #76]	; (8001d74 <HAL_RCC_OscConfig+0x2ac>)
 8001d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d10f      	bne.n	8001d52 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d32:	2300      	movs	r3, #0
 8001d34:	60bb      	str	r3, [r7, #8]
 8001d36:	4b0f      	ldr	r3, [pc, #60]	; (8001d74 <HAL_RCC_OscConfig+0x2ac>)
 8001d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3a:	4a0e      	ldr	r2, [pc, #56]	; (8001d74 <HAL_RCC_OscConfig+0x2ac>)
 8001d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d40:	6413      	str	r3, [r2, #64]	; 0x40
 8001d42:	4b0c      	ldr	r3, [pc, #48]	; (8001d74 <HAL_RCC_OscConfig+0x2ac>)
 8001d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d4a:	60bb      	str	r3, [r7, #8]
 8001d4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d52:	4b0b      	ldr	r3, [pc, #44]	; (8001d80 <HAL_RCC_OscConfig+0x2b8>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d121      	bne.n	8001da2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d5e:	4b08      	ldr	r3, [pc, #32]	; (8001d80 <HAL_RCC_OscConfig+0x2b8>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a07      	ldr	r2, [pc, #28]	; (8001d80 <HAL_RCC_OscConfig+0x2b8>)
 8001d64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d6a:	f7ff f863 	bl	8000e34 <HAL_GetTick>
 8001d6e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d70:	e011      	b.n	8001d96 <HAL_RCC_OscConfig+0x2ce>
 8001d72:	bf00      	nop
 8001d74:	40023800 	.word	0x40023800
 8001d78:	42470000 	.word	0x42470000
 8001d7c:	42470e80 	.word	0x42470e80
 8001d80:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d84:	f7ff f856 	bl	8000e34 <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e0fd      	b.n	8001f92 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d96:	4b81      	ldr	r3, [pc, #516]	; (8001f9c <HAL_RCC_OscConfig+0x4d4>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d0f0      	beq.n	8001d84 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d106      	bne.n	8001db8 <HAL_RCC_OscConfig+0x2f0>
 8001daa:	4b7d      	ldr	r3, [pc, #500]	; (8001fa0 <HAL_RCC_OscConfig+0x4d8>)
 8001dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dae:	4a7c      	ldr	r2, [pc, #496]	; (8001fa0 <HAL_RCC_OscConfig+0x4d8>)
 8001db0:	f043 0301 	orr.w	r3, r3, #1
 8001db4:	6713      	str	r3, [r2, #112]	; 0x70
 8001db6:	e01c      	b.n	8001df2 <HAL_RCC_OscConfig+0x32a>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	2b05      	cmp	r3, #5
 8001dbe:	d10c      	bne.n	8001dda <HAL_RCC_OscConfig+0x312>
 8001dc0:	4b77      	ldr	r3, [pc, #476]	; (8001fa0 <HAL_RCC_OscConfig+0x4d8>)
 8001dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dc4:	4a76      	ldr	r2, [pc, #472]	; (8001fa0 <HAL_RCC_OscConfig+0x4d8>)
 8001dc6:	f043 0304 	orr.w	r3, r3, #4
 8001dca:	6713      	str	r3, [r2, #112]	; 0x70
 8001dcc:	4b74      	ldr	r3, [pc, #464]	; (8001fa0 <HAL_RCC_OscConfig+0x4d8>)
 8001dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dd0:	4a73      	ldr	r2, [pc, #460]	; (8001fa0 <HAL_RCC_OscConfig+0x4d8>)
 8001dd2:	f043 0301 	orr.w	r3, r3, #1
 8001dd6:	6713      	str	r3, [r2, #112]	; 0x70
 8001dd8:	e00b      	b.n	8001df2 <HAL_RCC_OscConfig+0x32a>
 8001dda:	4b71      	ldr	r3, [pc, #452]	; (8001fa0 <HAL_RCC_OscConfig+0x4d8>)
 8001ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dde:	4a70      	ldr	r2, [pc, #448]	; (8001fa0 <HAL_RCC_OscConfig+0x4d8>)
 8001de0:	f023 0301 	bic.w	r3, r3, #1
 8001de4:	6713      	str	r3, [r2, #112]	; 0x70
 8001de6:	4b6e      	ldr	r3, [pc, #440]	; (8001fa0 <HAL_RCC_OscConfig+0x4d8>)
 8001de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dea:	4a6d      	ldr	r2, [pc, #436]	; (8001fa0 <HAL_RCC_OscConfig+0x4d8>)
 8001dec:	f023 0304 	bic.w	r3, r3, #4
 8001df0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d015      	beq.n	8001e26 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dfa:	f7ff f81b 	bl	8000e34 <HAL_GetTick>
 8001dfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e00:	e00a      	b.n	8001e18 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e02:	f7ff f817 	bl	8000e34 <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d901      	bls.n	8001e18 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	e0bc      	b.n	8001f92 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e18:	4b61      	ldr	r3, [pc, #388]	; (8001fa0 <HAL_RCC_OscConfig+0x4d8>)
 8001e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e1c:	f003 0302 	and.w	r3, r3, #2
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d0ee      	beq.n	8001e02 <HAL_RCC_OscConfig+0x33a>
 8001e24:	e014      	b.n	8001e50 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e26:	f7ff f805 	bl	8000e34 <HAL_GetTick>
 8001e2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e2c:	e00a      	b.n	8001e44 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e2e:	f7ff f801 	bl	8000e34 <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d901      	bls.n	8001e44 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e0a6      	b.n	8001f92 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e44:	4b56      	ldr	r3, [pc, #344]	; (8001fa0 <HAL_RCC_OscConfig+0x4d8>)
 8001e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e48:	f003 0302 	and.w	r3, r3, #2
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d1ee      	bne.n	8001e2e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e50:	7dfb      	ldrb	r3, [r7, #23]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d105      	bne.n	8001e62 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e56:	4b52      	ldr	r3, [pc, #328]	; (8001fa0 <HAL_RCC_OscConfig+0x4d8>)
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	4a51      	ldr	r2, [pc, #324]	; (8001fa0 <HAL_RCC_OscConfig+0x4d8>)
 8001e5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e60:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	699b      	ldr	r3, [r3, #24]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	f000 8092 	beq.w	8001f90 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e6c:	4b4c      	ldr	r3, [pc, #304]	; (8001fa0 <HAL_RCC_OscConfig+0x4d8>)
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f003 030c 	and.w	r3, r3, #12
 8001e74:	2b08      	cmp	r3, #8
 8001e76:	d05c      	beq.n	8001f32 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d141      	bne.n	8001f04 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e80:	4b48      	ldr	r3, [pc, #288]	; (8001fa4 <HAL_RCC_OscConfig+0x4dc>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e86:	f7fe ffd5 	bl	8000e34 <HAL_GetTick>
 8001e8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e8c:	e008      	b.n	8001ea0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e8e:	f7fe ffd1 	bl	8000e34 <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d901      	bls.n	8001ea0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e078      	b.n	8001f92 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ea0:	4b3f      	ldr	r3, [pc, #252]	; (8001fa0 <HAL_RCC_OscConfig+0x4d8>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d1f0      	bne.n	8001e8e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	69da      	ldr	r2, [r3, #28]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a1b      	ldr	r3, [r3, #32]
 8001eb4:	431a      	orrs	r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eba:	019b      	lsls	r3, r3, #6
 8001ebc:	431a      	orrs	r2, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec2:	085b      	lsrs	r3, r3, #1
 8001ec4:	3b01      	subs	r3, #1
 8001ec6:	041b      	lsls	r3, r3, #16
 8001ec8:	431a      	orrs	r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ece:	061b      	lsls	r3, r3, #24
 8001ed0:	4933      	ldr	r1, [pc, #204]	; (8001fa0 <HAL_RCC_OscConfig+0x4d8>)
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ed6:	4b33      	ldr	r3, [pc, #204]	; (8001fa4 <HAL_RCC_OscConfig+0x4dc>)
 8001ed8:	2201      	movs	r2, #1
 8001eda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001edc:	f7fe ffaa 	bl	8000e34 <HAL_GetTick>
 8001ee0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ee4:	f7fe ffa6 	bl	8000e34 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e04d      	b.n	8001f92 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ef6:	4b2a      	ldr	r3, [pc, #168]	; (8001fa0 <HAL_RCC_OscConfig+0x4d8>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d0f0      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x41c>
 8001f02:	e045      	b.n	8001f90 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f04:	4b27      	ldr	r3, [pc, #156]	; (8001fa4 <HAL_RCC_OscConfig+0x4dc>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f0a:	f7fe ff93 	bl	8000e34 <HAL_GetTick>
 8001f0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f10:	e008      	b.n	8001f24 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f12:	f7fe ff8f 	bl	8000e34 <HAL_GetTick>
 8001f16:	4602      	mov	r2, r0
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d901      	bls.n	8001f24 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	e036      	b.n	8001f92 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f24:	4b1e      	ldr	r3, [pc, #120]	; (8001fa0 <HAL_RCC_OscConfig+0x4d8>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d1f0      	bne.n	8001f12 <HAL_RCC_OscConfig+0x44a>
 8001f30:	e02e      	b.n	8001f90 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	699b      	ldr	r3, [r3, #24]
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d101      	bne.n	8001f3e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e029      	b.n	8001f92 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f3e:	4b18      	ldr	r3, [pc, #96]	; (8001fa0 <HAL_RCC_OscConfig+0x4d8>)
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	69db      	ldr	r3, [r3, #28]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d11c      	bne.n	8001f8c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d115      	bne.n	8001f8c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f66:	4013      	ands	r3, r2
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d10d      	bne.n	8001f8c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d106      	bne.n	8001f8c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d001      	beq.n	8001f90 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e000      	b.n	8001f92 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3718      	adds	r7, #24
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	40007000 	.word	0x40007000
 8001fa0:	40023800 	.word	0x40023800
 8001fa4:	42470060 	.word	0x42470060

08001fa8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d101      	bne.n	8001fbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e0cc      	b.n	8002156 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fbc:	4b68      	ldr	r3, [pc, #416]	; (8002160 <HAL_RCC_ClockConfig+0x1b8>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 030f 	and.w	r3, r3, #15
 8001fc4:	683a      	ldr	r2, [r7, #0]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d90c      	bls.n	8001fe4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fca:	4b65      	ldr	r3, [pc, #404]	; (8002160 <HAL_RCC_ClockConfig+0x1b8>)
 8001fcc:	683a      	ldr	r2, [r7, #0]
 8001fce:	b2d2      	uxtb	r2, r2
 8001fd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fd2:	4b63      	ldr	r3, [pc, #396]	; (8002160 <HAL_RCC_ClockConfig+0x1b8>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 030f 	and.w	r3, r3, #15
 8001fda:	683a      	ldr	r2, [r7, #0]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d001      	beq.n	8001fe4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e0b8      	b.n	8002156 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0302 	and.w	r3, r3, #2
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d020      	beq.n	8002032 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0304 	and.w	r3, r3, #4
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d005      	beq.n	8002008 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ffc:	4b59      	ldr	r3, [pc, #356]	; (8002164 <HAL_RCC_ClockConfig+0x1bc>)
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	4a58      	ldr	r2, [pc, #352]	; (8002164 <HAL_RCC_ClockConfig+0x1bc>)
 8002002:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002006:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0308 	and.w	r3, r3, #8
 8002010:	2b00      	cmp	r3, #0
 8002012:	d005      	beq.n	8002020 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002014:	4b53      	ldr	r3, [pc, #332]	; (8002164 <HAL_RCC_ClockConfig+0x1bc>)
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	4a52      	ldr	r2, [pc, #328]	; (8002164 <HAL_RCC_ClockConfig+0x1bc>)
 800201a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800201e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002020:	4b50      	ldr	r3, [pc, #320]	; (8002164 <HAL_RCC_ClockConfig+0x1bc>)
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	494d      	ldr	r1, [pc, #308]	; (8002164 <HAL_RCC_ClockConfig+0x1bc>)
 800202e:	4313      	orrs	r3, r2
 8002030:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	2b00      	cmp	r3, #0
 800203c:	d044      	beq.n	80020c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	2b01      	cmp	r3, #1
 8002044:	d107      	bne.n	8002056 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002046:	4b47      	ldr	r3, [pc, #284]	; (8002164 <HAL_RCC_ClockConfig+0x1bc>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d119      	bne.n	8002086 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e07f      	b.n	8002156 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	2b02      	cmp	r3, #2
 800205c:	d003      	beq.n	8002066 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002062:	2b03      	cmp	r3, #3
 8002064:	d107      	bne.n	8002076 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002066:	4b3f      	ldr	r3, [pc, #252]	; (8002164 <HAL_RCC_ClockConfig+0x1bc>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d109      	bne.n	8002086 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e06f      	b.n	8002156 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002076:	4b3b      	ldr	r3, [pc, #236]	; (8002164 <HAL_RCC_ClockConfig+0x1bc>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d101      	bne.n	8002086 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e067      	b.n	8002156 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002086:	4b37      	ldr	r3, [pc, #220]	; (8002164 <HAL_RCC_ClockConfig+0x1bc>)
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	f023 0203 	bic.w	r2, r3, #3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	4934      	ldr	r1, [pc, #208]	; (8002164 <HAL_RCC_ClockConfig+0x1bc>)
 8002094:	4313      	orrs	r3, r2
 8002096:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002098:	f7fe fecc 	bl	8000e34 <HAL_GetTick>
 800209c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800209e:	e00a      	b.n	80020b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020a0:	f7fe fec8 	bl	8000e34 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e04f      	b.n	8002156 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020b6:	4b2b      	ldr	r3, [pc, #172]	; (8002164 <HAL_RCC_ClockConfig+0x1bc>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f003 020c 	and.w	r2, r3, #12
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d1eb      	bne.n	80020a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020c8:	4b25      	ldr	r3, [pc, #148]	; (8002160 <HAL_RCC_ClockConfig+0x1b8>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 030f 	and.w	r3, r3, #15
 80020d0:	683a      	ldr	r2, [r7, #0]
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d20c      	bcs.n	80020f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020d6:	4b22      	ldr	r3, [pc, #136]	; (8002160 <HAL_RCC_ClockConfig+0x1b8>)
 80020d8:	683a      	ldr	r2, [r7, #0]
 80020da:	b2d2      	uxtb	r2, r2
 80020dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020de:	4b20      	ldr	r3, [pc, #128]	; (8002160 <HAL_RCC_ClockConfig+0x1b8>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 030f 	and.w	r3, r3, #15
 80020e6:	683a      	ldr	r2, [r7, #0]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d001      	beq.n	80020f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e032      	b.n	8002156 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0304 	and.w	r3, r3, #4
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d008      	beq.n	800210e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020fc:	4b19      	ldr	r3, [pc, #100]	; (8002164 <HAL_RCC_ClockConfig+0x1bc>)
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	4916      	ldr	r1, [pc, #88]	; (8002164 <HAL_RCC_ClockConfig+0x1bc>)
 800210a:	4313      	orrs	r3, r2
 800210c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0308 	and.w	r3, r3, #8
 8002116:	2b00      	cmp	r3, #0
 8002118:	d009      	beq.n	800212e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800211a:	4b12      	ldr	r3, [pc, #72]	; (8002164 <HAL_RCC_ClockConfig+0x1bc>)
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	00db      	lsls	r3, r3, #3
 8002128:	490e      	ldr	r1, [pc, #56]	; (8002164 <HAL_RCC_ClockConfig+0x1bc>)
 800212a:	4313      	orrs	r3, r2
 800212c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800212e:	f000 f821 	bl	8002174 <HAL_RCC_GetSysClockFreq>
 8002132:	4601      	mov	r1, r0
 8002134:	4b0b      	ldr	r3, [pc, #44]	; (8002164 <HAL_RCC_ClockConfig+0x1bc>)
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	091b      	lsrs	r3, r3, #4
 800213a:	f003 030f 	and.w	r3, r3, #15
 800213e:	4a0a      	ldr	r2, [pc, #40]	; (8002168 <HAL_RCC_ClockConfig+0x1c0>)
 8002140:	5cd3      	ldrb	r3, [r2, r3]
 8002142:	fa21 f303 	lsr.w	r3, r1, r3
 8002146:	4a09      	ldr	r2, [pc, #36]	; (800216c <HAL_RCC_ClockConfig+0x1c4>)
 8002148:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800214a:	4b09      	ldr	r3, [pc, #36]	; (8002170 <HAL_RCC_ClockConfig+0x1c8>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4618      	mov	r0, r3
 8002150:	f7fe fe2c 	bl	8000dac <HAL_InitTick>

  return HAL_OK;
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	3710      	adds	r7, #16
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	40023c00 	.word	0x40023c00
 8002164:	40023800 	.word	0x40023800
 8002168:	08004748 	.word	0x08004748
 800216c:	20000000 	.word	0x20000000
 8002170:	20000004 	.word	0x20000004

08002174 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002174:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800217a:	2300      	movs	r3, #0
 800217c:	607b      	str	r3, [r7, #4]
 800217e:	2300      	movs	r3, #0
 8002180:	60fb      	str	r3, [r7, #12]
 8002182:	2300      	movs	r3, #0
 8002184:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002186:	2300      	movs	r3, #0
 8002188:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800218a:	4b50      	ldr	r3, [pc, #320]	; (80022cc <HAL_RCC_GetSysClockFreq+0x158>)
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	f003 030c 	and.w	r3, r3, #12
 8002192:	2b04      	cmp	r3, #4
 8002194:	d007      	beq.n	80021a6 <HAL_RCC_GetSysClockFreq+0x32>
 8002196:	2b08      	cmp	r3, #8
 8002198:	d008      	beq.n	80021ac <HAL_RCC_GetSysClockFreq+0x38>
 800219a:	2b00      	cmp	r3, #0
 800219c:	f040 808d 	bne.w	80022ba <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021a0:	4b4b      	ldr	r3, [pc, #300]	; (80022d0 <HAL_RCC_GetSysClockFreq+0x15c>)
 80021a2:	60bb      	str	r3, [r7, #8]
       break;
 80021a4:	e08c      	b.n	80022c0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021a6:	4b4b      	ldr	r3, [pc, #300]	; (80022d4 <HAL_RCC_GetSysClockFreq+0x160>)
 80021a8:	60bb      	str	r3, [r7, #8]
      break;
 80021aa:	e089      	b.n	80022c0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021ac:	4b47      	ldr	r3, [pc, #284]	; (80022cc <HAL_RCC_GetSysClockFreq+0x158>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021b4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021b6:	4b45      	ldr	r3, [pc, #276]	; (80022cc <HAL_RCC_GetSysClockFreq+0x158>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d023      	beq.n	800220a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021c2:	4b42      	ldr	r3, [pc, #264]	; (80022cc <HAL_RCC_GetSysClockFreq+0x158>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	099b      	lsrs	r3, r3, #6
 80021c8:	f04f 0400 	mov.w	r4, #0
 80021cc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80021d0:	f04f 0200 	mov.w	r2, #0
 80021d4:	ea03 0501 	and.w	r5, r3, r1
 80021d8:	ea04 0602 	and.w	r6, r4, r2
 80021dc:	4a3d      	ldr	r2, [pc, #244]	; (80022d4 <HAL_RCC_GetSysClockFreq+0x160>)
 80021de:	fb02 f106 	mul.w	r1, r2, r6
 80021e2:	2200      	movs	r2, #0
 80021e4:	fb02 f205 	mul.w	r2, r2, r5
 80021e8:	440a      	add	r2, r1
 80021ea:	493a      	ldr	r1, [pc, #232]	; (80022d4 <HAL_RCC_GetSysClockFreq+0x160>)
 80021ec:	fba5 0101 	umull	r0, r1, r5, r1
 80021f0:	1853      	adds	r3, r2, r1
 80021f2:	4619      	mov	r1, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f04f 0400 	mov.w	r4, #0
 80021fa:	461a      	mov	r2, r3
 80021fc:	4623      	mov	r3, r4
 80021fe:	f7fd ffeb 	bl	80001d8 <__aeabi_uldivmod>
 8002202:	4603      	mov	r3, r0
 8002204:	460c      	mov	r4, r1
 8002206:	60fb      	str	r3, [r7, #12]
 8002208:	e049      	b.n	800229e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800220a:	4b30      	ldr	r3, [pc, #192]	; (80022cc <HAL_RCC_GetSysClockFreq+0x158>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	099b      	lsrs	r3, r3, #6
 8002210:	f04f 0400 	mov.w	r4, #0
 8002214:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002218:	f04f 0200 	mov.w	r2, #0
 800221c:	ea03 0501 	and.w	r5, r3, r1
 8002220:	ea04 0602 	and.w	r6, r4, r2
 8002224:	4629      	mov	r1, r5
 8002226:	4632      	mov	r2, r6
 8002228:	f04f 0300 	mov.w	r3, #0
 800222c:	f04f 0400 	mov.w	r4, #0
 8002230:	0154      	lsls	r4, r2, #5
 8002232:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002236:	014b      	lsls	r3, r1, #5
 8002238:	4619      	mov	r1, r3
 800223a:	4622      	mov	r2, r4
 800223c:	1b49      	subs	r1, r1, r5
 800223e:	eb62 0206 	sbc.w	r2, r2, r6
 8002242:	f04f 0300 	mov.w	r3, #0
 8002246:	f04f 0400 	mov.w	r4, #0
 800224a:	0194      	lsls	r4, r2, #6
 800224c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002250:	018b      	lsls	r3, r1, #6
 8002252:	1a5b      	subs	r3, r3, r1
 8002254:	eb64 0402 	sbc.w	r4, r4, r2
 8002258:	f04f 0100 	mov.w	r1, #0
 800225c:	f04f 0200 	mov.w	r2, #0
 8002260:	00e2      	lsls	r2, r4, #3
 8002262:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002266:	00d9      	lsls	r1, r3, #3
 8002268:	460b      	mov	r3, r1
 800226a:	4614      	mov	r4, r2
 800226c:	195b      	adds	r3, r3, r5
 800226e:	eb44 0406 	adc.w	r4, r4, r6
 8002272:	f04f 0100 	mov.w	r1, #0
 8002276:	f04f 0200 	mov.w	r2, #0
 800227a:	02a2      	lsls	r2, r4, #10
 800227c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002280:	0299      	lsls	r1, r3, #10
 8002282:	460b      	mov	r3, r1
 8002284:	4614      	mov	r4, r2
 8002286:	4618      	mov	r0, r3
 8002288:	4621      	mov	r1, r4
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f04f 0400 	mov.w	r4, #0
 8002290:	461a      	mov	r2, r3
 8002292:	4623      	mov	r3, r4
 8002294:	f7fd ffa0 	bl	80001d8 <__aeabi_uldivmod>
 8002298:	4603      	mov	r3, r0
 800229a:	460c      	mov	r4, r1
 800229c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800229e:	4b0b      	ldr	r3, [pc, #44]	; (80022cc <HAL_RCC_GetSysClockFreq+0x158>)
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	0c1b      	lsrs	r3, r3, #16
 80022a4:	f003 0303 	and.w	r3, r3, #3
 80022a8:	3301      	adds	r3, #1
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80022ae:	68fa      	ldr	r2, [r7, #12]
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022b6:	60bb      	str	r3, [r7, #8]
      break;
 80022b8:	e002      	b.n	80022c0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022ba:	4b05      	ldr	r3, [pc, #20]	; (80022d0 <HAL_RCC_GetSysClockFreq+0x15c>)
 80022bc:	60bb      	str	r3, [r7, #8]
      break;
 80022be:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022c0:	68bb      	ldr	r3, [r7, #8]
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3714      	adds	r7, #20
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022ca:	bf00      	nop
 80022cc:	40023800 	.word	0x40023800
 80022d0:	00f42400 	.word	0x00f42400
 80022d4:	017d7840 	.word	0x017d7840

080022d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022dc:	4b03      	ldr	r3, [pc, #12]	; (80022ec <HAL_RCC_GetHCLKFreq+0x14>)
 80022de:	681b      	ldr	r3, [r3, #0]
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	20000000 	.word	0x20000000

080022f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80022f4:	f7ff fff0 	bl	80022d8 <HAL_RCC_GetHCLKFreq>
 80022f8:	4601      	mov	r1, r0
 80022fa:	4b05      	ldr	r3, [pc, #20]	; (8002310 <HAL_RCC_GetPCLK1Freq+0x20>)
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	0a9b      	lsrs	r3, r3, #10
 8002300:	f003 0307 	and.w	r3, r3, #7
 8002304:	4a03      	ldr	r2, [pc, #12]	; (8002314 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002306:	5cd3      	ldrb	r3, [r2, r3]
 8002308:	fa21 f303 	lsr.w	r3, r1, r3
}
 800230c:	4618      	mov	r0, r3
 800230e:	bd80      	pop	{r7, pc}
 8002310:	40023800 	.word	0x40023800
 8002314:	08004758 	.word	0x08004758

08002318 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800231c:	f7ff ffdc 	bl	80022d8 <HAL_RCC_GetHCLKFreq>
 8002320:	4601      	mov	r1, r0
 8002322:	4b05      	ldr	r3, [pc, #20]	; (8002338 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	0b5b      	lsrs	r3, r3, #13
 8002328:	f003 0307 	and.w	r3, r3, #7
 800232c:	4a03      	ldr	r2, [pc, #12]	; (800233c <HAL_RCC_GetPCLK2Freq+0x24>)
 800232e:	5cd3      	ldrb	r3, [r2, r3]
 8002330:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002334:	4618      	mov	r0, r3
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40023800 	.word	0x40023800
 800233c:	08004758 	.word	0x08004758

08002340 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d101      	bne.n	8002352 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e056      	b.n	8002400 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800235e:	b2db      	uxtb	r3, r3
 8002360:	2b00      	cmp	r3, #0
 8002362:	d106      	bne.n	8002372 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f7fe faef 	bl	8000950 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2202      	movs	r2, #2
 8002376:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002388:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685a      	ldr	r2, [r3, #4]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	431a      	orrs	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	431a      	orrs	r2, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	431a      	orrs	r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	695b      	ldr	r3, [r3, #20]
 80023a4:	431a      	orrs	r2, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	699b      	ldr	r3, [r3, #24]
 80023aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023ae:	431a      	orrs	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	69db      	ldr	r3, [r3, #28]
 80023b4:	431a      	orrs	r2, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6a1b      	ldr	r3, [r3, #32]
 80023ba:	ea42 0103 	orr.w	r1, r2, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	430a      	orrs	r2, r1
 80023c8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	0c1b      	lsrs	r3, r3, #16
 80023d0:	f003 0104 	and.w	r1, r3, #4
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	430a      	orrs	r2, r1
 80023de:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	69da      	ldr	r2, [r3, #28]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023ee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2201      	movs	r2, #1
 80023fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80023fe:	2300      	movs	r3, #0
}
 8002400:	4618      	mov	r0, r3
 8002402:	3708      	adds	r7, #8
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b086      	sub	sp, #24
 800240c:	af00      	add	r7, sp, #0
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	4613      	mov	r3, r2
 8002414:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002416:	2300      	movs	r3, #0
 8002418:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002420:	2b01      	cmp	r3, #1
 8002422:	d101      	bne.n	8002428 <HAL_SPI_Transmit_DMA+0x20>
 8002424:	2302      	movs	r3, #2
 8002426:	e093      	b.n	8002550 <HAL_SPI_Transmit_DMA+0x148>
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002436:	b2db      	uxtb	r3, r3
 8002438:	2b01      	cmp	r3, #1
 800243a:	d002      	beq.n	8002442 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800243c:	2302      	movs	r3, #2
 800243e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002440:	e081      	b.n	8002546 <HAL_SPI_Transmit_DMA+0x13e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d002      	beq.n	800244e <HAL_SPI_Transmit_DMA+0x46>
 8002448:	88fb      	ldrh	r3, [r7, #6]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d102      	bne.n	8002454 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002452:	e078      	b.n	8002546 <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2203      	movs	r2, #3
 8002458:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2200      	movs	r2, #0
 8002460:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	68ba      	ldr	r2, [r7, #8]
 8002466:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	88fa      	ldrh	r2, [r7, #6]
 800246c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	88fa      	ldrh	r2, [r7, #6]
 8002472:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2200      	movs	r2, #0
 8002478:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2200      	movs	r2, #0
 800247e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2200      	movs	r2, #0
 8002484:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2200      	movs	r2, #0
 800248a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2200      	movs	r2, #0
 8002490:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800249a:	d107      	bne.n	80024ac <HAL_SPI_Transmit_DMA+0xa4>
  {
    SPI_1LINE_TX(hspi);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024aa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024b0:	4a29      	ldr	r2, [pc, #164]	; (8002558 <HAL_SPI_Transmit_DMA+0x150>)
 80024b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024b8:	4a28      	ldr	r2, [pc, #160]	; (800255c <HAL_SPI_Transmit_DMA+0x154>)
 80024ba:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024c0:	4a27      	ldr	r2, [pc, #156]	; (8002560 <HAL_SPI_Transmit_DMA+0x158>)
 80024c2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024c8:	2200      	movs	r2, #0
 80024ca:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d4:	4619      	mov	r1, r3
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	330c      	adds	r3, #12
 80024dc:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024e2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80024e4:	f7fe fe72 	bl	80011cc <HAL_DMA_Start_IT>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d00c      	beq.n	8002508 <HAL_SPI_Transmit_DMA+0x100>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024f2:	f043 0210 	orr.w	r2, r3, #16
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2201      	movs	r2, #1
 8002502:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8002506:	e01e      	b.n	8002546 <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002512:	2b40      	cmp	r3, #64	; 0x40
 8002514:	d007      	beq.n	8002526 <HAL_SPI_Transmit_DMA+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002524:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	685a      	ldr	r2, [r3, #4]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f042 0220 	orr.w	r2, r2, #32
 8002534:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	685a      	ldr	r2, [r3, #4]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f042 0202 	orr.w	r2, r2, #2
 8002544:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2200      	movs	r2, #0
 800254a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800254e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002550:	4618      	mov	r0, r3
 8002552:	3718      	adds	r7, #24
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	08002835 	.word	0x08002835
 800255c:	0800278d 	.word	0x0800278d
 8002560:	08002851 	.word	0x08002851

08002564 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b088      	sub	sp, #32
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	099b      	lsrs	r3, r3, #6
 8002580:	f003 0301 	and.w	r3, r3, #1
 8002584:	2b00      	cmp	r3, #0
 8002586:	d10f      	bne.n	80025a8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800258e:	2b00      	cmp	r3, #0
 8002590:	d00a      	beq.n	80025a8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	099b      	lsrs	r3, r3, #6
 8002596:	f003 0301 	and.w	r3, r3, #1
 800259a:	2b00      	cmp	r3, #0
 800259c:	d004      	beq.n	80025a8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	4798      	blx	r3
    return;
 80025a6:	e0d8      	b.n	800275a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	085b      	lsrs	r3, r3, #1
 80025ac:	f003 0301 	and.w	r3, r3, #1
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d00a      	beq.n	80025ca <HAL_SPI_IRQHandler+0x66>
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	09db      	lsrs	r3, r3, #7
 80025b8:	f003 0301 	and.w	r3, r3, #1
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d004      	beq.n	80025ca <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	4798      	blx	r3
    return;
 80025c8:	e0c7      	b.n	800275a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	095b      	lsrs	r3, r3, #5
 80025ce:	f003 0301 	and.w	r3, r3, #1
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d10c      	bne.n	80025f0 <HAL_SPI_IRQHandler+0x8c>
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	099b      	lsrs	r3, r3, #6
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d106      	bne.n	80025f0 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	0a1b      	lsrs	r3, r3, #8
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	f000 80b5 	beq.w	800275a <HAL_SPI_IRQHandler+0x1f6>
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	095b      	lsrs	r3, r3, #5
 80025f4:	f003 0301 	and.w	r3, r3, #1
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	f000 80ae 	beq.w	800275a <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	099b      	lsrs	r3, r3, #6
 8002602:	f003 0301 	and.w	r3, r3, #1
 8002606:	2b00      	cmp	r3, #0
 8002608:	d023      	beq.n	8002652 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002610:	b2db      	uxtb	r3, r3
 8002612:	2b03      	cmp	r3, #3
 8002614:	d011      	beq.n	800263a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800261a:	f043 0204 	orr.w	r2, r3, #4
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002622:	2300      	movs	r3, #0
 8002624:	617b      	str	r3, [r7, #20]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	617b      	str	r3, [r7, #20]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	617b      	str	r3, [r7, #20]
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	e00b      	b.n	8002652 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800263a:	2300      	movs	r3, #0
 800263c:	613b      	str	r3, [r7, #16]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	613b      	str	r3, [r7, #16]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	613b      	str	r3, [r7, #16]
 800264e:	693b      	ldr	r3, [r7, #16]
        return;
 8002650:	e083      	b.n	800275a <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	095b      	lsrs	r3, r3, #5
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	2b00      	cmp	r3, #0
 800265c:	d014      	beq.n	8002688 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002662:	f043 0201 	orr.w	r2, r3, #1
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800266a:	2300      	movs	r3, #0
 800266c:	60fb      	str	r3, [r7, #12]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	60fb      	str	r3, [r7, #12]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002684:	601a      	str	r2, [r3, #0]
 8002686:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	0a1b      	lsrs	r3, r3, #8
 800268c:	f003 0301 	and.w	r3, r3, #1
 8002690:	2b00      	cmp	r3, #0
 8002692:	d00c      	beq.n	80026ae <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002698:	f043 0208 	orr.w	r2, r3, #8
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80026a0:	2300      	movs	r3, #0
 80026a2:	60bb      	str	r3, [r7, #8]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	60bb      	str	r3, [r7, #8]
 80026ac:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d050      	beq.n	8002758 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	685a      	ldr	r2, [r3, #4]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80026c4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2201      	movs	r2, #1
 80026ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d104      	bne.n	80026e2 <HAL_SPI_IRQHandler+0x17e>
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	f003 0301 	and.w	r3, r3, #1
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d034      	beq.n	800274c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	685a      	ldr	r2, [r3, #4]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f022 0203 	bic.w	r2, r2, #3
 80026f0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d011      	beq.n	800271e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026fe:	4a18      	ldr	r2, [pc, #96]	; (8002760 <HAL_SPI_IRQHandler+0x1fc>)
 8002700:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002706:	4618      	mov	r0, r3
 8002708:	f7fe fdb8 	bl	800127c <HAL_DMA_Abort_IT>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d005      	beq.n	800271e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002716:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002722:	2b00      	cmp	r3, #0
 8002724:	d016      	beq.n	8002754 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800272a:	4a0d      	ldr	r2, [pc, #52]	; (8002760 <HAL_SPI_IRQHandler+0x1fc>)
 800272c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002732:	4618      	mov	r0, r3
 8002734:	f7fe fda2 	bl	800127c <HAL_DMA_Abort_IT>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d00a      	beq.n	8002754 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002742:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800274a:	e003      	b.n	8002754 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f000 f813 	bl	8002778 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002752:	e000      	b.n	8002756 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8002754:	bf00      	nop
    return;
 8002756:	bf00      	nop
 8002758:	bf00      	nop
  }
}
 800275a:	3720      	adds	r7, #32
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	08002891 	.word	0x08002891

08002764 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800276c:	bf00      	nop
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002780:	bf00      	nop
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b086      	sub	sp, #24
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002798:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800279a:	f7fe fb4b 	bl	8000e34 <HAL_GetTick>
 800279e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027ae:	d03b      	beq.n	8002828 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	685a      	ldr	r2, [r3, #4]
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f022 0220 	bic.w	r2, r2, #32
 80027be:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	685a      	ldr	r2, [r3, #4]
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f022 0202 	bic.w	r2, r2, #2
 80027ce:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80027d0:	693a      	ldr	r2, [r7, #16]
 80027d2:	2164      	movs	r1, #100	; 0x64
 80027d4:	6978      	ldr	r0, [r7, #20]
 80027d6:	f000 f8d9 	bl	800298c <SPI_EndRxTxTransaction>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d005      	beq.n	80027ec <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e4:	f043 0220 	orr.w	r2, r3, #32
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d10a      	bne.n	800280a <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80027f4:	2300      	movs	r3, #0
 80027f6:	60fb      	str	r3, [r7, #12]
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	60fb      	str	r3, [r7, #12]
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	60fb      	str	r3, [r7, #12]
 8002808:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	2200      	movs	r2, #0
 800280e:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800281c:	2b00      	cmp	r3, #0
 800281e:	d003      	beq.n	8002828 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002820:	6978      	ldr	r0, [r7, #20]
 8002822:	f7ff ffa9 	bl	8002778 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002826:	e002      	b.n	800282e <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8002828:	6978      	ldr	r0, [r7, #20]
 800282a:	f7fd fe71 	bl	8000510 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800282e:	3718      	adds	r7, #24
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002840:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8002842:	68f8      	ldr	r0, [r7, #12]
 8002844:	f7ff ff8e 	bl	8002764 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002848:	bf00      	nop
 800284a:	3710      	adds	r7, #16
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800285c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	685a      	ldr	r2, [r3, #4]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f022 0203 	bic.w	r2, r2, #3
 800286c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002872:	f043 0210 	orr.w	r2, r3, #16
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2201      	movs	r2, #1
 800287e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002882:	68f8      	ldr	r0, [r7, #12]
 8002884:	f7ff ff78 	bl	8002778 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002888:	bf00      	nop
 800288a:	3710      	adds	r7, #16
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800289c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2200      	movs	r2, #0
 80028a2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2200      	movs	r2, #0
 80028a8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80028aa:	68f8      	ldr	r0, [r7, #12]
 80028ac:	f7ff ff64 	bl	8002778 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80028b0:	bf00      	nop
 80028b2:	3710      	adds	r7, #16
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	603b      	str	r3, [r7, #0]
 80028c4:	4613      	mov	r3, r2
 80028c6:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80028c8:	e04c      	b.n	8002964 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d0:	d048      	beq.n	8002964 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80028d2:	f7fe faaf 	bl	8000e34 <HAL_GetTick>
 80028d6:	4602      	mov	r2, r0
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	683a      	ldr	r2, [r7, #0]
 80028de:	429a      	cmp	r2, r3
 80028e0:	d902      	bls.n	80028e8 <SPI_WaitFlagStateUntilTimeout+0x30>
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d13d      	bne.n	8002964 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	685a      	ldr	r2, [r3, #4]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80028f6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002900:	d111      	bne.n	8002926 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800290a:	d004      	beq.n	8002916 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002914:	d107      	bne.n	8002926 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002924:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800292a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800292e:	d10f      	bne.n	8002950 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800293e:	601a      	str	r2, [r3, #0]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800294e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e00f      	b.n	8002984 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	689a      	ldr	r2, [r3, #8]
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	4013      	ands	r3, r2
 800296e:	68ba      	ldr	r2, [r7, #8]
 8002970:	429a      	cmp	r2, r3
 8002972:	bf0c      	ite	eq
 8002974:	2301      	moveq	r3, #1
 8002976:	2300      	movne	r3, #0
 8002978:	b2db      	uxtb	r3, r3
 800297a:	461a      	mov	r2, r3
 800297c:	79fb      	ldrb	r3, [r7, #7]
 800297e:	429a      	cmp	r2, r3
 8002980:	d1a3      	bne.n	80028ca <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002982:	2300      	movs	r3, #0
}
 8002984:	4618      	mov	r0, r3
 8002986:	3710      	adds	r7, #16
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b088      	sub	sp, #32
 8002990:	af02      	add	r7, sp, #8
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002998:	4b1b      	ldr	r3, [pc, #108]	; (8002a08 <SPI_EndRxTxTransaction+0x7c>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a1b      	ldr	r2, [pc, #108]	; (8002a0c <SPI_EndRxTxTransaction+0x80>)
 800299e:	fba2 2303 	umull	r2, r3, r2, r3
 80029a2:	0d5b      	lsrs	r3, r3, #21
 80029a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80029a8:	fb02 f303 	mul.w	r3, r2, r3
 80029ac:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029b6:	d112      	bne.n	80029de <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	9300      	str	r3, [sp, #0]
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	2200      	movs	r2, #0
 80029c0:	2180      	movs	r1, #128	; 0x80
 80029c2:	68f8      	ldr	r0, [r7, #12]
 80029c4:	f7ff ff78 	bl	80028b8 <SPI_WaitFlagStateUntilTimeout>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d016      	beq.n	80029fc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029d2:	f043 0220 	orr.w	r2, r3, #32
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e00f      	b.n	80029fe <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d00a      	beq.n	80029fa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	3b01      	subs	r3, #1
 80029e8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029f4:	2b80      	cmp	r3, #128	; 0x80
 80029f6:	d0f2      	beq.n	80029de <SPI_EndRxTxTransaction+0x52>
 80029f8:	e000      	b.n	80029fc <SPI_EndRxTxTransaction+0x70>
        break;
 80029fa:	bf00      	nop
  }

  return HAL_OK;
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3718      	adds	r7, #24
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	20000000 	.word	0x20000000
 8002a0c:	165e9f81 	.word	0x165e9f81

08002a10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d101      	bne.n	8002a22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e01d      	b.n	8002a5e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d106      	bne.n	8002a3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f7fe f814 	bl	8000a64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2202      	movs	r2, #2
 8002a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	3304      	adds	r3, #4
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	4610      	mov	r0, r2
 8002a50:	f000 fa14 	bl	8002e7c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3708      	adds	r7, #8
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a66:	b480      	push	{r7}
 8002a68:	b085      	sub	sp, #20
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68da      	ldr	r2, [r3, #12]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f042 0201 	orr.w	r2, r2, #1
 8002a7c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f003 0307 	and.w	r3, r3, #7
 8002a88:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2b06      	cmp	r3, #6
 8002a8e:	d007      	beq.n	8002aa0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f042 0201 	orr.w	r2, r2, #1
 8002a9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3714      	adds	r7, #20
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr

08002aae <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b082      	sub	sp, #8
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	f003 0302 	and.w	r3, r3, #2
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d122      	bne.n	8002b0a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d11b      	bne.n	8002b0a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f06f 0202 	mvn.w	r2, #2
 8002ada:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	699b      	ldr	r3, [r3, #24]
 8002ae8:	f003 0303 	and.w	r3, r3, #3
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d003      	beq.n	8002af8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f000 f9a5 	bl	8002e40 <HAL_TIM_IC_CaptureCallback>
 8002af6:	e005      	b.n	8002b04 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f000 f997 	bl	8002e2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 f9a8 	bl	8002e54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	691b      	ldr	r3, [r3, #16]
 8002b10:	f003 0304 	and.w	r3, r3, #4
 8002b14:	2b04      	cmp	r3, #4
 8002b16:	d122      	bne.n	8002b5e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	f003 0304 	and.w	r3, r3, #4
 8002b22:	2b04      	cmp	r3, #4
 8002b24:	d11b      	bne.n	8002b5e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f06f 0204 	mvn.w	r2, #4
 8002b2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2202      	movs	r2, #2
 8002b34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	699b      	ldr	r3, [r3, #24]
 8002b3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d003      	beq.n	8002b4c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f000 f97b 	bl	8002e40 <HAL_TIM_IC_CaptureCallback>
 8002b4a:	e005      	b.n	8002b58 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f000 f96d 	bl	8002e2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 f97e 	bl	8002e54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	691b      	ldr	r3, [r3, #16]
 8002b64:	f003 0308 	and.w	r3, r3, #8
 8002b68:	2b08      	cmp	r3, #8
 8002b6a:	d122      	bne.n	8002bb2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	f003 0308 	and.w	r3, r3, #8
 8002b76:	2b08      	cmp	r3, #8
 8002b78:	d11b      	bne.n	8002bb2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f06f 0208 	mvn.w	r2, #8
 8002b82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2204      	movs	r2, #4
 8002b88:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	69db      	ldr	r3, [r3, #28]
 8002b90:	f003 0303 	and.w	r3, r3, #3
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d003      	beq.n	8002ba0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f000 f951 	bl	8002e40 <HAL_TIM_IC_CaptureCallback>
 8002b9e:	e005      	b.n	8002bac <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f000 f943 	bl	8002e2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f000 f954 	bl	8002e54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	691b      	ldr	r3, [r3, #16]
 8002bb8:	f003 0310 	and.w	r3, r3, #16
 8002bbc:	2b10      	cmp	r3, #16
 8002bbe:	d122      	bne.n	8002c06 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	f003 0310 	and.w	r3, r3, #16
 8002bca:	2b10      	cmp	r3, #16
 8002bcc:	d11b      	bne.n	8002c06 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f06f 0210 	mvn.w	r2, #16
 8002bd6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2208      	movs	r2, #8
 8002bdc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	69db      	ldr	r3, [r3, #28]
 8002be4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d003      	beq.n	8002bf4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f000 f927 	bl	8002e40 <HAL_TIM_IC_CaptureCallback>
 8002bf2:	e005      	b.n	8002c00 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f000 f919 	bl	8002e2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 f92a 	bl	8002e54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	691b      	ldr	r3, [r3, #16]
 8002c0c:	f003 0301 	and.w	r3, r3, #1
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d10e      	bne.n	8002c32 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d107      	bne.n	8002c32 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f06f 0201 	mvn.w	r2, #1
 8002c2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f7fd fc7d 	bl	800052c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	691b      	ldr	r3, [r3, #16]
 8002c38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c3c:	2b80      	cmp	r3, #128	; 0x80
 8002c3e:	d10e      	bne.n	8002c5e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c4a:	2b80      	cmp	r3, #128	; 0x80
 8002c4c:	d107      	bne.n	8002c5e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f000 faa1 	bl	80031a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	691b      	ldr	r3, [r3, #16]
 8002c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c68:	2b40      	cmp	r3, #64	; 0x40
 8002c6a:	d10e      	bne.n	8002c8a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c76:	2b40      	cmp	r3, #64	; 0x40
 8002c78:	d107      	bne.n	8002c8a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f000 f8ef 	bl	8002e68 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	691b      	ldr	r3, [r3, #16]
 8002c90:	f003 0320 	and.w	r3, r3, #32
 8002c94:	2b20      	cmp	r3, #32
 8002c96:	d10e      	bne.n	8002cb6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	f003 0320 	and.w	r3, r3, #32
 8002ca2:	2b20      	cmp	r3, #32
 8002ca4:	d107      	bne.n	8002cb6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f06f 0220 	mvn.w	r2, #32
 8002cae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f000 fa6b 	bl	800318c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002cb6:	bf00      	nop
 8002cb8:	3708      	adds	r7, #8
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	b084      	sub	sp, #16
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
 8002cc6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d101      	bne.n	8002cd6 <HAL_TIM_ConfigClockSource+0x18>
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	e0a6      	b.n	8002e24 <HAL_TIM_ConfigClockSource+0x166>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2202      	movs	r2, #2
 8002ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002cf4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002cfc:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2b40      	cmp	r3, #64	; 0x40
 8002d0c:	d067      	beq.n	8002dde <HAL_TIM_ConfigClockSource+0x120>
 8002d0e:	2b40      	cmp	r3, #64	; 0x40
 8002d10:	d80b      	bhi.n	8002d2a <HAL_TIM_ConfigClockSource+0x6c>
 8002d12:	2b10      	cmp	r3, #16
 8002d14:	d073      	beq.n	8002dfe <HAL_TIM_ConfigClockSource+0x140>
 8002d16:	2b10      	cmp	r3, #16
 8002d18:	d802      	bhi.n	8002d20 <HAL_TIM_ConfigClockSource+0x62>
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d06f      	beq.n	8002dfe <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002d1e:	e078      	b.n	8002e12 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002d20:	2b20      	cmp	r3, #32
 8002d22:	d06c      	beq.n	8002dfe <HAL_TIM_ConfigClockSource+0x140>
 8002d24:	2b30      	cmp	r3, #48	; 0x30
 8002d26:	d06a      	beq.n	8002dfe <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002d28:	e073      	b.n	8002e12 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002d2a:	2b70      	cmp	r3, #112	; 0x70
 8002d2c:	d00d      	beq.n	8002d4a <HAL_TIM_ConfigClockSource+0x8c>
 8002d2e:	2b70      	cmp	r3, #112	; 0x70
 8002d30:	d804      	bhi.n	8002d3c <HAL_TIM_ConfigClockSource+0x7e>
 8002d32:	2b50      	cmp	r3, #80	; 0x50
 8002d34:	d033      	beq.n	8002d9e <HAL_TIM_ConfigClockSource+0xe0>
 8002d36:	2b60      	cmp	r3, #96	; 0x60
 8002d38:	d041      	beq.n	8002dbe <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002d3a:	e06a      	b.n	8002e12 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002d3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d40:	d066      	beq.n	8002e10 <HAL_TIM_ConfigClockSource+0x152>
 8002d42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d46:	d017      	beq.n	8002d78 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002d48:	e063      	b.n	8002e12 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6818      	ldr	r0, [r3, #0]
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	6899      	ldr	r1, [r3, #8]
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	685a      	ldr	r2, [r3, #4]
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	f000 f989 	bl	8003070 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d6c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	68fa      	ldr	r2, [r7, #12]
 8002d74:	609a      	str	r2, [r3, #8]
      break;
 8002d76:	e04c      	b.n	8002e12 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6818      	ldr	r0, [r3, #0]
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	6899      	ldr	r1, [r3, #8]
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685a      	ldr	r2, [r3, #4]
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	f000 f972 	bl	8003070 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	689a      	ldr	r2, [r3, #8]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d9a:	609a      	str	r2, [r3, #8]
      break;
 8002d9c:	e039      	b.n	8002e12 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6818      	ldr	r0, [r3, #0]
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	6859      	ldr	r1, [r3, #4]
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	461a      	mov	r2, r3
 8002dac:	f000 f8e6 	bl	8002f7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2150      	movs	r1, #80	; 0x50
 8002db6:	4618      	mov	r0, r3
 8002db8:	f000 f93f 	bl	800303a <TIM_ITRx_SetConfig>
      break;
 8002dbc:	e029      	b.n	8002e12 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6818      	ldr	r0, [r3, #0]
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	6859      	ldr	r1, [r3, #4]
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	461a      	mov	r2, r3
 8002dcc:	f000 f905 	bl	8002fda <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2160      	movs	r1, #96	; 0x60
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f000 f92f 	bl	800303a <TIM_ITRx_SetConfig>
      break;
 8002ddc:	e019      	b.n	8002e12 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6818      	ldr	r0, [r3, #0]
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	6859      	ldr	r1, [r3, #4]
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	461a      	mov	r2, r3
 8002dec:	f000 f8c6 	bl	8002f7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2140      	movs	r1, #64	; 0x40
 8002df6:	4618      	mov	r0, r3
 8002df8:	f000 f91f 	bl	800303a <TIM_ITRx_SetConfig>
      break;
 8002dfc:	e009      	b.n	8002e12 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4619      	mov	r1, r3
 8002e08:	4610      	mov	r0, r2
 8002e0a:	f000 f916 	bl	800303a <TIM_ITRx_SetConfig>
      break;
 8002e0e:	e000      	b.n	8002e12 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002e10:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2201      	movs	r2, #1
 8002e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3710      	adds	r7, #16
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e34:	bf00      	nop
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e48:	bf00      	nop
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e5c:	bf00      	nop
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e70:	bf00      	nop
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b085      	sub	sp, #20
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	4a34      	ldr	r2, [pc, #208]	; (8002f60 <TIM_Base_SetConfig+0xe4>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d00f      	beq.n	8002eb4 <TIM_Base_SetConfig+0x38>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e9a:	d00b      	beq.n	8002eb4 <TIM_Base_SetConfig+0x38>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4a31      	ldr	r2, [pc, #196]	; (8002f64 <TIM_Base_SetConfig+0xe8>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d007      	beq.n	8002eb4 <TIM_Base_SetConfig+0x38>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	4a30      	ldr	r2, [pc, #192]	; (8002f68 <TIM_Base_SetConfig+0xec>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d003      	beq.n	8002eb4 <TIM_Base_SetConfig+0x38>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4a2f      	ldr	r2, [pc, #188]	; (8002f6c <TIM_Base_SetConfig+0xf0>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d108      	bne.n	8002ec6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	68fa      	ldr	r2, [r7, #12]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a25      	ldr	r2, [pc, #148]	; (8002f60 <TIM_Base_SetConfig+0xe4>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d01b      	beq.n	8002f06 <TIM_Base_SetConfig+0x8a>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ed4:	d017      	beq.n	8002f06 <TIM_Base_SetConfig+0x8a>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a22      	ldr	r2, [pc, #136]	; (8002f64 <TIM_Base_SetConfig+0xe8>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d013      	beq.n	8002f06 <TIM_Base_SetConfig+0x8a>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a21      	ldr	r2, [pc, #132]	; (8002f68 <TIM_Base_SetConfig+0xec>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d00f      	beq.n	8002f06 <TIM_Base_SetConfig+0x8a>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a20      	ldr	r2, [pc, #128]	; (8002f6c <TIM_Base_SetConfig+0xf0>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d00b      	beq.n	8002f06 <TIM_Base_SetConfig+0x8a>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a1f      	ldr	r2, [pc, #124]	; (8002f70 <TIM_Base_SetConfig+0xf4>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d007      	beq.n	8002f06 <TIM_Base_SetConfig+0x8a>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a1e      	ldr	r2, [pc, #120]	; (8002f74 <TIM_Base_SetConfig+0xf8>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d003      	beq.n	8002f06 <TIM_Base_SetConfig+0x8a>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a1d      	ldr	r2, [pc, #116]	; (8002f78 <TIM_Base_SetConfig+0xfc>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d108      	bne.n	8002f18 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	68fa      	ldr	r2, [r7, #12]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	68fa      	ldr	r2, [r7, #12]
 8002f2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	689a      	ldr	r2, [r3, #8]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4a08      	ldr	r2, [pc, #32]	; (8002f60 <TIM_Base_SetConfig+0xe4>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d103      	bne.n	8002f4c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	691a      	ldr	r2, [r3, #16]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	615a      	str	r2, [r3, #20]
}
 8002f52:	bf00      	nop
 8002f54:	3714      	adds	r7, #20
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	40010000 	.word	0x40010000
 8002f64:	40000400 	.word	0x40000400
 8002f68:	40000800 	.word	0x40000800
 8002f6c:	40000c00 	.word	0x40000c00
 8002f70:	40014000 	.word	0x40014000
 8002f74:	40014400 	.word	0x40014400
 8002f78:	40014800 	.word	0x40014800

08002f7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b087      	sub	sp, #28
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6a1b      	ldr	r3, [r3, #32]
 8002f8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6a1b      	ldr	r3, [r3, #32]
 8002f92:	f023 0201 	bic.w	r2, r3, #1
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fa6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	011b      	lsls	r3, r3, #4
 8002fac:	693a      	ldr	r2, [r7, #16]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	f023 030a 	bic.w	r3, r3, #10
 8002fb8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002fba:	697a      	ldr	r2, [r7, #20]
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	693a      	ldr	r2, [r7, #16]
 8002fc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	697a      	ldr	r2, [r7, #20]
 8002fcc:	621a      	str	r2, [r3, #32]
}
 8002fce:	bf00      	nop
 8002fd0:	371c      	adds	r7, #28
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr

08002fda <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fda:	b480      	push	{r7}
 8002fdc:	b087      	sub	sp, #28
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	60f8      	str	r0, [r7, #12]
 8002fe2:	60b9      	str	r1, [r7, #8]
 8002fe4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6a1b      	ldr	r3, [r3, #32]
 8002fea:	f023 0210 	bic.w	r2, r3, #16
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6a1b      	ldr	r3, [r3, #32]
 8002ffc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003004:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	031b      	lsls	r3, r3, #12
 800300a:	697a      	ldr	r2, [r7, #20]
 800300c:	4313      	orrs	r3, r2
 800300e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003016:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	011b      	lsls	r3, r3, #4
 800301c:	693a      	ldr	r2, [r7, #16]
 800301e:	4313      	orrs	r3, r2
 8003020:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	697a      	ldr	r2, [r7, #20]
 8003026:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	693a      	ldr	r2, [r7, #16]
 800302c:	621a      	str	r2, [r3, #32]
}
 800302e:	bf00      	nop
 8003030:	371c      	adds	r7, #28
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr

0800303a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800303a:	b480      	push	{r7}
 800303c:	b085      	sub	sp, #20
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
 8003042:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003050:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003052:	683a      	ldr	r2, [r7, #0]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	4313      	orrs	r3, r2
 8003058:	f043 0307 	orr.w	r3, r3, #7
 800305c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	68fa      	ldr	r2, [r7, #12]
 8003062:	609a      	str	r2, [r3, #8]
}
 8003064:	bf00      	nop
 8003066:	3714      	adds	r7, #20
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr

08003070 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003070:	b480      	push	{r7}
 8003072:	b087      	sub	sp, #28
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	607a      	str	r2, [r7, #4]
 800307c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800308a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	021a      	lsls	r2, r3, #8
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	431a      	orrs	r2, r3
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	4313      	orrs	r3, r2
 8003098:	697a      	ldr	r2, [r7, #20]
 800309a:	4313      	orrs	r3, r2
 800309c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	697a      	ldr	r2, [r7, #20]
 80030a2:	609a      	str	r2, [r3, #8]
}
 80030a4:	bf00      	nop
 80030a6:	371c      	adds	r7, #28
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b085      	sub	sp, #20
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d101      	bne.n	80030c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80030c4:	2302      	movs	r3, #2
 80030c6:	e050      	b.n	800316a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2202      	movs	r2, #2
 80030d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68fa      	ldr	r2, [r7, #12]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	68fa      	ldr	r2, [r7, #12]
 8003100:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a1c      	ldr	r2, [pc, #112]	; (8003178 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d018      	beq.n	800313e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003114:	d013      	beq.n	800313e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a18      	ldr	r2, [pc, #96]	; (800317c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d00e      	beq.n	800313e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a16      	ldr	r2, [pc, #88]	; (8003180 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d009      	beq.n	800313e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a15      	ldr	r2, [pc, #84]	; (8003184 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d004      	beq.n	800313e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a13      	ldr	r2, [pc, #76]	; (8003188 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d10c      	bne.n	8003158 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003144:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	68ba      	ldr	r2, [r7, #8]
 800314c:	4313      	orrs	r3, r2
 800314e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	68ba      	ldr	r2, [r7, #8]
 8003156:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3714      	adds	r7, #20
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	40010000 	.word	0x40010000
 800317c:	40000400 	.word	0x40000400
 8003180:	40000800 	.word	0x40000800
 8003184:	40000c00 	.word	0x40000c00
 8003188:	40014000 	.word	0x40014000

0800318c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003194:	bf00      	nop
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80031a8:	bf00      	nop
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d101      	bne.n	80031c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e03f      	b.n	8003246 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d106      	bne.n	80031e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f7fd fc6a 	bl	8000ab4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2224      	movs	r2, #36	; 0x24
 80031e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68da      	ldr	r2, [r3, #12]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f000 fb8b 	bl	8003914 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	691a      	ldr	r2, [r3, #16]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800320c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	695a      	ldr	r2, [r3, #20]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800321c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	68da      	ldr	r2, [r3, #12]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800322c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2220      	movs	r2, #32
 8003238:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2220      	movs	r2, #32
 8003240:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	3708      	adds	r7, #8
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
	...

08003250 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b086      	sub	sp, #24
 8003254:	af00      	add	r7, sp, #0
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	60b9      	str	r1, [r7, #8]
 800325a:	4613      	mov	r3, r2
 800325c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003264:	b2db      	uxtb	r3, r3
 8003266:	2b20      	cmp	r3, #32
 8003268:	d166      	bne.n	8003338 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d002      	beq.n	8003276 <HAL_UART_Receive_DMA+0x26>
 8003270:	88fb      	ldrh	r3, [r7, #6]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d101      	bne.n	800327a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e05f      	b.n	800333a <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003280:	2b01      	cmp	r3, #1
 8003282:	d101      	bne.n	8003288 <HAL_UART_Receive_DMA+0x38>
 8003284:	2302      	movs	r3, #2
 8003286:	e058      	b.n	800333a <HAL_UART_Receive_DMA+0xea>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003290:	68ba      	ldr	r2, [r7, #8]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	88fa      	ldrh	r2, [r7, #6]
 800329a:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2200      	movs	r2, #0
 80032a0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2222      	movs	r2, #34	; 0x22
 80032a6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ae:	4a25      	ldr	r2, [pc, #148]	; (8003344 <HAL_UART_Receive_DMA+0xf4>)
 80032b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032b6:	4a24      	ldr	r2, [pc, #144]	; (8003348 <HAL_UART_Receive_DMA+0xf8>)
 80032b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032be:	4a23      	ldr	r2, [pc, #140]	; (800334c <HAL_UART_Receive_DMA+0xfc>)
 80032c0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032c6:	2200      	movs	r2, #0
 80032c8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 80032ca:	f107 0308 	add.w	r3, r7, #8
 80032ce:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	3304      	adds	r3, #4
 80032da:	4619      	mov	r1, r3
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	88fb      	ldrh	r3, [r7, #6]
 80032e2:	f7fd ff73 	bl	80011cc <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80032e6:	2300      	movs	r3, #0
 80032e8:	613b      	str	r3, [r7, #16]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	613b      	str	r3, [r7, #16]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	613b      	str	r3, [r7, #16]
 80032fa:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	68da      	ldr	r2, [r3, #12]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003312:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	695a      	ldr	r2, [r3, #20]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f042 0201 	orr.w	r2, r2, #1
 8003322:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	695a      	ldr	r2, [r3, #20]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003332:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8003334:	2300      	movs	r3, #0
 8003336:	e000      	b.n	800333a <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8003338:	2302      	movs	r3, #2
  }
}
 800333a:	4618      	mov	r0, r3
 800333c:	3718      	adds	r7, #24
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	0800358d 	.word	0x0800358d
 8003348:	080035f5 	.word	0x080035f5
 800334c:	08003611 	.word	0x08003611

08003350 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b088      	sub	sp, #32
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	695b      	ldr	r3, [r3, #20]
 800336e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003370:	2300      	movs	r3, #0
 8003372:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003374:	2300      	movs	r3, #0
 8003376:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	f003 030f 	and.w	r3, r3, #15
 800337e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d10d      	bne.n	80033a2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	f003 0320 	and.w	r3, r3, #32
 800338c:	2b00      	cmp	r3, #0
 800338e:	d008      	beq.n	80033a2 <HAL_UART_IRQHandler+0x52>
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	f003 0320 	and.w	r3, r3, #32
 8003396:	2b00      	cmp	r3, #0
 8003398:	d003      	beq.n	80033a2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 fa38 	bl	8003810 <UART_Receive_IT>
      return;
 80033a0:	e0d1      	b.n	8003546 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	f000 80b0 	beq.w	800350a <HAL_UART_IRQHandler+0x1ba>
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	f003 0301 	and.w	r3, r3, #1
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d105      	bne.n	80033c0 <HAL_UART_IRQHandler+0x70>
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	f000 80a5 	beq.w	800350a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d00a      	beq.n	80033e0 <HAL_UART_IRQHandler+0x90>
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d005      	beq.n	80033e0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033d8:	f043 0201 	orr.w	r2, r3, #1
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	f003 0304 	and.w	r3, r3, #4
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d00a      	beq.n	8003400 <HAL_UART_IRQHandler+0xb0>
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	f003 0301 	and.w	r3, r3, #1
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d005      	beq.n	8003400 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033f8:	f043 0202 	orr.w	r2, r3, #2
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00a      	beq.n	8003420 <HAL_UART_IRQHandler+0xd0>
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	f003 0301 	and.w	r3, r3, #1
 8003410:	2b00      	cmp	r3, #0
 8003412:	d005      	beq.n	8003420 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003418:	f043 0204 	orr.w	r2, r3, #4
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	f003 0308 	and.w	r3, r3, #8
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00f      	beq.n	800344a <HAL_UART_IRQHandler+0xfa>
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	f003 0320 	and.w	r3, r3, #32
 8003430:	2b00      	cmp	r3, #0
 8003432:	d104      	bne.n	800343e <HAL_UART_IRQHandler+0xee>
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	f003 0301 	and.w	r3, r3, #1
 800343a:	2b00      	cmp	r3, #0
 800343c:	d005      	beq.n	800344a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003442:	f043 0208 	orr.w	r2, r3, #8
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800344e:	2b00      	cmp	r3, #0
 8003450:	d078      	beq.n	8003544 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	f003 0320 	and.w	r3, r3, #32
 8003458:	2b00      	cmp	r3, #0
 800345a:	d007      	beq.n	800346c <HAL_UART_IRQHandler+0x11c>
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	f003 0320 	and.w	r3, r3, #32
 8003462:	2b00      	cmp	r3, #0
 8003464:	d002      	beq.n	800346c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 f9d2 	bl	8003810 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	695b      	ldr	r3, [r3, #20]
 8003472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003476:	2b40      	cmp	r3, #64	; 0x40
 8003478:	bf0c      	ite	eq
 800347a:	2301      	moveq	r3, #1
 800347c:	2300      	movne	r3, #0
 800347e:	b2db      	uxtb	r3, r3
 8003480:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003486:	f003 0308 	and.w	r3, r3, #8
 800348a:	2b00      	cmp	r3, #0
 800348c:	d102      	bne.n	8003494 <HAL_UART_IRQHandler+0x144>
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d031      	beq.n	80034f8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f000 f91b 	bl	80036d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	695b      	ldr	r3, [r3, #20]
 80034a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034a4:	2b40      	cmp	r3, #64	; 0x40
 80034a6:	d123      	bne.n	80034f0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	695a      	ldr	r2, [r3, #20]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034b6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d013      	beq.n	80034e8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034c4:	4a21      	ldr	r2, [pc, #132]	; (800354c <HAL_UART_IRQHandler+0x1fc>)
 80034c6:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7fd fed5 	bl	800127c <HAL_DMA_Abort_IT>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d016      	beq.n	8003506 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80034e2:	4610      	mov	r0, r2
 80034e4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034e6:	e00e      	b.n	8003506 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f000 f845 	bl	8003578 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034ee:	e00a      	b.n	8003506 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f000 f841 	bl	8003578 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034f6:	e006      	b.n	8003506 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f000 f83d 	bl	8003578 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003504:	e01e      	b.n	8003544 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003506:	bf00      	nop
    return;
 8003508:	e01c      	b.n	8003544 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003510:	2b00      	cmp	r3, #0
 8003512:	d008      	beq.n	8003526 <HAL_UART_IRQHandler+0x1d6>
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800351a:	2b00      	cmp	r3, #0
 800351c:	d003      	beq.n	8003526 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 f908 	bl	8003734 <UART_Transmit_IT>
    return;
 8003524:	e00f      	b.n	8003546 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800352c:	2b00      	cmp	r3, #0
 800352e:	d00a      	beq.n	8003546 <HAL_UART_IRQHandler+0x1f6>
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003536:	2b00      	cmp	r3, #0
 8003538:	d005      	beq.n	8003546 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 f950 	bl	80037e0 <UART_EndTransmit_IT>
    return;
 8003540:	bf00      	nop
 8003542:	e000      	b.n	8003546 <HAL_UART_IRQHandler+0x1f6>
    return;
 8003544:	bf00      	nop
  }
}
 8003546:	3720      	adds	r7, #32
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	0800370d 	.word	0x0800370d

08003550 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003558:	bf00      	nop
 800355a:	370c      	adds	r7, #12
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr

08003564 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800356c:	bf00      	nop
 800356e:	370c      	adds	r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003580:	bf00      	nop
 8003582:	370c      	adds	r7, #12
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr

0800358c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003598:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d11e      	bne.n	80035e6 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2200      	movs	r2, #0
 80035ac:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68da      	ldr	r2, [r3, #12]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035bc:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	695a      	ldr	r2, [r3, #20]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f022 0201 	bic.w	r2, r2, #1
 80035cc:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	695a      	ldr	r2, [r3, #20]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035dc:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2220      	movs	r2, #32
 80035e2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80035e6:	68f8      	ldr	r0, [r7, #12]
 80035e8:	f7fc ff76 	bl	80004d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80035ec:	bf00      	nop
 80035ee:	3710      	adds	r7, #16
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003600:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8003602:	68f8      	ldr	r0, [r7, #12]
 8003604:	f7ff ffae 	bl	8003564 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003608:	bf00      	nop
 800360a:	3710      	adds	r7, #16
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003618:	2300      	movs	r3, #0
 800361a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003620:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	695b      	ldr	r3, [r3, #20]
 8003628:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800362c:	2b80      	cmp	r3, #128	; 0x80
 800362e:	bf0c      	ite	eq
 8003630:	2301      	moveq	r3, #1
 8003632:	2300      	movne	r3, #0
 8003634:	b2db      	uxtb	r3, r3
 8003636:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800363e:	b2db      	uxtb	r3, r3
 8003640:	2b21      	cmp	r3, #33	; 0x21
 8003642:	d108      	bne.n	8003656 <UART_DMAError+0x46>
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d005      	beq.n	8003656 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	2200      	movs	r2, #0
 800364e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003650:	68b8      	ldr	r0, [r7, #8]
 8003652:	f000 f827 	bl	80036a4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	695b      	ldr	r3, [r3, #20]
 800365c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003660:	2b40      	cmp	r3, #64	; 0x40
 8003662:	bf0c      	ite	eq
 8003664:	2301      	moveq	r3, #1
 8003666:	2300      	movne	r3, #0
 8003668:	b2db      	uxtb	r3, r3
 800366a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003672:	b2db      	uxtb	r3, r3
 8003674:	2b22      	cmp	r3, #34	; 0x22
 8003676:	d108      	bne.n	800368a <UART_DMAError+0x7a>
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d005      	beq.n	800368a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	2200      	movs	r2, #0
 8003682:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003684:	68b8      	ldr	r0, [r7, #8]
 8003686:	f000 f823 	bl	80036d0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800368e:	f043 0210 	orr.w	r2, r3, #16
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003696:	68b8      	ldr	r0, [r7, #8]
 8003698:	f7ff ff6e 	bl	8003578 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800369c:	bf00      	nop
 800369e:	3710      	adds	r7, #16
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68da      	ldr	r2, [r3, #12]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80036ba:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2220      	movs	r2, #32
 80036c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80036c4:	bf00      	nop
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68da      	ldr	r2, [r3, #12]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80036e6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	695a      	ldr	r2, [r3, #20]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f022 0201 	bic.w	r2, r2, #1
 80036f6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2220      	movs	r2, #32
 80036fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003700:	bf00      	nop
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr

0800370c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003718:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2200      	movs	r2, #0
 800371e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2200      	movs	r2, #0
 8003724:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003726:	68f8      	ldr	r0, [r7, #12]
 8003728:	f7ff ff26 	bl	8003578 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800372c:	bf00      	nop
 800372e:	3710      	adds	r7, #16
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}

08003734 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003734:	b480      	push	{r7}
 8003736:	b085      	sub	sp, #20
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003742:	b2db      	uxtb	r3, r3
 8003744:	2b21      	cmp	r3, #33	; 0x21
 8003746:	d144      	bne.n	80037d2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003750:	d11a      	bne.n	8003788 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a1b      	ldr	r3, [r3, #32]
 8003756:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	881b      	ldrh	r3, [r3, #0]
 800375c:	461a      	mov	r2, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003766:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	691b      	ldr	r3, [r3, #16]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d105      	bne.n	800377c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a1b      	ldr	r3, [r3, #32]
 8003774:	1c9a      	adds	r2, r3, #2
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	621a      	str	r2, [r3, #32]
 800377a:	e00e      	b.n	800379a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a1b      	ldr	r3, [r3, #32]
 8003780:	1c5a      	adds	r2, r3, #1
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	621a      	str	r2, [r3, #32]
 8003786:	e008      	b.n	800379a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6a1b      	ldr	r3, [r3, #32]
 800378c:	1c59      	adds	r1, r3, #1
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	6211      	str	r1, [r2, #32]
 8003792:	781a      	ldrb	r2, [r3, #0]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800379e:	b29b      	uxth	r3, r3
 80037a0:	3b01      	subs	r3, #1
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	4619      	mov	r1, r3
 80037a8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d10f      	bne.n	80037ce <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68da      	ldr	r2, [r3, #12]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037bc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68da      	ldr	r2, [r3, #12]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037cc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80037ce:	2300      	movs	r3, #0
 80037d0:	e000      	b.n	80037d4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80037d2:	2302      	movs	r3, #2
  }
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3714      	adds	r7, #20
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr

080037e0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68da      	ldr	r2, [r3, #12]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037f6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2220      	movs	r2, #32
 80037fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f7ff fea5 	bl	8003550 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003806:	2300      	movs	r3, #0
}
 8003808:	4618      	mov	r0, r3
 800380a:	3708      	adds	r7, #8
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800381e:	b2db      	uxtb	r3, r3
 8003820:	2b22      	cmp	r3, #34	; 0x22
 8003822:	d171      	bne.n	8003908 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800382c:	d123      	bne.n	8003876 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003832:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d10e      	bne.n	800385a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	b29b      	uxth	r3, r3
 8003844:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003848:	b29a      	uxth	r2, r3
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003852:	1c9a      	adds	r2, r3, #2
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	629a      	str	r2, [r3, #40]	; 0x28
 8003858:	e029      	b.n	80038ae <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	b29b      	uxth	r3, r3
 8003862:	b2db      	uxtb	r3, r3
 8003864:	b29a      	uxth	r2, r3
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800386e:	1c5a      	adds	r2, r3, #1
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	629a      	str	r2, [r3, #40]	; 0x28
 8003874:	e01b      	b.n	80038ae <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d10a      	bne.n	8003894 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	6858      	ldr	r0, [r3, #4]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003888:	1c59      	adds	r1, r3, #1
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	6291      	str	r1, [r2, #40]	; 0x28
 800388e:	b2c2      	uxtb	r2, r0
 8003890:	701a      	strb	r2, [r3, #0]
 8003892:	e00c      	b.n	80038ae <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	b2da      	uxtb	r2, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a0:	1c58      	adds	r0, r3, #1
 80038a2:	6879      	ldr	r1, [r7, #4]
 80038a4:	6288      	str	r0, [r1, #40]	; 0x28
 80038a6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80038aa:	b2d2      	uxtb	r2, r2
 80038ac:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	3b01      	subs	r3, #1
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	4619      	mov	r1, r3
 80038bc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d120      	bne.n	8003904 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	68da      	ldr	r2, [r3, #12]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f022 0220 	bic.w	r2, r2, #32
 80038d0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	68da      	ldr	r2, [r3, #12]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038e0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	695a      	ldr	r2, [r3, #20]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f022 0201 	bic.w	r2, r2, #1
 80038f0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2220      	movs	r2, #32
 80038f6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f7fc fdec 	bl	80004d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003900:	2300      	movs	r3, #0
 8003902:	e002      	b.n	800390a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003904:	2300      	movs	r3, #0
 8003906:	e000      	b.n	800390a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003908:	2302      	movs	r3, #2
  }
}
 800390a:	4618      	mov	r0, r3
 800390c:	3710      	adds	r7, #16
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
	...

08003914 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003918:	b085      	sub	sp, #20
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	691b      	ldr	r3, [r3, #16]
 8003924:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	68da      	ldr	r2, [r3, #12]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	430a      	orrs	r2, r1
 8003932:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	689a      	ldr	r2, [r3, #8]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	431a      	orrs	r2, r3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	695b      	ldr	r3, [r3, #20]
 8003942:	431a      	orrs	r2, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	69db      	ldr	r3, [r3, #28]
 8003948:	4313      	orrs	r3, r2
 800394a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003956:	f023 030c 	bic.w	r3, r3, #12
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	6812      	ldr	r2, [r2, #0]
 800395e:	68f9      	ldr	r1, [r7, #12]
 8003960:	430b      	orrs	r3, r1
 8003962:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	699a      	ldr	r2, [r3, #24]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	430a      	orrs	r2, r1
 8003978:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	69db      	ldr	r3, [r3, #28]
 800397e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003982:	f040 818b 	bne.w	8003c9c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4ac1      	ldr	r2, [pc, #772]	; (8003c90 <UART_SetConfig+0x37c>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d005      	beq.n	800399c <UART_SetConfig+0x88>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4abf      	ldr	r2, [pc, #764]	; (8003c94 <UART_SetConfig+0x380>)
 8003996:	4293      	cmp	r3, r2
 8003998:	f040 80bd 	bne.w	8003b16 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800399c:	f7fe fcbc 	bl	8002318 <HAL_RCC_GetPCLK2Freq>
 80039a0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	461d      	mov	r5, r3
 80039a6:	f04f 0600 	mov.w	r6, #0
 80039aa:	46a8      	mov	r8, r5
 80039ac:	46b1      	mov	r9, r6
 80039ae:	eb18 0308 	adds.w	r3, r8, r8
 80039b2:	eb49 0409 	adc.w	r4, r9, r9
 80039b6:	4698      	mov	r8, r3
 80039b8:	46a1      	mov	r9, r4
 80039ba:	eb18 0805 	adds.w	r8, r8, r5
 80039be:	eb49 0906 	adc.w	r9, r9, r6
 80039c2:	f04f 0100 	mov.w	r1, #0
 80039c6:	f04f 0200 	mov.w	r2, #0
 80039ca:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80039ce:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80039d2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80039d6:	4688      	mov	r8, r1
 80039d8:	4691      	mov	r9, r2
 80039da:	eb18 0005 	adds.w	r0, r8, r5
 80039de:	eb49 0106 	adc.w	r1, r9, r6
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	461d      	mov	r5, r3
 80039e8:	f04f 0600 	mov.w	r6, #0
 80039ec:	196b      	adds	r3, r5, r5
 80039ee:	eb46 0406 	adc.w	r4, r6, r6
 80039f2:	461a      	mov	r2, r3
 80039f4:	4623      	mov	r3, r4
 80039f6:	f7fc fbef 	bl	80001d8 <__aeabi_uldivmod>
 80039fa:	4603      	mov	r3, r0
 80039fc:	460c      	mov	r4, r1
 80039fe:	461a      	mov	r2, r3
 8003a00:	4ba5      	ldr	r3, [pc, #660]	; (8003c98 <UART_SetConfig+0x384>)
 8003a02:	fba3 2302 	umull	r2, r3, r3, r2
 8003a06:	095b      	lsrs	r3, r3, #5
 8003a08:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	461d      	mov	r5, r3
 8003a10:	f04f 0600 	mov.w	r6, #0
 8003a14:	46a9      	mov	r9, r5
 8003a16:	46b2      	mov	sl, r6
 8003a18:	eb19 0309 	adds.w	r3, r9, r9
 8003a1c:	eb4a 040a 	adc.w	r4, sl, sl
 8003a20:	4699      	mov	r9, r3
 8003a22:	46a2      	mov	sl, r4
 8003a24:	eb19 0905 	adds.w	r9, r9, r5
 8003a28:	eb4a 0a06 	adc.w	sl, sl, r6
 8003a2c:	f04f 0100 	mov.w	r1, #0
 8003a30:	f04f 0200 	mov.w	r2, #0
 8003a34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a38:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003a3c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003a40:	4689      	mov	r9, r1
 8003a42:	4692      	mov	sl, r2
 8003a44:	eb19 0005 	adds.w	r0, r9, r5
 8003a48:	eb4a 0106 	adc.w	r1, sl, r6
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	461d      	mov	r5, r3
 8003a52:	f04f 0600 	mov.w	r6, #0
 8003a56:	196b      	adds	r3, r5, r5
 8003a58:	eb46 0406 	adc.w	r4, r6, r6
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	4623      	mov	r3, r4
 8003a60:	f7fc fbba 	bl	80001d8 <__aeabi_uldivmod>
 8003a64:	4603      	mov	r3, r0
 8003a66:	460c      	mov	r4, r1
 8003a68:	461a      	mov	r2, r3
 8003a6a:	4b8b      	ldr	r3, [pc, #556]	; (8003c98 <UART_SetConfig+0x384>)
 8003a6c:	fba3 1302 	umull	r1, r3, r3, r2
 8003a70:	095b      	lsrs	r3, r3, #5
 8003a72:	2164      	movs	r1, #100	; 0x64
 8003a74:	fb01 f303 	mul.w	r3, r1, r3
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	00db      	lsls	r3, r3, #3
 8003a7c:	3332      	adds	r3, #50	; 0x32
 8003a7e:	4a86      	ldr	r2, [pc, #536]	; (8003c98 <UART_SetConfig+0x384>)
 8003a80:	fba2 2303 	umull	r2, r3, r2, r3
 8003a84:	095b      	lsrs	r3, r3, #5
 8003a86:	005b      	lsls	r3, r3, #1
 8003a88:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003a8c:	4498      	add	r8, r3
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	461d      	mov	r5, r3
 8003a92:	f04f 0600 	mov.w	r6, #0
 8003a96:	46a9      	mov	r9, r5
 8003a98:	46b2      	mov	sl, r6
 8003a9a:	eb19 0309 	adds.w	r3, r9, r9
 8003a9e:	eb4a 040a 	adc.w	r4, sl, sl
 8003aa2:	4699      	mov	r9, r3
 8003aa4:	46a2      	mov	sl, r4
 8003aa6:	eb19 0905 	adds.w	r9, r9, r5
 8003aaa:	eb4a 0a06 	adc.w	sl, sl, r6
 8003aae:	f04f 0100 	mov.w	r1, #0
 8003ab2:	f04f 0200 	mov.w	r2, #0
 8003ab6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003aba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003abe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ac2:	4689      	mov	r9, r1
 8003ac4:	4692      	mov	sl, r2
 8003ac6:	eb19 0005 	adds.w	r0, r9, r5
 8003aca:	eb4a 0106 	adc.w	r1, sl, r6
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	461d      	mov	r5, r3
 8003ad4:	f04f 0600 	mov.w	r6, #0
 8003ad8:	196b      	adds	r3, r5, r5
 8003ada:	eb46 0406 	adc.w	r4, r6, r6
 8003ade:	461a      	mov	r2, r3
 8003ae0:	4623      	mov	r3, r4
 8003ae2:	f7fc fb79 	bl	80001d8 <__aeabi_uldivmod>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	460c      	mov	r4, r1
 8003aea:	461a      	mov	r2, r3
 8003aec:	4b6a      	ldr	r3, [pc, #424]	; (8003c98 <UART_SetConfig+0x384>)
 8003aee:	fba3 1302 	umull	r1, r3, r3, r2
 8003af2:	095b      	lsrs	r3, r3, #5
 8003af4:	2164      	movs	r1, #100	; 0x64
 8003af6:	fb01 f303 	mul.w	r3, r1, r3
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	00db      	lsls	r3, r3, #3
 8003afe:	3332      	adds	r3, #50	; 0x32
 8003b00:	4a65      	ldr	r2, [pc, #404]	; (8003c98 <UART_SetConfig+0x384>)
 8003b02:	fba2 2303 	umull	r2, r3, r2, r3
 8003b06:	095b      	lsrs	r3, r3, #5
 8003b08:	f003 0207 	and.w	r2, r3, #7
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4442      	add	r2, r8
 8003b12:	609a      	str	r2, [r3, #8]
 8003b14:	e26f      	b.n	8003ff6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b16:	f7fe fbeb 	bl	80022f0 <HAL_RCC_GetPCLK1Freq>
 8003b1a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	461d      	mov	r5, r3
 8003b20:	f04f 0600 	mov.w	r6, #0
 8003b24:	46a8      	mov	r8, r5
 8003b26:	46b1      	mov	r9, r6
 8003b28:	eb18 0308 	adds.w	r3, r8, r8
 8003b2c:	eb49 0409 	adc.w	r4, r9, r9
 8003b30:	4698      	mov	r8, r3
 8003b32:	46a1      	mov	r9, r4
 8003b34:	eb18 0805 	adds.w	r8, r8, r5
 8003b38:	eb49 0906 	adc.w	r9, r9, r6
 8003b3c:	f04f 0100 	mov.w	r1, #0
 8003b40:	f04f 0200 	mov.w	r2, #0
 8003b44:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003b48:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003b4c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003b50:	4688      	mov	r8, r1
 8003b52:	4691      	mov	r9, r2
 8003b54:	eb18 0005 	adds.w	r0, r8, r5
 8003b58:	eb49 0106 	adc.w	r1, r9, r6
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	461d      	mov	r5, r3
 8003b62:	f04f 0600 	mov.w	r6, #0
 8003b66:	196b      	adds	r3, r5, r5
 8003b68:	eb46 0406 	adc.w	r4, r6, r6
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	4623      	mov	r3, r4
 8003b70:	f7fc fb32 	bl	80001d8 <__aeabi_uldivmod>
 8003b74:	4603      	mov	r3, r0
 8003b76:	460c      	mov	r4, r1
 8003b78:	461a      	mov	r2, r3
 8003b7a:	4b47      	ldr	r3, [pc, #284]	; (8003c98 <UART_SetConfig+0x384>)
 8003b7c:	fba3 2302 	umull	r2, r3, r3, r2
 8003b80:	095b      	lsrs	r3, r3, #5
 8003b82:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	461d      	mov	r5, r3
 8003b8a:	f04f 0600 	mov.w	r6, #0
 8003b8e:	46a9      	mov	r9, r5
 8003b90:	46b2      	mov	sl, r6
 8003b92:	eb19 0309 	adds.w	r3, r9, r9
 8003b96:	eb4a 040a 	adc.w	r4, sl, sl
 8003b9a:	4699      	mov	r9, r3
 8003b9c:	46a2      	mov	sl, r4
 8003b9e:	eb19 0905 	adds.w	r9, r9, r5
 8003ba2:	eb4a 0a06 	adc.w	sl, sl, r6
 8003ba6:	f04f 0100 	mov.w	r1, #0
 8003baa:	f04f 0200 	mov.w	r2, #0
 8003bae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003bb2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003bb6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003bba:	4689      	mov	r9, r1
 8003bbc:	4692      	mov	sl, r2
 8003bbe:	eb19 0005 	adds.w	r0, r9, r5
 8003bc2:	eb4a 0106 	adc.w	r1, sl, r6
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	461d      	mov	r5, r3
 8003bcc:	f04f 0600 	mov.w	r6, #0
 8003bd0:	196b      	adds	r3, r5, r5
 8003bd2:	eb46 0406 	adc.w	r4, r6, r6
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	4623      	mov	r3, r4
 8003bda:	f7fc fafd 	bl	80001d8 <__aeabi_uldivmod>
 8003bde:	4603      	mov	r3, r0
 8003be0:	460c      	mov	r4, r1
 8003be2:	461a      	mov	r2, r3
 8003be4:	4b2c      	ldr	r3, [pc, #176]	; (8003c98 <UART_SetConfig+0x384>)
 8003be6:	fba3 1302 	umull	r1, r3, r3, r2
 8003bea:	095b      	lsrs	r3, r3, #5
 8003bec:	2164      	movs	r1, #100	; 0x64
 8003bee:	fb01 f303 	mul.w	r3, r1, r3
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	00db      	lsls	r3, r3, #3
 8003bf6:	3332      	adds	r3, #50	; 0x32
 8003bf8:	4a27      	ldr	r2, [pc, #156]	; (8003c98 <UART_SetConfig+0x384>)
 8003bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8003bfe:	095b      	lsrs	r3, r3, #5
 8003c00:	005b      	lsls	r3, r3, #1
 8003c02:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003c06:	4498      	add	r8, r3
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	461d      	mov	r5, r3
 8003c0c:	f04f 0600 	mov.w	r6, #0
 8003c10:	46a9      	mov	r9, r5
 8003c12:	46b2      	mov	sl, r6
 8003c14:	eb19 0309 	adds.w	r3, r9, r9
 8003c18:	eb4a 040a 	adc.w	r4, sl, sl
 8003c1c:	4699      	mov	r9, r3
 8003c1e:	46a2      	mov	sl, r4
 8003c20:	eb19 0905 	adds.w	r9, r9, r5
 8003c24:	eb4a 0a06 	adc.w	sl, sl, r6
 8003c28:	f04f 0100 	mov.w	r1, #0
 8003c2c:	f04f 0200 	mov.w	r2, #0
 8003c30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c34:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c38:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c3c:	4689      	mov	r9, r1
 8003c3e:	4692      	mov	sl, r2
 8003c40:	eb19 0005 	adds.w	r0, r9, r5
 8003c44:	eb4a 0106 	adc.w	r1, sl, r6
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	461d      	mov	r5, r3
 8003c4e:	f04f 0600 	mov.w	r6, #0
 8003c52:	196b      	adds	r3, r5, r5
 8003c54:	eb46 0406 	adc.w	r4, r6, r6
 8003c58:	461a      	mov	r2, r3
 8003c5a:	4623      	mov	r3, r4
 8003c5c:	f7fc fabc 	bl	80001d8 <__aeabi_uldivmod>
 8003c60:	4603      	mov	r3, r0
 8003c62:	460c      	mov	r4, r1
 8003c64:	461a      	mov	r2, r3
 8003c66:	4b0c      	ldr	r3, [pc, #48]	; (8003c98 <UART_SetConfig+0x384>)
 8003c68:	fba3 1302 	umull	r1, r3, r3, r2
 8003c6c:	095b      	lsrs	r3, r3, #5
 8003c6e:	2164      	movs	r1, #100	; 0x64
 8003c70:	fb01 f303 	mul.w	r3, r1, r3
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	00db      	lsls	r3, r3, #3
 8003c78:	3332      	adds	r3, #50	; 0x32
 8003c7a:	4a07      	ldr	r2, [pc, #28]	; (8003c98 <UART_SetConfig+0x384>)
 8003c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c80:	095b      	lsrs	r3, r3, #5
 8003c82:	f003 0207 	and.w	r2, r3, #7
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4442      	add	r2, r8
 8003c8c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003c8e:	e1b2      	b.n	8003ff6 <UART_SetConfig+0x6e2>
 8003c90:	40011000 	.word	0x40011000
 8003c94:	40011400 	.word	0x40011400
 8003c98:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4ad7      	ldr	r2, [pc, #860]	; (8004000 <UART_SetConfig+0x6ec>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d005      	beq.n	8003cb2 <UART_SetConfig+0x39e>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4ad6      	ldr	r2, [pc, #856]	; (8004004 <UART_SetConfig+0x6f0>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	f040 80d1 	bne.w	8003e54 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003cb2:	f7fe fb31 	bl	8002318 <HAL_RCC_GetPCLK2Freq>
 8003cb6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	469a      	mov	sl, r3
 8003cbc:	f04f 0b00 	mov.w	fp, #0
 8003cc0:	46d0      	mov	r8, sl
 8003cc2:	46d9      	mov	r9, fp
 8003cc4:	eb18 0308 	adds.w	r3, r8, r8
 8003cc8:	eb49 0409 	adc.w	r4, r9, r9
 8003ccc:	4698      	mov	r8, r3
 8003cce:	46a1      	mov	r9, r4
 8003cd0:	eb18 080a 	adds.w	r8, r8, sl
 8003cd4:	eb49 090b 	adc.w	r9, r9, fp
 8003cd8:	f04f 0100 	mov.w	r1, #0
 8003cdc:	f04f 0200 	mov.w	r2, #0
 8003ce0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003ce4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003ce8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003cec:	4688      	mov	r8, r1
 8003cee:	4691      	mov	r9, r2
 8003cf0:	eb1a 0508 	adds.w	r5, sl, r8
 8003cf4:	eb4b 0609 	adc.w	r6, fp, r9
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	f04f 0200 	mov.w	r2, #0
 8003d02:	f04f 0300 	mov.w	r3, #0
 8003d06:	f04f 0400 	mov.w	r4, #0
 8003d0a:	0094      	lsls	r4, r2, #2
 8003d0c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003d10:	008b      	lsls	r3, r1, #2
 8003d12:	461a      	mov	r2, r3
 8003d14:	4623      	mov	r3, r4
 8003d16:	4628      	mov	r0, r5
 8003d18:	4631      	mov	r1, r6
 8003d1a:	f7fc fa5d 	bl	80001d8 <__aeabi_uldivmod>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	460c      	mov	r4, r1
 8003d22:	461a      	mov	r2, r3
 8003d24:	4bb8      	ldr	r3, [pc, #736]	; (8004008 <UART_SetConfig+0x6f4>)
 8003d26:	fba3 2302 	umull	r2, r3, r3, r2
 8003d2a:	095b      	lsrs	r3, r3, #5
 8003d2c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	469b      	mov	fp, r3
 8003d34:	f04f 0c00 	mov.w	ip, #0
 8003d38:	46d9      	mov	r9, fp
 8003d3a:	46e2      	mov	sl, ip
 8003d3c:	eb19 0309 	adds.w	r3, r9, r9
 8003d40:	eb4a 040a 	adc.w	r4, sl, sl
 8003d44:	4699      	mov	r9, r3
 8003d46:	46a2      	mov	sl, r4
 8003d48:	eb19 090b 	adds.w	r9, r9, fp
 8003d4c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003d50:	f04f 0100 	mov.w	r1, #0
 8003d54:	f04f 0200 	mov.w	r2, #0
 8003d58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d5c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d60:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d64:	4689      	mov	r9, r1
 8003d66:	4692      	mov	sl, r2
 8003d68:	eb1b 0509 	adds.w	r5, fp, r9
 8003d6c:	eb4c 060a 	adc.w	r6, ip, sl
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	4619      	mov	r1, r3
 8003d76:	f04f 0200 	mov.w	r2, #0
 8003d7a:	f04f 0300 	mov.w	r3, #0
 8003d7e:	f04f 0400 	mov.w	r4, #0
 8003d82:	0094      	lsls	r4, r2, #2
 8003d84:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003d88:	008b      	lsls	r3, r1, #2
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	4623      	mov	r3, r4
 8003d8e:	4628      	mov	r0, r5
 8003d90:	4631      	mov	r1, r6
 8003d92:	f7fc fa21 	bl	80001d8 <__aeabi_uldivmod>
 8003d96:	4603      	mov	r3, r0
 8003d98:	460c      	mov	r4, r1
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	4b9a      	ldr	r3, [pc, #616]	; (8004008 <UART_SetConfig+0x6f4>)
 8003d9e:	fba3 1302 	umull	r1, r3, r3, r2
 8003da2:	095b      	lsrs	r3, r3, #5
 8003da4:	2164      	movs	r1, #100	; 0x64
 8003da6:	fb01 f303 	mul.w	r3, r1, r3
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	011b      	lsls	r3, r3, #4
 8003dae:	3332      	adds	r3, #50	; 0x32
 8003db0:	4a95      	ldr	r2, [pc, #596]	; (8004008 <UART_SetConfig+0x6f4>)
 8003db2:	fba2 2303 	umull	r2, r3, r2, r3
 8003db6:	095b      	lsrs	r3, r3, #5
 8003db8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dbc:	4498      	add	r8, r3
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	469b      	mov	fp, r3
 8003dc2:	f04f 0c00 	mov.w	ip, #0
 8003dc6:	46d9      	mov	r9, fp
 8003dc8:	46e2      	mov	sl, ip
 8003dca:	eb19 0309 	adds.w	r3, r9, r9
 8003dce:	eb4a 040a 	adc.w	r4, sl, sl
 8003dd2:	4699      	mov	r9, r3
 8003dd4:	46a2      	mov	sl, r4
 8003dd6:	eb19 090b 	adds.w	r9, r9, fp
 8003dda:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003dde:	f04f 0100 	mov.w	r1, #0
 8003de2:	f04f 0200 	mov.w	r2, #0
 8003de6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003dea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003dee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003df2:	4689      	mov	r9, r1
 8003df4:	4692      	mov	sl, r2
 8003df6:	eb1b 0509 	adds.w	r5, fp, r9
 8003dfa:	eb4c 060a 	adc.w	r6, ip, sl
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	4619      	mov	r1, r3
 8003e04:	f04f 0200 	mov.w	r2, #0
 8003e08:	f04f 0300 	mov.w	r3, #0
 8003e0c:	f04f 0400 	mov.w	r4, #0
 8003e10:	0094      	lsls	r4, r2, #2
 8003e12:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003e16:	008b      	lsls	r3, r1, #2
 8003e18:	461a      	mov	r2, r3
 8003e1a:	4623      	mov	r3, r4
 8003e1c:	4628      	mov	r0, r5
 8003e1e:	4631      	mov	r1, r6
 8003e20:	f7fc f9da 	bl	80001d8 <__aeabi_uldivmod>
 8003e24:	4603      	mov	r3, r0
 8003e26:	460c      	mov	r4, r1
 8003e28:	461a      	mov	r2, r3
 8003e2a:	4b77      	ldr	r3, [pc, #476]	; (8004008 <UART_SetConfig+0x6f4>)
 8003e2c:	fba3 1302 	umull	r1, r3, r3, r2
 8003e30:	095b      	lsrs	r3, r3, #5
 8003e32:	2164      	movs	r1, #100	; 0x64
 8003e34:	fb01 f303 	mul.w	r3, r1, r3
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	011b      	lsls	r3, r3, #4
 8003e3c:	3332      	adds	r3, #50	; 0x32
 8003e3e:	4a72      	ldr	r2, [pc, #456]	; (8004008 <UART_SetConfig+0x6f4>)
 8003e40:	fba2 2303 	umull	r2, r3, r2, r3
 8003e44:	095b      	lsrs	r3, r3, #5
 8003e46:	f003 020f 	and.w	r2, r3, #15
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4442      	add	r2, r8
 8003e50:	609a      	str	r2, [r3, #8]
 8003e52:	e0d0      	b.n	8003ff6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e54:	f7fe fa4c 	bl	80022f0 <HAL_RCC_GetPCLK1Freq>
 8003e58:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	469a      	mov	sl, r3
 8003e5e:	f04f 0b00 	mov.w	fp, #0
 8003e62:	46d0      	mov	r8, sl
 8003e64:	46d9      	mov	r9, fp
 8003e66:	eb18 0308 	adds.w	r3, r8, r8
 8003e6a:	eb49 0409 	adc.w	r4, r9, r9
 8003e6e:	4698      	mov	r8, r3
 8003e70:	46a1      	mov	r9, r4
 8003e72:	eb18 080a 	adds.w	r8, r8, sl
 8003e76:	eb49 090b 	adc.w	r9, r9, fp
 8003e7a:	f04f 0100 	mov.w	r1, #0
 8003e7e:	f04f 0200 	mov.w	r2, #0
 8003e82:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003e86:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003e8a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003e8e:	4688      	mov	r8, r1
 8003e90:	4691      	mov	r9, r2
 8003e92:	eb1a 0508 	adds.w	r5, sl, r8
 8003e96:	eb4b 0609 	adc.w	r6, fp, r9
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	f04f 0200 	mov.w	r2, #0
 8003ea4:	f04f 0300 	mov.w	r3, #0
 8003ea8:	f04f 0400 	mov.w	r4, #0
 8003eac:	0094      	lsls	r4, r2, #2
 8003eae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003eb2:	008b      	lsls	r3, r1, #2
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	4623      	mov	r3, r4
 8003eb8:	4628      	mov	r0, r5
 8003eba:	4631      	mov	r1, r6
 8003ebc:	f7fc f98c 	bl	80001d8 <__aeabi_uldivmod>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	460c      	mov	r4, r1
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	4b50      	ldr	r3, [pc, #320]	; (8004008 <UART_SetConfig+0x6f4>)
 8003ec8:	fba3 2302 	umull	r2, r3, r3, r2
 8003ecc:	095b      	lsrs	r3, r3, #5
 8003ece:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	469b      	mov	fp, r3
 8003ed6:	f04f 0c00 	mov.w	ip, #0
 8003eda:	46d9      	mov	r9, fp
 8003edc:	46e2      	mov	sl, ip
 8003ede:	eb19 0309 	adds.w	r3, r9, r9
 8003ee2:	eb4a 040a 	adc.w	r4, sl, sl
 8003ee6:	4699      	mov	r9, r3
 8003ee8:	46a2      	mov	sl, r4
 8003eea:	eb19 090b 	adds.w	r9, r9, fp
 8003eee:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003ef2:	f04f 0100 	mov.w	r1, #0
 8003ef6:	f04f 0200 	mov.w	r2, #0
 8003efa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003efe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f02:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f06:	4689      	mov	r9, r1
 8003f08:	4692      	mov	sl, r2
 8003f0a:	eb1b 0509 	adds.w	r5, fp, r9
 8003f0e:	eb4c 060a 	adc.w	r6, ip, sl
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	4619      	mov	r1, r3
 8003f18:	f04f 0200 	mov.w	r2, #0
 8003f1c:	f04f 0300 	mov.w	r3, #0
 8003f20:	f04f 0400 	mov.w	r4, #0
 8003f24:	0094      	lsls	r4, r2, #2
 8003f26:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f2a:	008b      	lsls	r3, r1, #2
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	4623      	mov	r3, r4
 8003f30:	4628      	mov	r0, r5
 8003f32:	4631      	mov	r1, r6
 8003f34:	f7fc f950 	bl	80001d8 <__aeabi_uldivmod>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	460c      	mov	r4, r1
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	4b32      	ldr	r3, [pc, #200]	; (8004008 <UART_SetConfig+0x6f4>)
 8003f40:	fba3 1302 	umull	r1, r3, r3, r2
 8003f44:	095b      	lsrs	r3, r3, #5
 8003f46:	2164      	movs	r1, #100	; 0x64
 8003f48:	fb01 f303 	mul.w	r3, r1, r3
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	011b      	lsls	r3, r3, #4
 8003f50:	3332      	adds	r3, #50	; 0x32
 8003f52:	4a2d      	ldr	r2, [pc, #180]	; (8004008 <UART_SetConfig+0x6f4>)
 8003f54:	fba2 2303 	umull	r2, r3, r2, r3
 8003f58:	095b      	lsrs	r3, r3, #5
 8003f5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f5e:	4498      	add	r8, r3
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	469b      	mov	fp, r3
 8003f64:	f04f 0c00 	mov.w	ip, #0
 8003f68:	46d9      	mov	r9, fp
 8003f6a:	46e2      	mov	sl, ip
 8003f6c:	eb19 0309 	adds.w	r3, r9, r9
 8003f70:	eb4a 040a 	adc.w	r4, sl, sl
 8003f74:	4699      	mov	r9, r3
 8003f76:	46a2      	mov	sl, r4
 8003f78:	eb19 090b 	adds.w	r9, r9, fp
 8003f7c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003f80:	f04f 0100 	mov.w	r1, #0
 8003f84:	f04f 0200 	mov.w	r2, #0
 8003f88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f8c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f90:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f94:	4689      	mov	r9, r1
 8003f96:	4692      	mov	sl, r2
 8003f98:	eb1b 0509 	adds.w	r5, fp, r9
 8003f9c:	eb4c 060a 	adc.w	r6, ip, sl
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	f04f 0200 	mov.w	r2, #0
 8003faa:	f04f 0300 	mov.w	r3, #0
 8003fae:	f04f 0400 	mov.w	r4, #0
 8003fb2:	0094      	lsls	r4, r2, #2
 8003fb4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003fb8:	008b      	lsls	r3, r1, #2
 8003fba:	461a      	mov	r2, r3
 8003fbc:	4623      	mov	r3, r4
 8003fbe:	4628      	mov	r0, r5
 8003fc0:	4631      	mov	r1, r6
 8003fc2:	f7fc f909 	bl	80001d8 <__aeabi_uldivmod>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	460c      	mov	r4, r1
 8003fca:	461a      	mov	r2, r3
 8003fcc:	4b0e      	ldr	r3, [pc, #56]	; (8004008 <UART_SetConfig+0x6f4>)
 8003fce:	fba3 1302 	umull	r1, r3, r3, r2
 8003fd2:	095b      	lsrs	r3, r3, #5
 8003fd4:	2164      	movs	r1, #100	; 0x64
 8003fd6:	fb01 f303 	mul.w	r3, r1, r3
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	011b      	lsls	r3, r3, #4
 8003fde:	3332      	adds	r3, #50	; 0x32
 8003fe0:	4a09      	ldr	r2, [pc, #36]	; (8004008 <UART_SetConfig+0x6f4>)
 8003fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe6:	095b      	lsrs	r3, r3, #5
 8003fe8:	f003 020f 	and.w	r2, r3, #15
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4442      	add	r2, r8
 8003ff2:	609a      	str	r2, [r3, #8]
}
 8003ff4:	e7ff      	b.n	8003ff6 <UART_SetConfig+0x6e2>
 8003ff6:	bf00      	nop
 8003ff8:	3714      	adds	r7, #20
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004000:	40011000 	.word	0x40011000
 8004004:	40011400 	.word	0x40011400
 8004008:	51eb851f 	.word	0x51eb851f

0800400c <COMMAND_LINE_Receive>:
uint8_t u8_cnt_elt_uart_buf = 4;



void COMMAND_LINE_Receive(uint8_t u8_uart_rx)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	4603      	mov	r3, r0
 8004014:	71fb      	strb	r3, [r7, #7]

	if (u8_uart_rx =='\n'){
 8004016:	79fb      	ldrb	r3, [r7, #7]
 8004018:	2b0a      	cmp	r3, #10
 800401a:	d12b      	bne.n	8004074 <COMMAND_LINE_Receive+0x68>
		led_matrix_data.gu8_temp_cnt_elt_uart_buf = u8_cnt_elt_uart_buf;
 800401c:	4b1d      	ldr	r3, [pc, #116]	; (8004094 <COMMAND_LINE_Receive+0x88>)
 800401e:	781a      	ldrb	r2, [r3, #0]
 8004020:	4b1d      	ldr	r3, [pc, #116]	; (8004098 <COMMAND_LINE_Receive+0x8c>)
 8004022:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
		for (int i=0; i<led_matrix_data.gu8_temp_cnt_elt_uart_buf; i++){
 8004026:	2300      	movs	r3, #0
 8004028:	60fb      	str	r3, [r7, #12]
 800402a:	e00c      	b.n	8004046 <COMMAND_LINE_Receive+0x3a>
			led_matrix_data.gau8_temp_uart_buf[i] = au8_uart_buf[i];
 800402c:	4a1b      	ldr	r2, [pc, #108]	; (800409c <COMMAND_LINE_Receive+0x90>)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	4413      	add	r3, r2
 8004032:	7819      	ldrb	r1, [r3, #0]
 8004034:	4a18      	ldr	r2, [pc, #96]	; (8004098 <COMMAND_LINE_Receive+0x8c>)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	4413      	add	r3, r2
 800403a:	3314      	adds	r3, #20
 800403c:	460a      	mov	r2, r1
 800403e:	701a      	strb	r2, [r3, #0]
		for (int i=0; i<led_matrix_data.gu8_temp_cnt_elt_uart_buf; i++){
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	3301      	adds	r3, #1
 8004044:	60fb      	str	r3, [r7, #12]
 8004046:	4b14      	ldr	r3, [pc, #80]	; (8004098 <COMMAND_LINE_Receive+0x8c>)
 8004048:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 800404c:	461a      	mov	r2, r3
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	4293      	cmp	r3, r2
 8004052:	dbeb      	blt.n	800402c <COMMAND_LINE_Receive+0x20>
		}
		memset(led_matrix_data.gau8_temp_uart_buf,0x00,led_matrix_data.u8_num_led_matrix);	//create whitespace
 8004054:	4b10      	ldr	r3, [pc, #64]	; (8004098 <COMMAND_LINE_Receive+0x8c>)
 8004056:	7a9b      	ldrb	r3, [r3, #10]
 8004058:	461a      	mov	r2, r3
 800405a:	2100      	movs	r1, #0
 800405c:	4810      	ldr	r0, [pc, #64]	; (80040a0 <COMMAND_LINE_Receive+0x94>)
 800405e:	f000 fb5f 	bl	8004720 <memset>
		u8_cnt_elt_uart_buf = led_matrix_data.u8_num_led_matrix;
 8004062:	4b0d      	ldr	r3, [pc, #52]	; (8004098 <COMMAND_LINE_Receive+0x8c>)
 8004064:	7a9a      	ldrb	r2, [r3, #10]
 8004066:	4b0b      	ldr	r3, [pc, #44]	; (8004094 <COMMAND_LINE_Receive+0x88>)
 8004068:	701a      	strb	r2, [r3, #0]
		led_matrix_data.gu8_cnt_display = 0;
 800406a:	4b0b      	ldr	r3, [pc, #44]	; (8004098 <COMMAND_LINE_Receive+0x8c>)
 800406c:	2200      	movs	r2, #0
 800406e:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
	else{
		au8_uart_buf[u8_cnt_elt_uart_buf] = u8_uart_rx;
		u8_cnt_elt_uart_buf++;

	}
}
 8004072:	e00b      	b.n	800408c <COMMAND_LINE_Receive+0x80>
		au8_uart_buf[u8_cnt_elt_uart_buf] = u8_uart_rx;
 8004074:	4b07      	ldr	r3, [pc, #28]	; (8004094 <COMMAND_LINE_Receive+0x88>)
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	4619      	mov	r1, r3
 800407a:	4a08      	ldr	r2, [pc, #32]	; (800409c <COMMAND_LINE_Receive+0x90>)
 800407c:	79fb      	ldrb	r3, [r7, #7]
 800407e:	5453      	strb	r3, [r2, r1]
		u8_cnt_elt_uart_buf++;
 8004080:	4b04      	ldr	r3, [pc, #16]	; (8004094 <COMMAND_LINE_Receive+0x88>)
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	3301      	adds	r3, #1
 8004086:	b2da      	uxtb	r2, r3
 8004088:	4b02      	ldr	r3, [pc, #8]	; (8004094 <COMMAND_LINE_Receive+0x88>)
 800408a:	701a      	strb	r2, [r3, #0]
}
 800408c:	bf00      	nop
 800408e:	3710      	adds	r7, #16
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}
 8004094:	20000009 	.word	0x20000009
 8004098:	20000224 	.word	0x20000224
 800409c:	2000002c 	.word	0x2000002c
 80040a0:	20000238 	.word	0x20000238

080040a4 <PUSH_OUTPUT_Buf>:
/*
 * @brief	Push data to led matrix module
 * @param 	led_matrix_data		Pointer to LED_MATRX_DATA_t structure
 */
void PUSH_OUTPUT_Buf(LED_MATRIX_DATA_t *led_matrix_data)
{
 80040a4:	b5b0      	push	{r4, r5, r7, lr}
 80040a6:	b086      	sub	sp, #24
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
	for (int i = 0; i<8; i++){
 80040ac:	2300      	movs	r3, #0
 80040ae:	617b      	str	r3, [r7, #20]
 80040b0:	e05e      	b.n	8004170 <PUSH_OUTPUT_Buf+0xcc>
 80040b2:	466b      	mov	r3, sp
 80040b4:	461d      	mov	r5, r3
		uint8_t u8_temp_data[2*led_matrix_data->u8_num_led_matrix];
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	7a9b      	ldrb	r3, [r3, #10]
 80040ba:	0058      	lsls	r0, r3, #1
 80040bc:	1e43      	subs	r3, r0, #1
 80040be:	60fb      	str	r3, [r7, #12]
 80040c0:	4603      	mov	r3, r0
 80040c2:	4619      	mov	r1, r3
 80040c4:	f04f 0200 	mov.w	r2, #0
 80040c8:	f04f 0300 	mov.w	r3, #0
 80040cc:	f04f 0400 	mov.w	r4, #0
 80040d0:	00d4      	lsls	r4, r2, #3
 80040d2:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80040d6:	00cb      	lsls	r3, r1, #3
 80040d8:	4603      	mov	r3, r0
 80040da:	4619      	mov	r1, r3
 80040dc:	f04f 0200 	mov.w	r2, #0
 80040e0:	f04f 0300 	mov.w	r3, #0
 80040e4:	f04f 0400 	mov.w	r4, #0
 80040e8:	00d4      	lsls	r4, r2, #3
 80040ea:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80040ee:	00cb      	lsls	r3, r1, #3
 80040f0:	4603      	mov	r3, r0
 80040f2:	3307      	adds	r3, #7
 80040f4:	08db      	lsrs	r3, r3, #3
 80040f6:	00db      	lsls	r3, r3, #3
 80040f8:	ebad 0d03 	sub.w	sp, sp, r3
 80040fc:	466b      	mov	r3, sp
 80040fe:	3300      	adds	r3, #0
 8004100:	60bb      	str	r3, [r7, #8]
		for(int j = 0; j< led_matrix_data->u8_num_led_matrix;j++){
 8004102:	2300      	movs	r3, #0
 8004104:	613b      	str	r3, [r7, #16]
 8004106:	e01e      	b.n	8004146 <PUSH_OUTPUT_Buf+0xa2>
			u8_temp_data[2*j] = i+1;
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	b2da      	uxtb	r2, r3
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	005b      	lsls	r3, r3, #1
 8004110:	3201      	adds	r2, #1
 8004112:	b2d1      	uxtb	r1, r2
 8004114:	68ba      	ldr	r2, [r7, #8]
 8004116:	54d1      	strb	r1, [r2, r3]
			u8_temp_data[2*j+1] = led_matrix_data->gau8_output_buf[led_matrix_data->u8_num_led_matrix-1-j][7-i];
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	7a9b      	ldrb	r3, [r3, #10]
 800411c:	1e5a      	subs	r2, r3, #1
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	1ad1      	subs	r1, r2, r3
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	f1c3 0207 	rsb	r2, r3, #7
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	005b      	lsls	r3, r3, #1
 800412c:	3301      	adds	r3, #1
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	00c9      	lsls	r1, r1, #3
 8004132:	4401      	add	r1, r0
 8004134:	440a      	add	r2, r1
 8004136:	f502 728a 	add.w	r2, r2, #276	; 0x114
 800413a:	7811      	ldrb	r1, [r2, #0]
 800413c:	68ba      	ldr	r2, [r7, #8]
 800413e:	54d1      	strb	r1, [r2, r3]
		for(int j = 0; j< led_matrix_data->u8_num_led_matrix;j++){
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	3301      	adds	r3, #1
 8004144:	613b      	str	r3, [r7, #16]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	7a9b      	ldrb	r3, [r3, #10]
 800414a:	461a      	mov	r2, r3
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	4293      	cmp	r3, r2
 8004150:	dbda      	blt.n	8004108 <PUSH_OUTPUT_Buf+0x64>
		}
		HAL_SPI_Transmit_DMA(led_matrix_data->hspi, u8_temp_data, 2*led_matrix_data->u8_num_led_matrix);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6818      	ldr	r0, [r3, #0]
 8004156:	68b9      	ldr	r1, [r7, #8]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	7a9b      	ldrb	r3, [r3, #10]
 800415c:	b29b      	uxth	r3, r3
 800415e:	005b      	lsls	r3, r3, #1
 8004160:	b29b      	uxth	r3, r3
 8004162:	461a      	mov	r2, r3
 8004164:	f7fe f950 	bl	8002408 <HAL_SPI_Transmit_DMA>
 8004168:	46ad      	mov	sp, r5
	for (int i = 0; i<8; i++){
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	3301      	adds	r3, #1
 800416e:	617b      	str	r3, [r7, #20]
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	2b07      	cmp	r3, #7
 8004174:	dd9d      	ble.n	80040b2 <PUSH_OUTPUT_Buf+0xe>
	}
}
 8004176:	bf00      	nop
 8004178:	3718      	adds	r7, #24
 800417a:	46bd      	mov	sp, r7
 800417c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004180 <UPDATE_OUTPUT_Buf>:
/*
 * @brief	Update output_data_buffer value to create effect
 * @param 	led_matrix_data		Pointer to LED_MATRX_DATA_t structure
 */
void UPDATE_OUTPUT_Buf(LED_MATRIX_DATA_t *led_matrix_data, uint8_t *gu8_flag_cplt_update)
{
 8004180:	b480      	push	{r7}
 8004182:	b08b      	sub	sp, #44	; 0x2c
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
	uint8_t u8_current_char;		//contains the character being updated for the output_buf array
	*gu8_flag_cplt_update = 1;
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	2201      	movs	r2, #1
 800418e:	701a      	strb	r2, [r3, #0]
	if(led_matrix_data->operation_param.display_direction == LED_MATRIX_DISPLAY_FORWARD)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	7c1b      	ldrb	r3, [r3, #16]
 8004194:	2b00      	cmp	r3, #0
 8004196:	f040 80ba 	bne.w	800430e <UPDATE_OUTPUT_Buf+0x18e>
	{
	// Shift left data of all led matrix, except 1st led matrix
		for (int i=0; i<led_matrix_data->u8_num_led_matrix-1; i++){
 800419a:	2300      	movs	r3, #0
 800419c:	623b      	str	r3, [r7, #32]
 800419e:	e043      	b.n	8004228 <UPDATE_OUTPUT_Buf+0xa8>
			for (int j=0; j<8; j++){
 80041a0:	2300      	movs	r3, #0
 80041a2:	61fb      	str	r3, [r7, #28]
 80041a4:	e03a      	b.n	800421c <UPDATE_OUTPUT_Buf+0x9c>
				led_matrix_data->gau8_output_buf[i][j] >>= 1;
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	6a3b      	ldr	r3, [r7, #32]
 80041aa:	00db      	lsls	r3, r3, #3
 80041ac:	441a      	add	r2, r3
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	4413      	add	r3, r2
 80041b2:	f503 738a 	add.w	r3, r3, #276	; 0x114
 80041b6:	781b      	ldrb	r3, [r3, #0]
 80041b8:	085b      	lsrs	r3, r3, #1
 80041ba:	b2d9      	uxtb	r1, r3
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	6a3b      	ldr	r3, [r7, #32]
 80041c0:	00db      	lsls	r3, r3, #3
 80041c2:	441a      	add	r2, r3
 80041c4:	69fb      	ldr	r3, [r7, #28]
 80041c6:	4413      	add	r3, r2
 80041c8:	f503 738a 	add.w	r3, r3, #276	; 0x114
 80041cc:	460a      	mov	r2, r1
 80041ce:	701a      	strb	r2, [r3, #0]
				led_matrix_data->gau8_output_buf[i][j] |= (led_matrix_data->gau8_output_buf[i+1][j] << 7);
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	6a3b      	ldr	r3, [r7, #32]
 80041d4:	00db      	lsls	r3, r3, #3
 80041d6:	441a      	add	r2, r3
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	4413      	add	r3, r2
 80041dc:	f503 738a 	add.w	r3, r3, #276	; 0x114
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	b25a      	sxtb	r2, r3
 80041e4:	6a3b      	ldr	r3, [r7, #32]
 80041e6:	3301      	adds	r3, #1
 80041e8:	6879      	ldr	r1, [r7, #4]
 80041ea:	00db      	lsls	r3, r3, #3
 80041ec:	4419      	add	r1, r3
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	440b      	add	r3, r1
 80041f2:	f503 738a 	add.w	r3, r3, #276	; 0x114
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	01db      	lsls	r3, r3, #7
 80041fa:	b25b      	sxtb	r3, r3
 80041fc:	4313      	orrs	r3, r2
 80041fe:	b25b      	sxtb	r3, r3
 8004200:	b2d9      	uxtb	r1, r3
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	6a3b      	ldr	r3, [r7, #32]
 8004206:	00db      	lsls	r3, r3, #3
 8004208:	441a      	add	r2, r3
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	4413      	add	r3, r2
 800420e:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8004212:	460a      	mov	r2, r1
 8004214:	701a      	strb	r2, [r3, #0]
			for (int j=0; j<8; j++){
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	3301      	adds	r3, #1
 800421a:	61fb      	str	r3, [r7, #28]
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	2b07      	cmp	r3, #7
 8004220:	ddc1      	ble.n	80041a6 <UPDATE_OUTPUT_Buf+0x26>
		for (int i=0; i<led_matrix_data->u8_num_led_matrix-1; i++){
 8004222:	6a3b      	ldr	r3, [r7, #32]
 8004224:	3301      	adds	r3, #1
 8004226:	623b      	str	r3, [r7, #32]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	7a9b      	ldrb	r3, [r3, #10]
 800422c:	3b01      	subs	r3, #1
 800422e:	6a3a      	ldr	r2, [r7, #32]
 8004230:	429a      	cmp	r2, r3
 8004232:	dbb5      	blt.n	80041a0 <UPDATE_OUTPUT_Buf+0x20>
			}
		}
	// Get current character displaying in 1st led matrix
		if ((led_matrix_data->gu8_cnt_display/8) < led_matrix_data-> gu8_temp_cnt_elt_uart_buf ){
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f893 3134 	ldrb.w	r3, [r3, #308]	; 0x134
 800423a:	08db      	lsrs	r3, r3, #3
 800423c:	b2da      	uxtb	r2, r3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8004244:	429a      	cmp	r2, r3
 8004246:	d20b      	bcs.n	8004260 <UPDATE_OUTPUT_Buf+0xe0>
			 u8_current_char = led_matrix_data->gau8_temp_uart_buf[(led_matrix_data->gu8_cnt_display/8)];
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f893 3134 	ldrb.w	r3, [r3, #308]	; 0x134
 800424e:	08db      	lsrs	r3, r3, #3
 8004250:	b2db      	uxtb	r3, r3
 8004252:	461a      	mov	r2, r3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	4413      	add	r3, r2
 8004258:	7d1b      	ldrb	r3, [r3, #20]
 800425a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800425e:	e003      	b.n	8004268 <UPDATE_OUTPUT_Buf+0xe8>
		} else led_matrix_data->gu8_cnt_display = 0;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
	// Update data for 1st led matrix
		for (int i=0; i<8; i++){
 8004268:	2300      	movs	r3, #0
 800426a:	61bb      	str	r3, [r7, #24]
 800426c:	e04b      	b.n	8004306 <UPDATE_OUTPUT_Buf+0x186>
			led_matrix_data->gau8_output_buf[led_matrix_data->u8_num_led_matrix-1][i] >>= 1;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	7a9b      	ldrb	r3, [r3, #10]
 8004272:	3b01      	subs	r3, #1
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	00db      	lsls	r3, r3, #3
 8004278:	441a      	add	r2, r3
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	4413      	add	r3, r2
 800427e:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8004282:	781a      	ldrb	r2, [r3, #0]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	7a9b      	ldrb	r3, [r3, #10]
 8004288:	3b01      	subs	r3, #1
 800428a:	0852      	lsrs	r2, r2, #1
 800428c:	b2d1      	uxtb	r1, r2
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	00db      	lsls	r3, r3, #3
 8004292:	441a      	add	r2, r3
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	4413      	add	r3, r2
 8004298:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800429c:	460a      	mov	r2, r1
 800429e:	701a      	strb	r2, [r3, #0]
			led_matrix_data->gau8_output_buf[led_matrix_data->u8_num_led_matrix-1][i] |= 0x80 & (FONT[u8_current_char][i] << (7-(led_matrix_data->gu8_cnt_display%8)));
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	7a9b      	ldrb	r3, [r3, #10]
 80042a4:	3b01      	subs	r3, #1
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	00db      	lsls	r3, r3, #3
 80042aa:	441a      	add	r2, r3
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	4413      	add	r3, r2
 80042b0:	f503 738a 	add.w	r3, r3, #276	; 0x114
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	b25a      	sxtb	r2, r3
 80042b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80042bc:	4978      	ldr	r1, [pc, #480]	; (80044a0 <UPDATE_OUTPUT_Buf+0x320>)
 80042be:	00db      	lsls	r3, r3, #3
 80042c0:	4419      	add	r1, r3
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	440b      	add	r3, r1
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	4619      	mov	r1, r3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f893 3134 	ldrb.w	r3, [r3, #308]	; 0x134
 80042d0:	43db      	mvns	r3, r3
 80042d2:	f003 0307 	and.w	r3, r3, #7
 80042d6:	fa01 f303 	lsl.w	r3, r1, r3
 80042da:	b25b      	sxtb	r3, r3
 80042dc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80042e0:	b25b      	sxtb	r3, r3
 80042e2:	4313      	orrs	r3, r2
 80042e4:	b25a      	sxtb	r2, r3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	7a9b      	ldrb	r3, [r3, #10]
 80042ea:	3b01      	subs	r3, #1
 80042ec:	b2d1      	uxtb	r1, r2
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	00db      	lsls	r3, r3, #3
 80042f2:	441a      	add	r2, r3
 80042f4:	69bb      	ldr	r3, [r7, #24]
 80042f6:	4413      	add	r3, r2
 80042f8:	f503 738a 	add.w	r3, r3, #276	; 0x114
 80042fc:	460a      	mov	r2, r1
 80042fe:	701a      	strb	r2, [r3, #0]
		for (int i=0; i<8; i++){
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	3301      	adds	r3, #1
 8004304:	61bb      	str	r3, [r7, #24]
 8004306:	69bb      	ldr	r3, [r7, #24]
 8004308:	2b07      	cmp	r3, #7
 800430a:	ddb0      	ble.n	800426e <UPDATE_OUTPUT_Buf+0xee>
 800430c:	e0b9      	b.n	8004482 <UPDATE_OUTPUT_Buf+0x302>
		}
	} else
	{
	// Shift right data of all led matrix, except last led matrix
		for (int i=0; i<led_matrix_data->u8_num_led_matrix-1; i++){
 800430e:	2300      	movs	r3, #0
 8004310:	617b      	str	r3, [r7, #20]
 8004312:	e054      	b.n	80043be <UPDATE_OUTPUT_Buf+0x23e>
			for (int j=0; j<8; j++){
 8004314:	2300      	movs	r3, #0
 8004316:	613b      	str	r3, [r7, #16]
 8004318:	e04b      	b.n	80043b2 <UPDATE_OUTPUT_Buf+0x232>
				led_matrix_data->gau8_output_buf[led_matrix_data->u8_num_led_matrix-1-i][j] <<= 1;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	7a9b      	ldrb	r3, [r3, #10]
 800431e:	1e5a      	subs	r2, r3, #1
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	00db      	lsls	r3, r3, #3
 8004328:	441a      	add	r2, r3
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	4413      	add	r3, r2
 800432e:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8004332:	781a      	ldrb	r2, [r3, #0]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	7a9b      	ldrb	r3, [r3, #10]
 8004338:	1e59      	subs	r1, r3, #1
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	1acb      	subs	r3, r1, r3
 800433e:	0052      	lsls	r2, r2, #1
 8004340:	b2d1      	uxtb	r1, r2
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	00db      	lsls	r3, r3, #3
 8004346:	441a      	add	r2, r3
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	4413      	add	r3, r2
 800434c:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8004350:	460a      	mov	r2, r1
 8004352:	701a      	strb	r2, [r3, #0]
				led_matrix_data->gau8_output_buf[led_matrix_data->u8_num_led_matrix-1-i][j] |= (led_matrix_data->gau8_output_buf[led_matrix_data->u8_num_led_matrix-2-i][j] >> 7);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	7a9b      	ldrb	r3, [r3, #10]
 8004358:	1e5a      	subs	r2, r3, #1
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	00db      	lsls	r3, r3, #3
 8004362:	441a      	add	r2, r3
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	4413      	add	r3, r2
 8004368:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800436c:	7819      	ldrb	r1, [r3, #0]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	7a9b      	ldrb	r3, [r3, #10]
 8004372:	1e9a      	subs	r2, r3, #2
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	00db      	lsls	r3, r3, #3
 800437c:	441a      	add	r2, r3
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	4413      	add	r3, r2
 8004382:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	09db      	lsrs	r3, r3, #7
 800438a:	b2da      	uxtb	r2, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	7a9b      	ldrb	r3, [r3, #10]
 8004390:	1e58      	subs	r0, r3, #1
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	1ac3      	subs	r3, r0, r3
 8004396:	430a      	orrs	r2, r1
 8004398:	b2d1      	uxtb	r1, r2
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	00db      	lsls	r3, r3, #3
 800439e:	441a      	add	r2, r3
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	4413      	add	r3, r2
 80043a4:	f503 738a 	add.w	r3, r3, #276	; 0x114
 80043a8:	460a      	mov	r2, r1
 80043aa:	701a      	strb	r2, [r3, #0]
			for (int j=0; j<8; j++){
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	3301      	adds	r3, #1
 80043b0:	613b      	str	r3, [r7, #16]
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	2b07      	cmp	r3, #7
 80043b6:	ddb0      	ble.n	800431a <UPDATE_OUTPUT_Buf+0x19a>
		for (int i=0; i<led_matrix_data->u8_num_led_matrix-1; i++){
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	3301      	adds	r3, #1
 80043bc:	617b      	str	r3, [r7, #20]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	7a9b      	ldrb	r3, [r3, #10]
 80043c2:	3b01      	subs	r3, #1
 80043c4:	697a      	ldr	r2, [r7, #20]
 80043c6:	429a      	cmp	r2, r3
 80043c8:	dba4      	blt.n	8004314 <UPDATE_OUTPUT_Buf+0x194>
			}
		}
	// Get current character displaying in 1st led matrix
		if ((led_matrix_data->gu8_cnt_display/8) < led_matrix_data-> gu8_temp_cnt_elt_uart_buf ){
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f893 3134 	ldrb.w	r3, [r3, #308]	; 0x134
 80043d0:	08db      	lsrs	r3, r3, #3
 80043d2:	b2da      	uxtb	r2, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 80043da:	429a      	cmp	r2, r3
 80043dc:	d20f      	bcs.n	80043fe <UPDATE_OUTPUT_Buf+0x27e>
			 u8_current_char = led_matrix_data->gau8_temp_uart_buf[led_matrix_data-> gu8_temp_cnt_elt_uart_buf-1-(led_matrix_data->gu8_cnt_display/8)];
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 80043e4:	3b01      	subs	r3, #1
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	f892 2134 	ldrb.w	r2, [r2, #308]	; 0x134
 80043ec:	08d2      	lsrs	r2, r2, #3
 80043ee:	b2d2      	uxtb	r2, r2
 80043f0:	1a9b      	subs	r3, r3, r2
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	4413      	add	r3, r2
 80043f6:	7d1b      	ldrb	r3, [r3, #20]
 80043f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80043fc:	e003      	b.n	8004406 <UPDATE_OUTPUT_Buf+0x286>
		} else led_matrix_data->gu8_cnt_display = 0;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
	// Update data for last led matrix
		for (int i=0; i<8; i++){
 8004406:	2300      	movs	r3, #0
 8004408:	60fb      	str	r3, [r7, #12]
 800440a:	e037      	b.n	800447c <UPDATE_OUTPUT_Buf+0x2fc>
			led_matrix_data->gau8_output_buf[0][i] <<= 1;
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	4413      	add	r3, r2
 8004412:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	005b      	lsls	r3, r3, #1
 800441a:	b2d9      	uxtb	r1, r3
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	4413      	add	r3, r2
 8004422:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8004426:	460a      	mov	r2, r1
 8004428:	701a      	strb	r2, [r3, #0]
			led_matrix_data->gau8_output_buf[0][i] |= 0x01 & (FONT[u8_current_char][i] >> (7-(led_matrix_data->gu8_cnt_display%8)));
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	4413      	add	r3, r2
 8004430:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	b25a      	sxtb	r2, r3
 8004438:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800443c:	4918      	ldr	r1, [pc, #96]	; (80044a0 <UPDATE_OUTPUT_Buf+0x320>)
 800443e:	00db      	lsls	r3, r3, #3
 8004440:	4419      	add	r1, r3
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	440b      	add	r3, r1
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	4619      	mov	r1, r3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f893 3134 	ldrb.w	r3, [r3, #308]	; 0x134
 8004450:	43db      	mvns	r3, r3
 8004452:	f003 0307 	and.w	r3, r3, #7
 8004456:	fa41 f303 	asr.w	r3, r1, r3
 800445a:	b25b      	sxtb	r3, r3
 800445c:	f003 0301 	and.w	r3, r3, #1
 8004460:	b25b      	sxtb	r3, r3
 8004462:	4313      	orrs	r3, r2
 8004464:	b25b      	sxtb	r3, r3
 8004466:	b2d9      	uxtb	r1, r3
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	4413      	add	r3, r2
 800446e:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8004472:	460a      	mov	r2, r1
 8004474:	701a      	strb	r2, [r3, #0]
		for (int i=0; i<8; i++){
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	3301      	adds	r3, #1
 800447a:	60fb      	str	r3, [r7, #12]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2b07      	cmp	r3, #7
 8004480:	ddc4      	ble.n	800440c <UPDATE_OUTPUT_Buf+0x28c>
		}
	}
	led_matrix_data->gu8_cnt_display++;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f893 3134 	ldrb.w	r3, [r3, #308]	; 0x134
 8004488:	3301      	adds	r3, #1
 800448a:	b2da      	uxtb	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
}
 8004492:	bf00      	nop
 8004494:	372c      	adds	r7, #44	; 0x2c
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr
 800449e:	bf00      	nop
 80044a0:	08004768 	.word	0x08004768

080044a4 <LED_MATRIX_SPI_Handle>:
 * @brief	Set and clear logic of load pin to latch data
 * @note	Call this in SPI receive complete callback interrupt function
 * @param 	led_matrix_data		Pointer to LED_MATRX_DATA_t structure
 */
void LED_MATRIX_SPI_Handle(LED_MATRIX_DATA_t *led_matrix_data, SPI_HandleTypeDef *hspi)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b082      	sub	sp, #8
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
	if(led_matrix_data->hspi == hspi)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	683a      	ldr	r2, [r7, #0]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d10b      	bne.n	80044d0 <LED_MATRIX_SPI_Handle+0x2c>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 80044b8:	2201      	movs	r2, #1
 80044ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80044be:	4806      	ldr	r0, [pc, #24]	; (80044d8 <LED_MATRIX_SPI_Handle+0x34>)
 80044c0:	f7fd fae8 	bl	8001a94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 80044c4:	2200      	movs	r2, #0
 80044c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80044ca:	4803      	ldr	r0, [pc, #12]	; (80044d8 <LED_MATRIX_SPI_Handle+0x34>)
 80044cc:	f7fd fae2 	bl	8001a94 <HAL_GPIO_WritePin>
	}
}
 80044d0:	bf00      	nop
 80044d2:	3708      	adds	r7, #8
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	40020400 	.word	0x40020400

080044dc <LED_MATRIX_Init>:
 * @param	load_pin			Pin number of load pin
 * @param	num_led_matrix		Number of led matrix used in module
 * @param	speed_run_text
 */
void LED_MATRIX_Init(LED_MATRIX_DATA_t *led_matrix_data, SPI_HandleTypeDef *hspi, GPIO_TypeDef *load_pin_port, uint16_t u16_load_pin, uint8_t  u8_num_led_matrix)
{
 80044dc:	b5b0      	push	{r4, r5, r7, lr}
 80044de:	b08e      	sub	sp, #56	; 0x38
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	60f8      	str	r0, [r7, #12]
 80044e4:	60b9      	str	r1, [r7, #8]
 80044e6:	607a      	str	r2, [r7, #4]
 80044e8:	807b      	strh	r3, [r7, #2]
 80044ea:	466b      	mov	r3, sp
 80044ec:	461d      	mov	r5, r3
	//Initialize data
	led_matrix_data->hspi = hspi;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	68ba      	ldr	r2, [r7, #8]
 80044f2:	601a      	str	r2, [r3, #0]
	led_matrix_data->load_pin_port = load_pin_port;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	605a      	str	r2, [r3, #4]
	led_matrix_data->u16_load_pin = u16_load_pin;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	887a      	ldrh	r2, [r7, #2]
 80044fe:	811a      	strh	r2, [r3, #8]
	led_matrix_data->u8_num_led_matrix = u8_num_led_matrix;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 8004506:	729a      	strb	r2, [r3, #10]
	led_matrix_data->operation_param.u32_speed_run_text = 100;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2264      	movs	r2, #100	; 0x64
 800450c:	60da      	str	r2, [r3, #12]
	led_matrix_data->operation_param.display_direction = LED_MATRIX_DISPLAY_FORWARD;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2200      	movs	r2, #0
 8004512:	741a      	strb	r2, [r3, #16]
	led_matrix_data->gu8_temp_cnt_elt_uart_buf = u8_num_led_matrix;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 800451a:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
	led_matrix_data->gu8_cnt_display = 0;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2200      	movs	r2, #0
 8004522:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134

	// Declare array use for transmit set up data
	uint8_t temp_data[u8_num_led_matrix * 2];
 8004526:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800452a:	0058      	lsls	r0, r3, #1
 800452c:	1e43      	subs	r3, r0, #1
 800452e:	61bb      	str	r3, [r7, #24]
 8004530:	4603      	mov	r3, r0
 8004532:	4619      	mov	r1, r3
 8004534:	f04f 0200 	mov.w	r2, #0
 8004538:	f04f 0300 	mov.w	r3, #0
 800453c:	f04f 0400 	mov.w	r4, #0
 8004540:	00d4      	lsls	r4, r2, #3
 8004542:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8004546:	00cb      	lsls	r3, r1, #3
 8004548:	4603      	mov	r3, r0
 800454a:	4619      	mov	r1, r3
 800454c:	f04f 0200 	mov.w	r2, #0
 8004550:	f04f 0300 	mov.w	r3, #0
 8004554:	f04f 0400 	mov.w	r4, #0
 8004558:	00d4      	lsls	r4, r2, #3
 800455a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800455e:	00cb      	lsls	r3, r1, #3
 8004560:	4603      	mov	r3, r0
 8004562:	3307      	adds	r3, #7
 8004564:	08db      	lsrs	r3, r3, #3
 8004566:	00db      	lsls	r3, r3, #3
 8004568:	ebad 0d03 	sub.w	sp, sp, r3
 800456c:	466b      	mov	r3, sp
 800456e:	3300      	adds	r3, #0
 8004570:	617b      	str	r3, [r7, #20]

	// Set no use decode mode
	for(int i = 0; i < u8_num_led_matrix; i++)
 8004572:	2300      	movs	r3, #0
 8004574:	627b      	str	r3, [r7, #36]	; 0x24
 8004576:	e00d      	b.n	8004594 <LED_MATRIX_Init+0xb8>
	{
		temp_data[i*2] = MAX7219_REG_ADD_DECODEMODE;
 8004578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457a:	005b      	lsls	r3, r3, #1
 800457c:	697a      	ldr	r2, [r7, #20]
 800457e:	2109      	movs	r1, #9
 8004580:	54d1      	strb	r1, [r2, r3]
		temp_data[i*2 + 1] = MAX7219_NO_DECODE;
 8004582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004584:	005b      	lsls	r3, r3, #1
 8004586:	3301      	adds	r3, #1
 8004588:	697a      	ldr	r2, [r7, #20]
 800458a:	2100      	movs	r1, #0
 800458c:	54d1      	strb	r1, [r2, r3]
	for(int i = 0; i < u8_num_led_matrix; i++)
 800458e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004590:	3301      	adds	r3, #1
 8004592:	627b      	str	r3, [r7, #36]	; 0x24
 8004594:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8004598:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800459a:	429a      	cmp	r2, r3
 800459c:	dbec      	blt.n	8004578 <LED_MATRIX_Init+0x9c>
	}
	HAL_SPI_Transmit_DMA(hspi, temp_data, 8);
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	2208      	movs	r2, #8
 80045a2:	4619      	mov	r1, r3
 80045a4:	68b8      	ldr	r0, [r7, #8]
 80045a6:	f7fd ff2f 	bl	8002408 <HAL_SPI_Transmit_DMA>

	// Set max display intensity
	for(int i = 0; i < u8_num_led_matrix; i++)
 80045aa:	2300      	movs	r3, #0
 80045ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80045ae:	e00d      	b.n	80045cc <LED_MATRIX_Init+0xf0>
	{
		temp_data[i*2] = MAX7219_REG_ADD_INTENSITY;
 80045b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b2:	005b      	lsls	r3, r3, #1
 80045b4:	697a      	ldr	r2, [r7, #20]
 80045b6:	210a      	movs	r1, #10
 80045b8:	54d1      	strb	r1, [r2, r3]
		temp_data[i*2 + 1] = MAX7219_INTENSITY_7_32;
 80045ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045bc:	005b      	lsls	r3, r3, #1
 80045be:	3301      	adds	r3, #1
 80045c0:	697a      	ldr	r2, [r7, #20]
 80045c2:	2103      	movs	r1, #3
 80045c4:	54d1      	strb	r1, [r2, r3]
	for(int i = 0; i < u8_num_led_matrix; i++)
 80045c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c8:	3301      	adds	r3, #1
 80045ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80045cc:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80045d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045d2:	429a      	cmp	r2, r3
 80045d4:	dbec      	blt.n	80045b0 <LED_MATRIX_Init+0xd4>
	}
	HAL_SPI_Transmit_DMA(hspi, temp_data, 8);
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	2208      	movs	r2, #8
 80045da:	4619      	mov	r1, r3
 80045dc:	68b8      	ldr	r0, [r7, #8]
 80045de:	f7fd ff13 	bl	8002408 <HAL_SPI_Transmit_DMA>

	// Set displaying 8 digit
	for(int i = 0; i < u8_num_led_matrix; i++)
 80045e2:	2300      	movs	r3, #0
 80045e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045e6:	e00d      	b.n	8004604 <LED_MATRIX_Init+0x128>
		{
			temp_data[i*2] = MAX7219_REG_ADD_SCANLIMIT;
 80045e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ea:	005b      	lsls	r3, r3, #1
 80045ec:	697a      	ldr	r2, [r7, #20]
 80045ee:	210b      	movs	r1, #11
 80045f0:	54d1      	strb	r1, [r2, r3]
			temp_data[i*2 + 1] = MAX7219_DISPLAY_8_DIGIT;
 80045f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045f4:	005b      	lsls	r3, r3, #1
 80045f6:	3301      	adds	r3, #1
 80045f8:	697a      	ldr	r2, [r7, #20]
 80045fa:	2107      	movs	r1, #7
 80045fc:	54d1      	strb	r1, [r2, r3]
	for(int i = 0; i < u8_num_led_matrix; i++)
 80045fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004600:	3301      	adds	r3, #1
 8004602:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004604:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8004608:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800460a:	429a      	cmp	r2, r3
 800460c:	dbec      	blt.n	80045e8 <LED_MATRIX_Init+0x10c>
		}
	HAL_SPI_Transmit_DMA(hspi, temp_data, 8);
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	2208      	movs	r2, #8
 8004612:	4619      	mov	r1, r3
 8004614:	68b8      	ldr	r0, [r7, #8]
 8004616:	f7fd fef7 	bl	8002408 <HAL_SPI_Transmit_DMA>

	// Set operation as normal
	for(int i = 0; i < u8_num_led_matrix; i++)
 800461a:	2300      	movs	r3, #0
 800461c:	633b      	str	r3, [r7, #48]	; 0x30
 800461e:	e00d      	b.n	800463c <LED_MATRIX_Init+0x160>
	{
		temp_data[i*2] = MAX7219_REG_ADD_SHUTDOWN;
 8004620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004622:	005b      	lsls	r3, r3, #1
 8004624:	697a      	ldr	r2, [r7, #20]
 8004626:	210c      	movs	r1, #12
 8004628:	54d1      	strb	r1, [r2, r3]
		temp_data[i*2 + 1] = MAX7219_NO_SHUTDOWN_MODE;
 800462a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800462c:	005b      	lsls	r3, r3, #1
 800462e:	3301      	adds	r3, #1
 8004630:	697a      	ldr	r2, [r7, #20]
 8004632:	2101      	movs	r1, #1
 8004634:	54d1      	strb	r1, [r2, r3]
	for(int i = 0; i < u8_num_led_matrix; i++)
 8004636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004638:	3301      	adds	r3, #1
 800463a:	633b      	str	r3, [r7, #48]	; 0x30
 800463c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8004640:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004642:	429a      	cmp	r2, r3
 8004644:	dbec      	blt.n	8004620 <LED_MATRIX_Init+0x144>
	}
	HAL_SPI_Transmit_DMA(hspi, temp_data, 8);
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	2208      	movs	r2, #8
 800464a:	4619      	mov	r1, r3
 800464c:	68b8      	ldr	r0, [r7, #8]
 800464e:	f7fd fedb 	bl	8002408 <HAL_SPI_Transmit_DMA>

	// Set no use display test
	for(int i = 0; i < u8_num_led_matrix; i++)
 8004652:	2300      	movs	r3, #0
 8004654:	637b      	str	r3, [r7, #52]	; 0x34
 8004656:	e00d      	b.n	8004674 <LED_MATRIX_Init+0x198>
	{
		temp_data[i*2] = MAX7219_REG_ADD_DISPLAYTEST;
 8004658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800465a:	005b      	lsls	r3, r3, #1
 800465c:	697a      	ldr	r2, [r7, #20]
 800465e:	210f      	movs	r1, #15
 8004660:	54d1      	strb	r1, [r2, r3]
		temp_data[i*2 + 1] = MAX7219_DISPLAY_NORMAL;
 8004662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004664:	005b      	lsls	r3, r3, #1
 8004666:	3301      	adds	r3, #1
 8004668:	697a      	ldr	r2, [r7, #20]
 800466a:	2100      	movs	r1, #0
 800466c:	54d1      	strb	r1, [r2, r3]
	for(int i = 0; i < u8_num_led_matrix; i++)
 800466e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004670:	3301      	adds	r3, #1
 8004672:	637b      	str	r3, [r7, #52]	; 0x34
 8004674:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8004678:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800467a:	429a      	cmp	r2, r3
 800467c:	dbec      	blt.n	8004658 <LED_MATRIX_Init+0x17c>
	}
	HAL_SPI_Transmit_DMA(hspi, temp_data, 8);
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	2208      	movs	r2, #8
 8004682:	4619      	mov	r1, r3
 8004684:	68b8      	ldr	r0, [r7, #8]
 8004686:	f7fd febf 	bl	8002408 <HAL_SPI_Transmit_DMA>

	for(int i = 0; i < u8_num_led_matrix; i++)
 800468a:	2300      	movs	r3, #0
 800468c:	623b      	str	r3, [r7, #32]
 800468e:	e015      	b.n	80046bc <LED_MATRIX_Init+0x1e0>
	{
		for(int j = 0; j < 8; j++)
 8004690:	2300      	movs	r3, #0
 8004692:	61fb      	str	r3, [r7, #28]
 8004694:	e00c      	b.n	80046b0 <LED_MATRIX_Init+0x1d4>
		{
			led_matrix_data->gau8_output_buf[i][j] = 0x00;
 8004696:	68fa      	ldr	r2, [r7, #12]
 8004698:	6a3b      	ldr	r3, [r7, #32]
 800469a:	00db      	lsls	r3, r3, #3
 800469c:	441a      	add	r2, r3
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	4413      	add	r3, r2
 80046a2:	f503 738a 	add.w	r3, r3, #276	; 0x114
 80046a6:	2200      	movs	r2, #0
 80046a8:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++)
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	3301      	adds	r3, #1
 80046ae:	61fb      	str	r3, [r7, #28]
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	2b07      	cmp	r3, #7
 80046b4:	ddef      	ble.n	8004696 <LED_MATRIX_Init+0x1ba>
	for(int i = 0; i < u8_num_led_matrix; i++)
 80046b6:	6a3b      	ldr	r3, [r7, #32]
 80046b8:	3301      	adds	r3, #1
 80046ba:	623b      	str	r3, [r7, #32]
 80046bc:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80046c0:	6a3a      	ldr	r2, [r7, #32]
 80046c2:	429a      	cmp	r2, r3
 80046c4:	dbe4      	blt.n	8004690 <LED_MATRIX_Init+0x1b4>
		}
	}
	PUSH_OUTPUT_Buf(led_matrix_data);
 80046c6:	68f8      	ldr	r0, [r7, #12]
 80046c8:	f7ff fcec 	bl	80040a4 <PUSH_OUTPUT_Buf>
 80046cc:	46ad      	mov	sp, r5
}
 80046ce:	bf00      	nop
 80046d0:	3738      	adds	r7, #56	; 0x38
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080046d8 <__libc_init_array>:
 80046d8:	b570      	push	{r4, r5, r6, lr}
 80046da:	4e0d      	ldr	r6, [pc, #52]	; (8004710 <__libc_init_array+0x38>)
 80046dc:	4c0d      	ldr	r4, [pc, #52]	; (8004714 <__libc_init_array+0x3c>)
 80046de:	1ba4      	subs	r4, r4, r6
 80046e0:	10a4      	asrs	r4, r4, #2
 80046e2:	2500      	movs	r5, #0
 80046e4:	42a5      	cmp	r5, r4
 80046e6:	d109      	bne.n	80046fc <__libc_init_array+0x24>
 80046e8:	4e0b      	ldr	r6, [pc, #44]	; (8004718 <__libc_init_array+0x40>)
 80046ea:	4c0c      	ldr	r4, [pc, #48]	; (800471c <__libc_init_array+0x44>)
 80046ec:	f000 f820 	bl	8004730 <_init>
 80046f0:	1ba4      	subs	r4, r4, r6
 80046f2:	10a4      	asrs	r4, r4, #2
 80046f4:	2500      	movs	r5, #0
 80046f6:	42a5      	cmp	r5, r4
 80046f8:	d105      	bne.n	8004706 <__libc_init_array+0x2e>
 80046fa:	bd70      	pop	{r4, r5, r6, pc}
 80046fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004700:	4798      	blx	r3
 8004702:	3501      	adds	r5, #1
 8004704:	e7ee      	b.n	80046e4 <__libc_init_array+0xc>
 8004706:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800470a:	4798      	blx	r3
 800470c:	3501      	adds	r5, #1
 800470e:	e7f2      	b.n	80046f6 <__libc_init_array+0x1e>
 8004710:	08004b70 	.word	0x08004b70
 8004714:	08004b70 	.word	0x08004b70
 8004718:	08004b70 	.word	0x08004b70
 800471c:	08004b74 	.word	0x08004b74

08004720 <memset>:
 8004720:	4402      	add	r2, r0
 8004722:	4603      	mov	r3, r0
 8004724:	4293      	cmp	r3, r2
 8004726:	d100      	bne.n	800472a <memset+0xa>
 8004728:	4770      	bx	lr
 800472a:	f803 1b01 	strb.w	r1, [r3], #1
 800472e:	e7f9      	b.n	8004724 <memset+0x4>

08004730 <_init>:
 8004730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004732:	bf00      	nop
 8004734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004736:	bc08      	pop	{r3}
 8004738:	469e      	mov	lr, r3
 800473a:	4770      	bx	lr

0800473c <_fini>:
 800473c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800473e:	bf00      	nop
 8004740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004742:	bc08      	pop	{r3}
 8004744:	469e      	mov	lr, r3
 8004746:	4770      	bx	lr
