
Led_Matrix_F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000389c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  08003a34  08003a34  00013a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e60  08003e60  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08003e60  08003e60  00013e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e68  08003e68  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e68  08003e68  00013e68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e6c  08003e6c  00013e6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003e70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a0  20000010  08003e80  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003b0  08003e80  000203b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000090b1  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001638  00000000  00000000  000290f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008a0  00000000  00000000  0002a730  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007e8  00000000  00000000  0002afd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000155e2  00000000  00000000  0002b7b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006da5  00000000  00000000  00040d9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00086221  00000000  00000000  00047b3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cdd60  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022e4  00000000  00000000  000cdddc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003a1c 	.word	0x08003a1c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	08003a1c 	.word	0x08003a1c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_SPI_TxCpltCallback>:
uint8_t gau8_output_buf[NUM_MODULE_LED_MATRIX][8] = {};		// array [4x8] contains data to be pushed out to the led matrix module
uint8_t gu8_cnt_display = 0;								//manage to update output_buf array to what character in uart_buf array and what column


void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
	if(hspi->Instance == hspi2.Instance)
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	681a      	ldr	r2, [r3, #0]
 80004e4:	4b09      	ldr	r3, [pc, #36]	; (800050c <HAL_SPI_TxCpltCallback+0x34>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	429a      	cmp	r2, r3
 80004ea:	d10b      	bne.n	8000504 <HAL_SPI_TxCpltCallback+0x2c>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 80004ec:	2201      	movs	r2, #1
 80004ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004f2:	4807      	ldr	r0, [pc, #28]	; (8000510 <HAL_SPI_TxCpltCallback+0x38>)
 80004f4:	f001 fb7c 	bl	8001bf0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 80004f8:	2200      	movs	r2, #0
 80004fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004fe:	4804      	ldr	r0, [pc, #16]	; (8000510 <HAL_SPI_TxCpltCallback+0x38>)
 8000500:	f001 fb76 	bl	8001bf0 <HAL_GPIO_WritePin>
	}
}
 8000504:	bf00      	nop
 8000506:	3708      	adds	r7, #8
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	200001b0 	.word	0x200001b0
 8000510:	40020400 	.word	0x40020400

08000514 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b084      	sub	sp, #16
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart2.Instance)
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681a      	ldr	r2, [r3, #0]
 8000520:	4b1f      	ldr	r3, [pc, #124]	; (80005a0 <HAL_UART_RxCpltCallback+0x8c>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	429a      	cmp	r2, r3
 8000526:	d136      	bne.n	8000596 <HAL_UART_RxCpltCallback+0x82>
	{

		if (gu8_uart_rx =='\n'){
 8000528:	4b1e      	ldr	r3, [pc, #120]	; (80005a4 <HAL_UART_RxCpltCallback+0x90>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	2b0a      	cmp	r3, #10
 800052e:	d120      	bne.n	8000572 <HAL_UART_RxCpltCallback+0x5e>
			uint8_t i;
			gu8_temp_cnt_elt_uart_buf = gu8_cnt_elt_uart_buf;
 8000530:	4b1d      	ldr	r3, [pc, #116]	; (80005a8 <HAL_UART_RxCpltCallback+0x94>)
 8000532:	781a      	ldrb	r2, [r3, #0]
 8000534:	4b1d      	ldr	r3, [pc, #116]	; (80005ac <HAL_UART_RxCpltCallback+0x98>)
 8000536:	701a      	strb	r2, [r3, #0]
			for (i=0; i<gu8_temp_cnt_elt_uart_buf; i++){
 8000538:	2300      	movs	r3, #0
 800053a:	73fb      	strb	r3, [r7, #15]
 800053c:	e008      	b.n	8000550 <HAL_UART_RxCpltCallback+0x3c>
				gau8_temp_uart_buf[i] = gau8_uart_buf[i];
 800053e:	7bfa      	ldrb	r2, [r7, #15]
 8000540:	7bfb      	ldrb	r3, [r7, #15]
 8000542:	491b      	ldr	r1, [pc, #108]	; (80005b0 <HAL_UART_RxCpltCallback+0x9c>)
 8000544:	5c89      	ldrb	r1, [r1, r2]
 8000546:	4a1b      	ldr	r2, [pc, #108]	; (80005b4 <HAL_UART_RxCpltCallback+0xa0>)
 8000548:	54d1      	strb	r1, [r2, r3]
			for (i=0; i<gu8_temp_cnt_elt_uart_buf; i++){
 800054a:	7bfb      	ldrb	r3, [r7, #15]
 800054c:	3301      	adds	r3, #1
 800054e:	73fb      	strb	r3, [r7, #15]
 8000550:	4b16      	ldr	r3, [pc, #88]	; (80005ac <HAL_UART_RxCpltCallback+0x98>)
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	7bfa      	ldrb	r2, [r7, #15]
 8000556:	429a      	cmp	r2, r3
 8000558:	d3f1      	bcc.n	800053e <HAL_UART_RxCpltCallback+0x2a>
			}
			memset(gau8_temp_uart_buf,0x00,4);		//create whitespace
 800055a:	2204      	movs	r2, #4
 800055c:	2100      	movs	r1, #0
 800055e:	4815      	ldr	r0, [pc, #84]	; (80005b4 <HAL_UART_RxCpltCallback+0xa0>)
 8000560:	f003 fa54 	bl	8003a0c <memset>
			gu8_cnt_elt_uart_buf = NUM_MODULE_LED_MATRIX;
 8000564:	4b10      	ldr	r3, [pc, #64]	; (80005a8 <HAL_UART_RxCpltCallback+0x94>)
 8000566:	2204      	movs	r2, #4
 8000568:	701a      	strb	r2, [r3, #0]
			gu8_cnt_display = 0;
 800056a:	4b13      	ldr	r3, [pc, #76]	; (80005b8 <HAL_UART_RxCpltCallback+0xa4>)
 800056c:	2200      	movs	r2, #0
 800056e:	701a      	strb	r2, [r3, #0]
 8000570:	e00c      	b.n	800058c <HAL_UART_RxCpltCallback+0x78>

		}
		else{
			gau8_uart_buf[gu8_cnt_elt_uart_buf] = gu8_uart_rx;
 8000572:	4b0d      	ldr	r3, [pc, #52]	; (80005a8 <HAL_UART_RxCpltCallback+0x94>)
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	461a      	mov	r2, r3
 8000578:	4b0a      	ldr	r3, [pc, #40]	; (80005a4 <HAL_UART_RxCpltCallback+0x90>)
 800057a:	7819      	ldrb	r1, [r3, #0]
 800057c:	4b0c      	ldr	r3, [pc, #48]	; (80005b0 <HAL_UART_RxCpltCallback+0x9c>)
 800057e:	5499      	strb	r1, [r3, r2]
			gu8_cnt_elt_uart_buf++;
 8000580:	4b09      	ldr	r3, [pc, #36]	; (80005a8 <HAL_UART_RxCpltCallback+0x94>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	3301      	adds	r3, #1
 8000586:	b2da      	uxtb	r2, r3
 8000588:	4b07      	ldr	r3, [pc, #28]	; (80005a8 <HAL_UART_RxCpltCallback+0x94>)
 800058a:	701a      	strb	r2, [r3, #0]

		}
		HAL_UART_Receive_DMA(&huart2, &gu8_uart_rx, 1);
 800058c:	2201      	movs	r2, #1
 800058e:	4905      	ldr	r1, [pc, #20]	; (80005a4 <HAL_UART_RxCpltCallback+0x90>)
 8000590:	4803      	ldr	r0, [pc, #12]	; (80005a0 <HAL_UART_RxCpltCallback+0x8c>)
 8000592:	f002 fb39 	bl	8002c08 <HAL_UART_Receive_DMA>
	}
}
 8000596:	bf00      	nop
 8000598:	3710      	adds	r7, #16
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	2000030c 	.word	0x2000030c
 80005a4:	20000208 	.word	0x20000208
 80005a8:	20000000 	.word	0x20000000
 80005ac:	20000001 	.word	0x20000001
 80005b0:	2000020c 	.word	0x2000020c
 80005b4:	20000050 	.word	0x20000050
 80005b8:	2000004c 	.word	0x2000004c

080005bc <u8_update_output_buf>:

void u8_update_output_buf(void){
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0

	uint8_t i,j;
	uint8_t u8_current_char;	//contains the character being updated for the output_buf array
#if TEXT_MOVING_DIRECTION
	// Shift left data of all led matrix, except 1st led matrix
		for (i=0; i<NUM_MODULE_LED_MATRIX-1; i++){
 80005c2:	2300      	movs	r3, #0
 80005c4:	71fb      	strb	r3, [r7, #7]
 80005c6:	e039      	b.n	800063c <u8_update_output_buf+0x80>
			for (j=0; j<8; j++){
 80005c8:	2300      	movs	r3, #0
 80005ca:	71bb      	strb	r3, [r7, #6]
 80005cc:	e030      	b.n	8000630 <u8_update_output_buf+0x74>
				gau8_output_buf[i][j] >>= 1;
 80005ce:	79fa      	ldrb	r2, [r7, #7]
 80005d0:	79bb      	ldrb	r3, [r7, #6]
 80005d2:	4946      	ldr	r1, [pc, #280]	; (80006ec <u8_update_output_buf+0x130>)
 80005d4:	00d2      	lsls	r2, r2, #3
 80005d6:	440a      	add	r2, r1
 80005d8:	4413      	add	r3, r2
 80005da:	7819      	ldrb	r1, [r3, #0]
 80005dc:	79fa      	ldrb	r2, [r7, #7]
 80005de:	79bb      	ldrb	r3, [r7, #6]
 80005e0:	0849      	lsrs	r1, r1, #1
 80005e2:	b2c8      	uxtb	r0, r1
 80005e4:	4941      	ldr	r1, [pc, #260]	; (80006ec <u8_update_output_buf+0x130>)
 80005e6:	00d2      	lsls	r2, r2, #3
 80005e8:	440a      	add	r2, r1
 80005ea:	4413      	add	r3, r2
 80005ec:	4602      	mov	r2, r0
 80005ee:	701a      	strb	r2, [r3, #0]
				gau8_output_buf[i][j] |= (gau8_output_buf[i+1][j] << 7);
 80005f0:	79fa      	ldrb	r2, [r7, #7]
 80005f2:	79bb      	ldrb	r3, [r7, #6]
 80005f4:	493d      	ldr	r1, [pc, #244]	; (80006ec <u8_update_output_buf+0x130>)
 80005f6:	00d2      	lsls	r2, r2, #3
 80005f8:	440a      	add	r2, r1
 80005fa:	4413      	add	r3, r2
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	b25a      	sxtb	r2, r3
 8000600:	79fb      	ldrb	r3, [r7, #7]
 8000602:	1c59      	adds	r1, r3, #1
 8000604:	79bb      	ldrb	r3, [r7, #6]
 8000606:	4839      	ldr	r0, [pc, #228]	; (80006ec <u8_update_output_buf+0x130>)
 8000608:	00c9      	lsls	r1, r1, #3
 800060a:	4401      	add	r1, r0
 800060c:	440b      	add	r3, r1
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	01db      	lsls	r3, r3, #7
 8000612:	b25b      	sxtb	r3, r3
 8000614:	4313      	orrs	r3, r2
 8000616:	b259      	sxtb	r1, r3
 8000618:	79fa      	ldrb	r2, [r7, #7]
 800061a:	79bb      	ldrb	r3, [r7, #6]
 800061c:	b2c8      	uxtb	r0, r1
 800061e:	4933      	ldr	r1, [pc, #204]	; (80006ec <u8_update_output_buf+0x130>)
 8000620:	00d2      	lsls	r2, r2, #3
 8000622:	440a      	add	r2, r1
 8000624:	4413      	add	r3, r2
 8000626:	4602      	mov	r2, r0
 8000628:	701a      	strb	r2, [r3, #0]
			for (j=0; j<8; j++){
 800062a:	79bb      	ldrb	r3, [r7, #6]
 800062c:	3301      	adds	r3, #1
 800062e:	71bb      	strb	r3, [r7, #6]
 8000630:	79bb      	ldrb	r3, [r7, #6]
 8000632:	2b07      	cmp	r3, #7
 8000634:	d9cb      	bls.n	80005ce <u8_update_output_buf+0x12>
		for (i=0; i<NUM_MODULE_LED_MATRIX-1; i++){
 8000636:	79fb      	ldrb	r3, [r7, #7]
 8000638:	3301      	adds	r3, #1
 800063a:	71fb      	strb	r3, [r7, #7]
 800063c:	79fb      	ldrb	r3, [r7, #7]
 800063e:	2b02      	cmp	r3, #2
 8000640:	d9c2      	bls.n	80005c8 <u8_update_output_buf+0xc>
			}
		}
	// Get current character displaying in 1st led matrix
		if ((gu8_cnt_display/8) < gu8_temp_cnt_elt_uart_buf ){
 8000642:	4b2b      	ldr	r3, [pc, #172]	; (80006f0 <u8_update_output_buf+0x134>)
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	08db      	lsrs	r3, r3, #3
 8000648:	b2da      	uxtb	r2, r3
 800064a:	4b2a      	ldr	r3, [pc, #168]	; (80006f4 <u8_update_output_buf+0x138>)
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	429a      	cmp	r2, r3
 8000650:	d208      	bcs.n	8000664 <u8_update_output_buf+0xa8>
			 u8_current_char = gau8_temp_uart_buf[(gu8_cnt_display/8)];
 8000652:	4b27      	ldr	r3, [pc, #156]	; (80006f0 <u8_update_output_buf+0x134>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	08db      	lsrs	r3, r3, #3
 8000658:	b2db      	uxtb	r3, r3
 800065a:	461a      	mov	r2, r3
 800065c:	4b26      	ldr	r3, [pc, #152]	; (80006f8 <u8_update_output_buf+0x13c>)
 800065e:	5c9b      	ldrb	r3, [r3, r2]
 8000660:	717b      	strb	r3, [r7, #5]
 8000662:	e002      	b.n	800066a <u8_update_output_buf+0xae>
		} else gu8_cnt_display = 0;
 8000664:	4b22      	ldr	r3, [pc, #136]	; (80006f0 <u8_update_output_buf+0x134>)
 8000666:	2200      	movs	r2, #0
 8000668:	701a      	strb	r2, [r3, #0]
	// Update data for 1st led matrix
		for (i=0; i<8; i++){
 800066a:	2300      	movs	r3, #0
 800066c:	71fb      	strb	r3, [r7, #7]
 800066e:	e02d      	b.n	80006cc <u8_update_output_buf+0x110>
			 gau8_output_buf[NUM_MODULE_LED_MATRIX-1][i] >>= 1;
 8000670:	79fb      	ldrb	r3, [r7, #7]
 8000672:	4a1e      	ldr	r2, [pc, #120]	; (80006ec <u8_update_output_buf+0x130>)
 8000674:	4413      	add	r3, r2
 8000676:	7e1a      	ldrb	r2, [r3, #24]
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	0852      	lsrs	r2, r2, #1
 800067c:	b2d1      	uxtb	r1, r2
 800067e:	4a1b      	ldr	r2, [pc, #108]	; (80006ec <u8_update_output_buf+0x130>)
 8000680:	4413      	add	r3, r2
 8000682:	460a      	mov	r2, r1
 8000684:	761a      	strb	r2, [r3, #24]
			 gau8_output_buf[NUM_MODULE_LED_MATRIX-1][i] |= 0x80 & (FONT[u8_current_char][i] << (7-(gu8_cnt_display%8)));
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	4a18      	ldr	r2, [pc, #96]	; (80006ec <u8_update_output_buf+0x130>)
 800068a:	4413      	add	r3, r2
 800068c:	7e1b      	ldrb	r3, [r3, #24]
 800068e:	b25a      	sxtb	r2, r3
 8000690:	7979      	ldrb	r1, [r7, #5]
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	4819      	ldr	r0, [pc, #100]	; (80006fc <u8_update_output_buf+0x140>)
 8000696:	00c9      	lsls	r1, r1, #3
 8000698:	4401      	add	r1, r0
 800069a:	440b      	add	r3, r1
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	4619      	mov	r1, r3
 80006a0:	4b13      	ldr	r3, [pc, #76]	; (80006f0 <u8_update_output_buf+0x134>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	43db      	mvns	r3, r3
 80006a6:	f003 0307 	and.w	r3, r3, #7
 80006aa:	fa01 f303 	lsl.w	r3, r1, r3
 80006ae:	b25b      	sxtb	r3, r3
 80006b0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80006b4:	b25b      	sxtb	r3, r3
 80006b6:	4313      	orrs	r3, r2
 80006b8:	b25a      	sxtb	r2, r3
 80006ba:	79fb      	ldrb	r3, [r7, #7]
 80006bc:	b2d1      	uxtb	r1, r2
 80006be:	4a0b      	ldr	r2, [pc, #44]	; (80006ec <u8_update_output_buf+0x130>)
 80006c0:	4413      	add	r3, r2
 80006c2:	460a      	mov	r2, r1
 80006c4:	761a      	strb	r2, [r3, #24]
		for (i=0; i<8; i++){
 80006c6:	79fb      	ldrb	r3, [r7, #7]
 80006c8:	3301      	adds	r3, #1
 80006ca:	71fb      	strb	r3, [r7, #7]
 80006cc:	79fb      	ldrb	r3, [r7, #7]
 80006ce:	2b07      	cmp	r3, #7
 80006d0:	d9ce      	bls.n	8000670 <u8_update_output_buf+0xb4>
		for (i=0; i<8; i++){
			 gau8_output_buf[0][i] <<= 1;
			 gau8_output_buf[0][i] |= 0x01 & (FONT[u8_current_char][i] >> (7-(gu8_cnt_display%8)));
		}
#endif
    gu8_cnt_display++;
 80006d2:	4b07      	ldr	r3, [pc, #28]	; (80006f0 <u8_update_output_buf+0x134>)
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	3301      	adds	r3, #1
 80006d8:	b2da      	uxtb	r2, r3
 80006da:	4b05      	ldr	r3, [pc, #20]	; (80006f0 <u8_update_output_buf+0x134>)
 80006dc:	701a      	strb	r2, [r3, #0]
}
 80006de:	bf00      	nop
 80006e0:	370c      	adds	r7, #12
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	2000002c 	.word	0x2000002c
 80006f0:	2000004c 	.word	0x2000004c
 80006f4:	20000001 	.word	0x20000001
 80006f8:	20000050 	.word	0x20000050
 80006fc:	08003a40 	.word	0x08003a40

08000700 <u8_push_output_buf>:

void u8_push_output_buf(void){
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0
	uint32_t i;
	int32_t j;
	for (i = 0; i<8; i++){
 8000706:	2300      	movs	r3, #0
 8000708:	60fb      	str	r3, [r7, #12]
 800070a:	e02f      	b.n	800076c <u8_push_output_buf+0x6c>
		uint8_t u8_temp_data[2*NUM_MODULE_LED_MATRIX];
		for(j = 0; j< NUM_MODULE_LED_MATRIX;j++){
 800070c:	2300      	movs	r3, #0
 800070e:	60bb      	str	r3, [r7, #8]
 8000710:	e020      	b.n	8000754 <u8_push_output_buf+0x54>
			u8_temp_data[2*j] = i+1;
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	b2da      	uxtb	r2, r3
 8000716:	68bb      	ldr	r3, [r7, #8]
 8000718:	005b      	lsls	r3, r3, #1
 800071a:	3201      	adds	r2, #1
 800071c:	b2d2      	uxtb	r2, r2
 800071e:	f107 0110 	add.w	r1, r7, #16
 8000722:	440b      	add	r3, r1
 8000724:	f803 2c10 	strb.w	r2, [r3, #-16]
			u8_temp_data[2*j+1] = gau8_output_buf[NUM_MODULE_LED_MATRIX-1-j][7-i];
 8000728:	68bb      	ldr	r3, [r7, #8]
 800072a:	f1c3 0103 	rsb	r1, r3, #3
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	f1c3 0207 	rsb	r2, r3, #7
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	005b      	lsls	r3, r3, #1
 8000738:	3301      	adds	r3, #1
 800073a:	4810      	ldr	r0, [pc, #64]	; (800077c <u8_push_output_buf+0x7c>)
 800073c:	00c9      	lsls	r1, r1, #3
 800073e:	4401      	add	r1, r0
 8000740:	440a      	add	r2, r1
 8000742:	7812      	ldrb	r2, [r2, #0]
 8000744:	f107 0110 	add.w	r1, r7, #16
 8000748:	440b      	add	r3, r1
 800074a:	f803 2c10 	strb.w	r2, [r3, #-16]
		for(j = 0; j< NUM_MODULE_LED_MATRIX;j++){
 800074e:	68bb      	ldr	r3, [r7, #8]
 8000750:	3301      	adds	r3, #1
 8000752:	60bb      	str	r3, [r7, #8]
 8000754:	68bb      	ldr	r3, [r7, #8]
 8000756:	2b03      	cmp	r3, #3
 8000758:	dddb      	ble.n	8000712 <u8_push_output_buf+0x12>
		}
#if USING_DMA
		HAL_SPI_Transmit_DMA(&hspi2, u8_temp_data, 2*NUM_MODULE_LED_MATRIX);
 800075a:	463b      	mov	r3, r7
 800075c:	2208      	movs	r2, #8
 800075e:	4619      	mov	r1, r3
 8000760:	4807      	ldr	r0, [pc, #28]	; (8000780 <u8_push_output_buf+0x80>)
 8000762:	f001 feff 	bl	8002564 <HAL_SPI_Transmit_DMA>
	for (i = 0; i<8; i++){
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	3301      	adds	r3, #1
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	2b07      	cmp	r3, #7
 8000770:	d9cc      	bls.n	800070c <u8_push_output_buf+0xc>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
#endif

	}
}
 8000772:	bf00      	nop
 8000774:	3710      	adds	r7, #16
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	2000002c 	.word	0x2000002c
 8000780:	200001b0 	.word	0x200001b0

08000784 <init_max7219>:
void init_max7219(void){
 8000784:	b580      	push	{r7, lr}
 8000786:	b086      	sub	sp, #24
 8000788:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < NUM_MODULE_LED_MATRIX; i++){
 800078a:	2300      	movs	r3, #0
 800078c:	75fb      	strb	r3, [r7, #23]
 800078e:	e00d      	b.n	80007ac <init_max7219+0x28>
		uint8_t u8_temp_data[2] = {MAX7219_REG_ADD_DECODEMODE, MAX7219_NO_DECODE};
 8000790:	2309      	movs	r3, #9
 8000792:	753b      	strb	r3, [r7, #20]
 8000794:	2300      	movs	r3, #0
 8000796:	757b      	strb	r3, [r7, #21]
#if USING_DMA
		HAL_SPI_Transmit_DMA(&hspi2, u8_temp_data, 2);
 8000798:	f107 0314 	add.w	r3, r7, #20
 800079c:	2202      	movs	r2, #2
 800079e:	4619      	mov	r1, r3
 80007a0:	482c      	ldr	r0, [pc, #176]	; (8000854 <init_max7219+0xd0>)
 80007a2:	f001 fedf 	bl	8002564 <HAL_SPI_Transmit_DMA>
	for (i = 0; i < NUM_MODULE_LED_MATRIX; i++){
 80007a6:	7dfb      	ldrb	r3, [r7, #23]
 80007a8:	3301      	adds	r3, #1
 80007aa:	75fb      	strb	r3, [r7, #23]
 80007ac:	7dfb      	ldrb	r3, [r7, #23]
 80007ae:	2b03      	cmp	r3, #3
 80007b0:	d9ee      	bls.n	8000790 <init_max7219+0xc>
		HAL_SPI_Transmit(&hspi2, u8_temp_data, 2, 1000);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
#endif
	}
	for (i = 0; i < NUM_MODULE_LED_MATRIX; i++){
 80007b2:	2300      	movs	r3, #0
 80007b4:	75fb      	strb	r3, [r7, #23]
 80007b6:	e00c      	b.n	80007d2 <init_max7219+0x4e>
		uint8_t u8_temp_data[2] = {MAX7219_REG_ADD_INTENSITY, MAX7219_INTENSITY_7_32};
 80007b8:	4b27      	ldr	r3, [pc, #156]	; (8000858 <init_max7219+0xd4>)
 80007ba:	881b      	ldrh	r3, [r3, #0]
 80007bc:	823b      	strh	r3, [r7, #16]
#if USING_DMA
		HAL_SPI_Transmit_DMA(&hspi2, u8_temp_data, 2);
 80007be:	f107 0310 	add.w	r3, r7, #16
 80007c2:	2202      	movs	r2, #2
 80007c4:	4619      	mov	r1, r3
 80007c6:	4823      	ldr	r0, [pc, #140]	; (8000854 <init_max7219+0xd0>)
 80007c8:	f001 fecc 	bl	8002564 <HAL_SPI_Transmit_DMA>
	for (i = 0; i < NUM_MODULE_LED_MATRIX; i++){
 80007cc:	7dfb      	ldrb	r3, [r7, #23]
 80007ce:	3301      	adds	r3, #1
 80007d0:	75fb      	strb	r3, [r7, #23]
 80007d2:	7dfb      	ldrb	r3, [r7, #23]
 80007d4:	2b03      	cmp	r3, #3
 80007d6:	d9ef      	bls.n	80007b8 <init_max7219+0x34>
		HAL_SPI_Transmit(&hspi2, u8_temp_data, 2, 1000);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
#endif
	}
	for (i = 0; i < NUM_MODULE_LED_MATRIX; i++){
 80007d8:	2300      	movs	r3, #0
 80007da:	75fb      	strb	r3, [r7, #23]
 80007dc:	e00c      	b.n	80007f8 <init_max7219+0x74>
		uint8_t u8_temp_data[2] = {MAX7219_REG_ADD_SCANLIMIT, MAX7219_DISPLAY_8_DIGIT};
 80007de:	4b1f      	ldr	r3, [pc, #124]	; (800085c <init_max7219+0xd8>)
 80007e0:	881b      	ldrh	r3, [r3, #0]
 80007e2:	81bb      	strh	r3, [r7, #12]
#if USING_DMA
		HAL_SPI_Transmit_DMA(&hspi2, u8_temp_data, 2);
 80007e4:	f107 030c 	add.w	r3, r7, #12
 80007e8:	2202      	movs	r2, #2
 80007ea:	4619      	mov	r1, r3
 80007ec:	4819      	ldr	r0, [pc, #100]	; (8000854 <init_max7219+0xd0>)
 80007ee:	f001 feb9 	bl	8002564 <HAL_SPI_Transmit_DMA>
	for (i = 0; i < NUM_MODULE_LED_MATRIX; i++){
 80007f2:	7dfb      	ldrb	r3, [r7, #23]
 80007f4:	3301      	adds	r3, #1
 80007f6:	75fb      	strb	r3, [r7, #23]
 80007f8:	7dfb      	ldrb	r3, [r7, #23]
 80007fa:	2b03      	cmp	r3, #3
 80007fc:	d9ef      	bls.n	80007de <init_max7219+0x5a>
		HAL_SPI_Transmit(&hspi2, u8_temp_data, 2, 1000);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
#endif
	}
	for (i = 0; i < NUM_MODULE_LED_MATRIX; i++){
 80007fe:	2300      	movs	r3, #0
 8000800:	75fb      	strb	r3, [r7, #23]
 8000802:	e00c      	b.n	800081e <init_max7219+0x9a>
		uint8_t u8_temp_data[2] = {MAX7219_REG_ADD_SHUTDOWN, MAX7219_NO_SHUTDOWN_MODE};
 8000804:	4b16      	ldr	r3, [pc, #88]	; (8000860 <init_max7219+0xdc>)
 8000806:	881b      	ldrh	r3, [r3, #0]
 8000808:	813b      	strh	r3, [r7, #8]
#if USING_DMA
		HAL_SPI_Transmit_DMA(&hspi2, u8_temp_data, 2);
 800080a:	f107 0308 	add.w	r3, r7, #8
 800080e:	2202      	movs	r2, #2
 8000810:	4619      	mov	r1, r3
 8000812:	4810      	ldr	r0, [pc, #64]	; (8000854 <init_max7219+0xd0>)
 8000814:	f001 fea6 	bl	8002564 <HAL_SPI_Transmit_DMA>
	for (i = 0; i < NUM_MODULE_LED_MATRIX; i++){
 8000818:	7dfb      	ldrb	r3, [r7, #23]
 800081a:	3301      	adds	r3, #1
 800081c:	75fb      	strb	r3, [r7, #23]
 800081e:	7dfb      	ldrb	r3, [r7, #23]
 8000820:	2b03      	cmp	r3, #3
 8000822:	d9ef      	bls.n	8000804 <init_max7219+0x80>
		HAL_SPI_Transmit(&hspi2, u8_temp_data, 2, 1000);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
#endif
	}
	for (i = 0; i < NUM_MODULE_LED_MATRIX; i++){
 8000824:	2300      	movs	r3, #0
 8000826:	75fb      	strb	r3, [r7, #23]
 8000828:	e00c      	b.n	8000844 <init_max7219+0xc0>
		uint8_t u8_temp_data[2] = {MAX7219_REG_ADD_DISPLAYTEST, MAX7219_DISPLAY_NORMAL};
 800082a:	230f      	movs	r3, #15
 800082c:	713b      	strb	r3, [r7, #4]
 800082e:	2300      	movs	r3, #0
 8000830:	717b      	strb	r3, [r7, #5]
#if USING_DMA
		HAL_SPI_Transmit_DMA(&hspi2, u8_temp_data, 2);
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	2202      	movs	r2, #2
 8000836:	4619      	mov	r1, r3
 8000838:	4806      	ldr	r0, [pc, #24]	; (8000854 <init_max7219+0xd0>)
 800083a:	f001 fe93 	bl	8002564 <HAL_SPI_Transmit_DMA>
	for (i = 0; i < NUM_MODULE_LED_MATRIX; i++){
 800083e:	7dfb      	ldrb	r3, [r7, #23]
 8000840:	3301      	adds	r3, #1
 8000842:	75fb      	strb	r3, [r7, #23]
 8000844:	7dfb      	ldrb	r3, [r7, #23]
 8000846:	2b03      	cmp	r3, #3
 8000848:	d9ef      	bls.n	800082a <init_max7219+0xa6>
		HAL_SPI_Transmit(&hspi2, u8_temp_data, 2, 1000);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
#endif
	}
}
 800084a:	bf00      	nop
 800084c:	3718      	adds	r7, #24
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	200001b0 	.word	0x200001b0
 8000858:	08003a34 	.word	0x08003a34
 800085c:	08003a38 	.word	0x08003a38
 8000860:	08003a3c 	.word	0x08003a3c

08000864 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800086a:	f000 fb2b 	bl	8000ec4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800086e:	f000 f827 	bl	80008c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000872:	f000 f90b 	bl	8000a8c <MX_GPIO_Init>
  MX_DMA_Init();
 8000876:	f000 f8e1 	bl	8000a3c <MX_DMA_Init>
  MX_SPI2_Init();
 800087a:	f000 f87f 	bl	800097c <MX_SPI2_Init>
  MX_USART2_UART_Init();
 800087e:	f000 f8b3 	bl	80009e8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  init_max7219();
 8000882:	f7ff ff7f 	bl	8000784 <init_max7219>
  HAL_UART_Receive_DMA(&huart2, &gu8_uart_rx, 1);
 8000886:	2201      	movs	r2, #1
 8000888:	490b      	ldr	r1, [pc, #44]	; (80008b8 <main+0x54>)
 800088a:	480c      	ldr	r0, [pc, #48]	; (80008bc <main+0x58>)
 800088c:	f002 f9bc 	bl	8002c08 <HAL_UART_Receive_DMA>
  uint32_t timer = 0;
 8000890:	2300      	movs	r3, #0
 8000892:	607b      	str	r3, [r7, #4]
  u8_push_output_buf();
 8000894:	f7ff ff34 	bl	8000700 <u8_push_output_buf>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (HAL_GetTick()-timer >= SPEED){
 8000898:	f000 fb7a 	bl	8000f90 <HAL_GetTick>
 800089c:	4602      	mov	r2, r0
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	1ad3      	subs	r3, r2, r3
 80008a2:	2b45      	cmp	r3, #69	; 0x45
 80008a4:	d9f8      	bls.n	8000898 <main+0x34>
	  		  u8_update_output_buf();
 80008a6:	f7ff fe89 	bl	80005bc <u8_update_output_buf>
	  		  u8_push_output_buf();
 80008aa:	f7ff ff29 	bl	8000700 <u8_push_output_buf>
	  		  timer=HAL_GetTick();
 80008ae:	f000 fb6f 	bl	8000f90 <HAL_GetTick>
 80008b2:	6078      	str	r0, [r7, #4]
	  if (HAL_GetTick()-timer >= SPEED){
 80008b4:	e7f0      	b.n	8000898 <main+0x34>
 80008b6:	bf00      	nop
 80008b8:	20000208 	.word	0x20000208
 80008bc:	2000030c 	.word	0x2000030c

080008c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b094      	sub	sp, #80	; 0x50
 80008c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008c6:	f107 0320 	add.w	r3, r7, #32
 80008ca:	2230      	movs	r2, #48	; 0x30
 80008cc:	2100      	movs	r1, #0
 80008ce:	4618      	mov	r0, r3
 80008d0:	f003 f89c 	bl	8003a0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d4:	f107 030c 	add.w	r3, r7, #12
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]
 80008e0:	60da      	str	r2, [r3, #12]
 80008e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e4:	2300      	movs	r3, #0
 80008e6:	60bb      	str	r3, [r7, #8]
 80008e8:	4b22      	ldr	r3, [pc, #136]	; (8000974 <SystemClock_Config+0xb4>)
 80008ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ec:	4a21      	ldr	r2, [pc, #132]	; (8000974 <SystemClock_Config+0xb4>)
 80008ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f2:	6413      	str	r3, [r2, #64]	; 0x40
 80008f4:	4b1f      	ldr	r3, [pc, #124]	; (8000974 <SystemClock_Config+0xb4>)
 80008f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008fc:	60bb      	str	r3, [r7, #8]
 80008fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000900:	2300      	movs	r3, #0
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	4b1c      	ldr	r3, [pc, #112]	; (8000978 <SystemClock_Config+0xb8>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a1b      	ldr	r2, [pc, #108]	; (8000978 <SystemClock_Config+0xb8>)
 800090a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800090e:	6013      	str	r3, [r2, #0]
 8000910:	4b19      	ldr	r3, [pc, #100]	; (8000978 <SystemClock_Config+0xb8>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000918:	607b      	str	r3, [r7, #4]
 800091a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800091c:	2302      	movs	r3, #2
 800091e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000920:	2301      	movs	r3, #1
 8000922:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000924:	2310      	movs	r3, #16
 8000926:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000928:	2300      	movs	r3, #0
 800092a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800092c:	f107 0320 	add.w	r3, r7, #32
 8000930:	4618      	mov	r0, r3
 8000932:	f001 f977 	bl	8001c24 <HAL_RCC_OscConfig>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800093c:	f000 f8f8 	bl	8000b30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000940:	230f      	movs	r3, #15
 8000942:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000944:	2300      	movs	r3, #0
 8000946:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000948:	2300      	movs	r3, #0
 800094a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800094c:	2300      	movs	r3, #0
 800094e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000950:	2300      	movs	r3, #0
 8000952:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000954:	f107 030c 	add.w	r3, r7, #12
 8000958:	2100      	movs	r1, #0
 800095a:	4618      	mov	r0, r3
 800095c:	f001 fbd2 	bl	8002104 <HAL_RCC_ClockConfig>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000966:	f000 f8e3 	bl	8000b30 <Error_Handler>
  }
}
 800096a:	bf00      	nop
 800096c:	3750      	adds	r7, #80	; 0x50
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40023800 	.word	0x40023800
 8000978:	40007000 	.word	0x40007000

0800097c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000980:	4b17      	ldr	r3, [pc, #92]	; (80009e0 <MX_SPI2_Init+0x64>)
 8000982:	4a18      	ldr	r2, [pc, #96]	; (80009e4 <MX_SPI2_Init+0x68>)
 8000984:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000986:	4b16      	ldr	r3, [pc, #88]	; (80009e0 <MX_SPI2_Init+0x64>)
 8000988:	f44f 7282 	mov.w	r2, #260	; 0x104
 800098c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800098e:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <MX_SPI2_Init+0x64>)
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000994:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <MX_SPI2_Init+0x64>)
 8000996:	2200      	movs	r2, #0
 8000998:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800099a:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <MX_SPI2_Init+0x64>)
 800099c:	2200      	movs	r2, #0
 800099e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009a0:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <MX_SPI2_Init+0x64>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80009a6:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <MX_SPI2_Init+0x64>)
 80009a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009ac:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009ae:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <MX_SPI2_Init+0x64>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009b4:	4b0a      	ldr	r3, [pc, #40]	; (80009e0 <MX_SPI2_Init+0x64>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80009ba:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <MX_SPI2_Init+0x64>)
 80009bc:	2200      	movs	r2, #0
 80009be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009c0:	4b07      	ldr	r3, [pc, #28]	; (80009e0 <MX_SPI2_Init+0x64>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80009c6:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <MX_SPI2_Init+0x64>)
 80009c8:	220a      	movs	r2, #10
 80009ca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80009cc:	4804      	ldr	r0, [pc, #16]	; (80009e0 <MX_SPI2_Init+0x64>)
 80009ce:	f001 fd65 	bl	800249c <HAL_SPI_Init>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80009d8:	f000 f8aa 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	200001b0 	.word	0x200001b0
 80009e4:	40003800 	.word	0x40003800

080009e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009ec:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <MX_USART2_UART_Init+0x4c>)
 80009ee:	4a12      	ldr	r2, [pc, #72]	; (8000a38 <MX_USART2_UART_Init+0x50>)
 80009f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009f2:	4b10      	ldr	r3, [pc, #64]	; (8000a34 <MX_USART2_UART_Init+0x4c>)
 80009f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009fa:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <MX_USART2_UART_Init+0x4c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a00:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <MX_USART2_UART_Init+0x4c>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a06:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <MX_USART2_UART_Init+0x4c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a0c:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <MX_USART2_UART_Init+0x4c>)
 8000a0e:	220c      	movs	r2, #12
 8000a10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a12:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <MX_USART2_UART_Init+0x4c>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a18:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <MX_USART2_UART_Init+0x4c>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a1e:	4805      	ldr	r0, [pc, #20]	; (8000a34 <MX_USART2_UART_Init+0x4c>)
 8000a20:	f002 f8a4 	bl	8002b6c <HAL_UART_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a2a:	f000 f881 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	2000030c 	.word	0x2000030c
 8000a38:	40004400 	.word	0x40004400

08000a3c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	607b      	str	r3, [r7, #4]
 8000a46:	4b10      	ldr	r3, [pc, #64]	; (8000a88 <MX_DMA_Init+0x4c>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	4a0f      	ldr	r2, [pc, #60]	; (8000a88 <MX_DMA_Init+0x4c>)
 8000a4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a50:	6313      	str	r3, [r2, #48]	; 0x30
 8000a52:	4b0d      	ldr	r3, [pc, #52]	; (8000a88 <MX_DMA_Init+0x4c>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a5a:	607b      	str	r3, [r7, #4]
 8000a5c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	2100      	movs	r1, #0
 8000a62:	200f      	movs	r0, #15
 8000a64:	f000 fb7b 	bl	800115e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000a68:	200f      	movs	r0, #15
 8000a6a:	f000 fb94 	bl	8001196 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	2100      	movs	r1, #0
 8000a72:	2010      	movs	r0, #16
 8000a74:	f000 fb73 	bl	800115e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000a78:	2010      	movs	r0, #16
 8000a7a:	f000 fb8c 	bl	8001196 <HAL_NVIC_EnableIRQ>

}
 8000a7e:	bf00      	nop
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40023800 	.word	0x40023800

08000a8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b088      	sub	sp, #32
 8000a90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a92:	f107 030c 	add.w	r3, r7, #12
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	605a      	str	r2, [r3, #4]
 8000a9c:	609a      	str	r2, [r3, #8]
 8000a9e:	60da      	str	r2, [r3, #12]
 8000aa0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60bb      	str	r3, [r7, #8]
 8000aa6:	4b20      	ldr	r3, [pc, #128]	; (8000b28 <MX_GPIO_Init+0x9c>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	4a1f      	ldr	r2, [pc, #124]	; (8000b28 <MX_GPIO_Init+0x9c>)
 8000aac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab2:	4b1d      	ldr	r3, [pc, #116]	; (8000b28 <MX_GPIO_Init+0x9c>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aba:	60bb      	str	r3, [r7, #8]
 8000abc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	607b      	str	r3, [r7, #4]
 8000ac2:	4b19      	ldr	r3, [pc, #100]	; (8000b28 <MX_GPIO_Init+0x9c>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	4a18      	ldr	r2, [pc, #96]	; (8000b28 <MX_GPIO_Init+0x9c>)
 8000ac8:	f043 0301 	orr.w	r3, r3, #1
 8000acc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ace:	4b16      	ldr	r3, [pc, #88]	; (8000b28 <MX_GPIO_Init+0x9c>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	f003 0301 	and.w	r3, r3, #1
 8000ad6:	607b      	str	r3, [r7, #4]
 8000ad8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	603b      	str	r3, [r7, #0]
 8000ade:	4b12      	ldr	r3, [pc, #72]	; (8000b28 <MX_GPIO_Init+0x9c>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	4a11      	ldr	r2, [pc, #68]	; (8000b28 <MX_GPIO_Init+0x9c>)
 8000ae4:	f043 0302 	orr.w	r3, r3, #2
 8000ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aea:	4b0f      	ldr	r3, [pc, #60]	; (8000b28 <MX_GPIO_Init+0x9c>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	f003 0302 	and.w	r3, r3, #2
 8000af2:	603b      	str	r3, [r7, #0]
 8000af4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000af6:	2200      	movs	r2, #0
 8000af8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000afc:	480b      	ldr	r0, [pc, #44]	; (8000b2c <MX_GPIO_Init+0xa0>)
 8000afe:	f001 f877 	bl	8001bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000b02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b10:	2300      	movs	r3, #0
 8000b12:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b14:	f107 030c 	add.w	r3, r7, #12
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4804      	ldr	r0, [pc, #16]	; (8000b2c <MX_GPIO_Init+0xa0>)
 8000b1c:	f000 fee6 	bl	80018ec <HAL_GPIO_Init>

}
 8000b20:	bf00      	nop
 8000b22:	3720      	adds	r7, #32
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	40023800 	.word	0x40023800
 8000b2c:	40020400 	.word	0x40020400

08000b30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b34:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b36:	e7fe      	b.n	8000b36 <Error_Handler+0x6>

08000b38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	607b      	str	r3, [r7, #4]
 8000b42:	4b10      	ldr	r3, [pc, #64]	; (8000b84 <HAL_MspInit+0x4c>)
 8000b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b46:	4a0f      	ldr	r2, [pc, #60]	; (8000b84 <HAL_MspInit+0x4c>)
 8000b48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b4e:	4b0d      	ldr	r3, [pc, #52]	; (8000b84 <HAL_MspInit+0x4c>)
 8000b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b56:	607b      	str	r3, [r7, #4]
 8000b58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	603b      	str	r3, [r7, #0]
 8000b5e:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <HAL_MspInit+0x4c>)
 8000b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b62:	4a08      	ldr	r2, [pc, #32]	; (8000b84 <HAL_MspInit+0x4c>)
 8000b64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b68:	6413      	str	r3, [r2, #64]	; 0x40
 8000b6a:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <HAL_MspInit+0x4c>)
 8000b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b72:	603b      	str	r3, [r7, #0]
 8000b74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b76:	bf00      	nop
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	40023800 	.word	0x40023800

08000b88 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b08a      	sub	sp, #40	; 0x28
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]
 8000b9e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a38      	ldr	r2, [pc, #224]	; (8000c88 <HAL_SPI_MspInit+0x100>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d16a      	bne.n	8000c80 <HAL_SPI_MspInit+0xf8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	613b      	str	r3, [r7, #16]
 8000bae:	4b37      	ldr	r3, [pc, #220]	; (8000c8c <HAL_SPI_MspInit+0x104>)
 8000bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb2:	4a36      	ldr	r2, [pc, #216]	; (8000c8c <HAL_SPI_MspInit+0x104>)
 8000bb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bba:	4b34      	ldr	r3, [pc, #208]	; (8000c8c <HAL_SPI_MspInit+0x104>)
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bc2:	613b      	str	r3, [r7, #16]
 8000bc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	60fb      	str	r3, [r7, #12]
 8000bca:	4b30      	ldr	r3, [pc, #192]	; (8000c8c <HAL_SPI_MspInit+0x104>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	4a2f      	ldr	r2, [pc, #188]	; (8000c8c <HAL_SPI_MspInit+0x104>)
 8000bd0:	f043 0302 	orr.w	r3, r3, #2
 8000bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd6:	4b2d      	ldr	r3, [pc, #180]	; (8000c8c <HAL_SPI_MspInit+0x104>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	f003 0302 	and.w	r3, r3, #2
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000be2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000be6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be8:	2302      	movs	r3, #2
 8000bea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bf4:	2305      	movs	r3, #5
 8000bf6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4824      	ldr	r0, [pc, #144]	; (8000c90 <HAL_SPI_MspInit+0x108>)
 8000c00:	f000 fe74 	bl	80018ec <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8000c04:	4b23      	ldr	r3, [pc, #140]	; (8000c94 <HAL_SPI_MspInit+0x10c>)
 8000c06:	4a24      	ldr	r2, [pc, #144]	; (8000c98 <HAL_SPI_MspInit+0x110>)
 8000c08:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8000c0a:	4b22      	ldr	r3, [pc, #136]	; (8000c94 <HAL_SPI_MspInit+0x10c>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c10:	4b20      	ldr	r3, [pc, #128]	; (8000c94 <HAL_SPI_MspInit+0x10c>)
 8000c12:	2240      	movs	r2, #64	; 0x40
 8000c14:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c16:	4b1f      	ldr	r3, [pc, #124]	; (8000c94 <HAL_SPI_MspInit+0x10c>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c1c:	4b1d      	ldr	r3, [pc, #116]	; (8000c94 <HAL_SPI_MspInit+0x10c>)
 8000c1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c22:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c24:	4b1b      	ldr	r3, [pc, #108]	; (8000c94 <HAL_SPI_MspInit+0x10c>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c2a:	4b1a      	ldr	r3, [pc, #104]	; (8000c94 <HAL_SPI_MspInit+0x10c>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8000c30:	4b18      	ldr	r3, [pc, #96]	; (8000c94 <HAL_SPI_MspInit+0x10c>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000c36:	4b17      	ldr	r3, [pc, #92]	; (8000c94 <HAL_SPI_MspInit+0x10c>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000c3c:	4b15      	ldr	r3, [pc, #84]	; (8000c94 <HAL_SPI_MspInit+0x10c>)
 8000c3e:	2204      	movs	r2, #4
 8000c40:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000c42:	4b14      	ldr	r3, [pc, #80]	; (8000c94 <HAL_SPI_MspInit+0x10c>)
 8000c44:	2203      	movs	r2, #3
 8000c46:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000c48:	4b12      	ldr	r3, [pc, #72]	; (8000c94 <HAL_SPI_MspInit+0x10c>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000c4e:	4b11      	ldr	r3, [pc, #68]	; (8000c94 <HAL_SPI_MspInit+0x10c>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000c54:	480f      	ldr	r0, [pc, #60]	; (8000c94 <HAL_SPI_MspInit+0x10c>)
 8000c56:	f000 fab9 	bl	80011cc <HAL_DMA_Init>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <HAL_SPI_MspInit+0xdc>
    {
      Error_Handler();
 8000c60:	f7ff ff66 	bl	8000b30 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	4a0b      	ldr	r2, [pc, #44]	; (8000c94 <HAL_SPI_MspInit+0x10c>)
 8000c68:	649a      	str	r2, [r3, #72]	; 0x48
 8000c6a:	4a0a      	ldr	r2, [pc, #40]	; (8000c94 <HAL_SPI_MspInit+0x10c>)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000c70:	2200      	movs	r2, #0
 8000c72:	2100      	movs	r1, #0
 8000c74:	2024      	movs	r0, #36	; 0x24
 8000c76:	f000 fa72 	bl	800115e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000c7a:	2024      	movs	r0, #36	; 0x24
 8000c7c:	f000 fa8b 	bl	8001196 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000c80:	bf00      	nop
 8000c82:	3728      	adds	r7, #40	; 0x28
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	40003800 	.word	0x40003800
 8000c8c:	40023800 	.word	0x40023800
 8000c90:	40020400 	.word	0x40020400
 8000c94:	2000034c 	.word	0x2000034c
 8000c98:	40026070 	.word	0x40026070

08000c9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b08a      	sub	sp, #40	; 0x28
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca4:	f107 0314 	add.w	r3, r7, #20
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
 8000cb2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a34      	ldr	r2, [pc, #208]	; (8000d8c <HAL_UART_MspInit+0xf0>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d161      	bne.n	8000d82 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	613b      	str	r3, [r7, #16]
 8000cc2:	4b33      	ldr	r3, [pc, #204]	; (8000d90 <HAL_UART_MspInit+0xf4>)
 8000cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc6:	4a32      	ldr	r2, [pc, #200]	; (8000d90 <HAL_UART_MspInit+0xf4>)
 8000cc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ccc:	6413      	str	r3, [r2, #64]	; 0x40
 8000cce:	4b30      	ldr	r3, [pc, #192]	; (8000d90 <HAL_UART_MspInit+0xf4>)
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cd6:	613b      	str	r3, [r7, #16]
 8000cd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	4b2c      	ldr	r3, [pc, #176]	; (8000d90 <HAL_UART_MspInit+0xf4>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	4a2b      	ldr	r2, [pc, #172]	; (8000d90 <HAL_UART_MspInit+0xf4>)
 8000ce4:	f043 0301 	orr.w	r3, r3, #1
 8000ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cea:	4b29      	ldr	r3, [pc, #164]	; (8000d90 <HAL_UART_MspInit+0xf4>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000cf6:	230c      	movs	r3, #12
 8000cf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d02:	2303      	movs	r3, #3
 8000d04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d06:	2307      	movs	r3, #7
 8000d08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0a:	f107 0314 	add.w	r3, r7, #20
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4820      	ldr	r0, [pc, #128]	; (8000d94 <HAL_UART_MspInit+0xf8>)
 8000d12:	f000 fdeb 	bl	80018ec <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000d16:	4b20      	ldr	r3, [pc, #128]	; (8000d98 <HAL_UART_MspInit+0xfc>)
 8000d18:	4a20      	ldr	r2, [pc, #128]	; (8000d9c <HAL_UART_MspInit+0x100>)
 8000d1a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000d1c:	4b1e      	ldr	r3, [pc, #120]	; (8000d98 <HAL_UART_MspInit+0xfc>)
 8000d1e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d22:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d24:	4b1c      	ldr	r3, [pc, #112]	; (8000d98 <HAL_UART_MspInit+0xfc>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d2a:	4b1b      	ldr	r3, [pc, #108]	; (8000d98 <HAL_UART_MspInit+0xfc>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d30:	4b19      	ldr	r3, [pc, #100]	; (8000d98 <HAL_UART_MspInit+0xfc>)
 8000d32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d36:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d38:	4b17      	ldr	r3, [pc, #92]	; (8000d98 <HAL_UART_MspInit+0xfc>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d3e:	4b16      	ldr	r3, [pc, #88]	; (8000d98 <HAL_UART_MspInit+0xfc>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000d44:	4b14      	ldr	r3, [pc, #80]	; (8000d98 <HAL_UART_MspInit+0xfc>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d4a:	4b13      	ldr	r3, [pc, #76]	; (8000d98 <HAL_UART_MspInit+0xfc>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d50:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <HAL_UART_MspInit+0xfc>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000d56:	4810      	ldr	r0, [pc, #64]	; (8000d98 <HAL_UART_MspInit+0xfc>)
 8000d58:	f000 fa38 	bl	80011cc <HAL_DMA_Init>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8000d62:	f7ff fee5 	bl	8000b30 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4a0b      	ldr	r2, [pc, #44]	; (8000d98 <HAL_UART_MspInit+0xfc>)
 8000d6a:	635a      	str	r2, [r3, #52]	; 0x34
 8000d6c:	4a0a      	ldr	r2, [pc, #40]	; (8000d98 <HAL_UART_MspInit+0xfc>)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d72:	2200      	movs	r2, #0
 8000d74:	2100      	movs	r1, #0
 8000d76:	2026      	movs	r0, #38	; 0x26
 8000d78:	f000 f9f1 	bl	800115e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d7c:	2026      	movs	r0, #38	; 0x26
 8000d7e:	f000 fa0a 	bl	8001196 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d82:	bf00      	nop
 8000d84:	3728      	adds	r7, #40	; 0x28
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40004400 	.word	0x40004400
 8000d90:	40023800 	.word	0x40023800
 8000d94:	40020000 	.word	0x40020000
 8000d98:	20000150 	.word	0x20000150
 8000d9c:	40026088 	.word	0x40026088

08000da0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000da4:	e7fe      	b.n	8000da4 <NMI_Handler+0x4>

08000da6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000daa:	e7fe      	b.n	8000daa <HardFault_Handler+0x4>

08000dac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000db0:	e7fe      	b.n	8000db0 <MemManage_Handler+0x4>

08000db2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000db6:	e7fe      	b.n	8000db6 <BusFault_Handler+0x4>

08000db8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dbc:	e7fe      	b.n	8000dbc <UsageFault_Handler+0x4>

08000dbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr

08000dcc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr

08000dda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr

08000de8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dec:	f000 f8bc 	bl	8000f68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000df0:	bf00      	nop
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000df8:	4802      	ldr	r0, [pc, #8]	; (8000e04 <DMA1_Stream4_IRQHandler+0x10>)
 8000dfa:	f000 fb0f 	bl	800141c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	2000034c 	.word	0x2000034c

08000e08 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000e0c:	4802      	ldr	r0, [pc, #8]	; (8000e18 <DMA1_Stream5_IRQHandler+0x10>)
 8000e0e:	f000 fb05 	bl	800141c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	20000150 	.word	0x20000150

08000e1c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000e20:	4802      	ldr	r0, [pc, #8]	; (8000e2c <SPI2_IRQHandler+0x10>)
 8000e22:	f001 fc4d 	bl	80026c0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	200001b0 	.word	0x200001b0

08000e30 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e34:	4802      	ldr	r0, [pc, #8]	; (8000e40 <USART2_IRQHandler+0x10>)
 8000e36:	f001 ff67 	bl	8002d08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	2000030c 	.word	0x2000030c

08000e44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e48:	4b08      	ldr	r3, [pc, #32]	; (8000e6c <SystemInit+0x28>)
 8000e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e4e:	4a07      	ldr	r2, [pc, #28]	; (8000e6c <SystemInit+0x28>)
 8000e50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e58:	4b04      	ldr	r3, [pc, #16]	; (8000e6c <SystemInit+0x28>)
 8000e5a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e5e:	609a      	str	r2, [r3, #8]
#endif
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ea8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000e74:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e76:	e003      	b.n	8000e80 <LoopCopyDataInit>

08000e78 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e78:	4b0c      	ldr	r3, [pc, #48]	; (8000eac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000e7a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e7c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e7e:	3104      	adds	r1, #4

08000e80 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e80:	480b      	ldr	r0, [pc, #44]	; (8000eb0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000e82:	4b0c      	ldr	r3, [pc, #48]	; (8000eb4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e84:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e86:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e88:	d3f6      	bcc.n	8000e78 <CopyDataInit>
  ldr  r2, =_sbss
 8000e8a:	4a0b      	ldr	r2, [pc, #44]	; (8000eb8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e8c:	e002      	b.n	8000e94 <LoopFillZerobss>

08000e8e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000e8e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e90:	f842 3b04 	str.w	r3, [r2], #4

08000e94 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e94:	4b09      	ldr	r3, [pc, #36]	; (8000ebc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e96:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e98:	d3f9      	bcc.n	8000e8e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e9a:	f7ff ffd3 	bl	8000e44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e9e:	f002 fd91 	bl	80039c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ea2:	f7ff fcdf 	bl	8000864 <main>
  bx  lr    
 8000ea6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ea8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000eac:	08003e70 	.word	0x08003e70
  ldr  r0, =_sdata
 8000eb0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000eb4:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000eb8:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000ebc:	200003b0 	.word	0x200003b0

08000ec0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ec0:	e7fe      	b.n	8000ec0 <ADC_IRQHandler>
	...

08000ec4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ec8:	4b0e      	ldr	r3, [pc, #56]	; (8000f04 <HAL_Init+0x40>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a0d      	ldr	r2, [pc, #52]	; (8000f04 <HAL_Init+0x40>)
 8000ece:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ed2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ed4:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <HAL_Init+0x40>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a0a      	ldr	r2, [pc, #40]	; (8000f04 <HAL_Init+0x40>)
 8000eda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ede:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ee0:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <HAL_Init+0x40>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a07      	ldr	r2, [pc, #28]	; (8000f04 <HAL_Init+0x40>)
 8000ee6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eec:	2003      	movs	r0, #3
 8000eee:	f000 f92b 	bl	8001148 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ef2:	2000      	movs	r0, #0
 8000ef4:	f000 f808 	bl	8000f08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ef8:	f7ff fe1e 	bl	8000b38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000efc:	2300      	movs	r3, #0
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40023c00 	.word	0x40023c00

08000f08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f10:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <HAL_InitTick+0x54>)
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	4b12      	ldr	r3, [pc, #72]	; (8000f60 <HAL_InitTick+0x58>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	4619      	mov	r1, r3
 8000f1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f26:	4618      	mov	r0, r3
 8000f28:	f000 f943 	bl	80011b2 <HAL_SYSTICK_Config>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	e00e      	b.n	8000f54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2b0f      	cmp	r3, #15
 8000f3a:	d80a      	bhi.n	8000f52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	6879      	ldr	r1, [r7, #4]
 8000f40:	f04f 30ff 	mov.w	r0, #4294967295
 8000f44:	f000 f90b 	bl	800115e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f48:	4a06      	ldr	r2, [pc, #24]	; (8000f64 <HAL_InitTick+0x5c>)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	e000      	b.n	8000f54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	20000004 	.word	0x20000004
 8000f60:	2000000c 	.word	0x2000000c
 8000f64:	20000008 	.word	0x20000008

08000f68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f6c:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <HAL_IncTick+0x20>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	461a      	mov	r2, r3
 8000f72:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <HAL_IncTick+0x24>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4413      	add	r3, r2
 8000f78:	4a04      	ldr	r2, [pc, #16]	; (8000f8c <HAL_IncTick+0x24>)
 8000f7a:	6013      	str	r3, [r2, #0]
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	2000000c 	.word	0x2000000c
 8000f8c:	200003ac 	.word	0x200003ac

08000f90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  return uwTick;
 8000f94:	4b03      	ldr	r3, [pc, #12]	; (8000fa4 <HAL_GetTick+0x14>)
 8000f96:	681b      	ldr	r3, [r3, #0]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	200003ac 	.word	0x200003ac

08000fa8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	f003 0307 	and.w	r3, r3, #7
 8000fb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fb8:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <__NVIC_SetPriorityGrouping+0x44>)
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fbe:	68ba      	ldr	r2, [r7, #8]
 8000fc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fda:	4a04      	ldr	r2, [pc, #16]	; (8000fec <__NVIC_SetPriorityGrouping+0x44>)
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	60d3      	str	r3, [r2, #12]
}
 8000fe0:	bf00      	nop
 8000fe2:	3714      	adds	r7, #20
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ff4:	4b04      	ldr	r3, [pc, #16]	; (8001008 <__NVIC_GetPriorityGrouping+0x18>)
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	0a1b      	lsrs	r3, r3, #8
 8000ffa:	f003 0307 	and.w	r3, r3, #7
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101a:	2b00      	cmp	r3, #0
 800101c:	db0b      	blt.n	8001036 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	f003 021f 	and.w	r2, r3, #31
 8001024:	4907      	ldr	r1, [pc, #28]	; (8001044 <__NVIC_EnableIRQ+0x38>)
 8001026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102a:	095b      	lsrs	r3, r3, #5
 800102c:	2001      	movs	r0, #1
 800102e:	fa00 f202 	lsl.w	r2, r0, r2
 8001032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001036:	bf00      	nop
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	e000e100 	.word	0xe000e100

08001048 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	6039      	str	r1, [r7, #0]
 8001052:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001054:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001058:	2b00      	cmp	r3, #0
 800105a:	db0a      	blt.n	8001072 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	b2da      	uxtb	r2, r3
 8001060:	490c      	ldr	r1, [pc, #48]	; (8001094 <__NVIC_SetPriority+0x4c>)
 8001062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001066:	0112      	lsls	r2, r2, #4
 8001068:	b2d2      	uxtb	r2, r2
 800106a:	440b      	add	r3, r1
 800106c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001070:	e00a      	b.n	8001088 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	b2da      	uxtb	r2, r3
 8001076:	4908      	ldr	r1, [pc, #32]	; (8001098 <__NVIC_SetPriority+0x50>)
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	f003 030f 	and.w	r3, r3, #15
 800107e:	3b04      	subs	r3, #4
 8001080:	0112      	lsls	r2, r2, #4
 8001082:	b2d2      	uxtb	r2, r2
 8001084:	440b      	add	r3, r1
 8001086:	761a      	strb	r2, [r3, #24]
}
 8001088:	bf00      	nop
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	e000e100 	.word	0xe000e100
 8001098:	e000ed00 	.word	0xe000ed00

0800109c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800109c:	b480      	push	{r7}
 800109e:	b089      	sub	sp, #36	; 0x24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	60b9      	str	r1, [r7, #8]
 80010a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	f003 0307 	and.w	r3, r3, #7
 80010ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	f1c3 0307 	rsb	r3, r3, #7
 80010b6:	2b04      	cmp	r3, #4
 80010b8:	bf28      	it	cs
 80010ba:	2304      	movcs	r3, #4
 80010bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	3304      	adds	r3, #4
 80010c2:	2b06      	cmp	r3, #6
 80010c4:	d902      	bls.n	80010cc <NVIC_EncodePriority+0x30>
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	3b03      	subs	r3, #3
 80010ca:	e000      	b.n	80010ce <NVIC_EncodePriority+0x32>
 80010cc:	2300      	movs	r3, #0
 80010ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d0:	f04f 32ff 	mov.w	r2, #4294967295
 80010d4:	69bb      	ldr	r3, [r7, #24]
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	43da      	mvns	r2, r3
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	401a      	ands	r2, r3
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010e4:	f04f 31ff 	mov.w	r1, #4294967295
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	fa01 f303 	lsl.w	r3, r1, r3
 80010ee:	43d9      	mvns	r1, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f4:	4313      	orrs	r3, r2
         );
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3724      	adds	r7, #36	; 0x24
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
	...

08001104 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	3b01      	subs	r3, #1
 8001110:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001114:	d301      	bcc.n	800111a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001116:	2301      	movs	r3, #1
 8001118:	e00f      	b.n	800113a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800111a:	4a0a      	ldr	r2, [pc, #40]	; (8001144 <SysTick_Config+0x40>)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	3b01      	subs	r3, #1
 8001120:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001122:	210f      	movs	r1, #15
 8001124:	f04f 30ff 	mov.w	r0, #4294967295
 8001128:	f7ff ff8e 	bl	8001048 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800112c:	4b05      	ldr	r3, [pc, #20]	; (8001144 <SysTick_Config+0x40>)
 800112e:	2200      	movs	r2, #0
 8001130:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001132:	4b04      	ldr	r3, [pc, #16]	; (8001144 <SysTick_Config+0x40>)
 8001134:	2207      	movs	r2, #7
 8001136:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001138:	2300      	movs	r3, #0
}
 800113a:	4618      	mov	r0, r3
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	e000e010 	.word	0xe000e010

08001148 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f7ff ff29 	bl	8000fa8 <__NVIC_SetPriorityGrouping>
}
 8001156:	bf00      	nop
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800115e:	b580      	push	{r7, lr}
 8001160:	b086      	sub	sp, #24
 8001162:	af00      	add	r7, sp, #0
 8001164:	4603      	mov	r3, r0
 8001166:	60b9      	str	r1, [r7, #8]
 8001168:	607a      	str	r2, [r7, #4]
 800116a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800116c:	2300      	movs	r3, #0
 800116e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001170:	f7ff ff3e 	bl	8000ff0 <__NVIC_GetPriorityGrouping>
 8001174:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001176:	687a      	ldr	r2, [r7, #4]
 8001178:	68b9      	ldr	r1, [r7, #8]
 800117a:	6978      	ldr	r0, [r7, #20]
 800117c:	f7ff ff8e 	bl	800109c <NVIC_EncodePriority>
 8001180:	4602      	mov	r2, r0
 8001182:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001186:	4611      	mov	r1, r2
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff ff5d 	bl	8001048 <__NVIC_SetPriority>
}
 800118e:	bf00      	nop
 8001190:	3718      	adds	r7, #24
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	b082      	sub	sp, #8
 800119a:	af00      	add	r7, sp, #0
 800119c:	4603      	mov	r3, r0
 800119e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff ff31 	bl	800100c <__NVIC_EnableIRQ>
}
 80011aa:	bf00      	nop
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b082      	sub	sp, #8
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f7ff ffa2 	bl	8001104 <SysTick_Config>
 80011c0:	4603      	mov	r3, r0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
	...

080011cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b086      	sub	sp, #24
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80011d4:	2300      	movs	r3, #0
 80011d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80011d8:	f7ff feda 	bl	8000f90 <HAL_GetTick>
 80011dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d101      	bne.n	80011e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80011e4:	2301      	movs	r3, #1
 80011e6:	e099      	b.n	800131c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2200      	movs	r2, #0
 80011ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2202      	movs	r2, #2
 80011f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f022 0201 	bic.w	r2, r2, #1
 8001206:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001208:	e00f      	b.n	800122a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800120a:	f7ff fec1 	bl	8000f90 <HAL_GetTick>
 800120e:	4602      	mov	r2, r0
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	2b05      	cmp	r3, #5
 8001216:	d908      	bls.n	800122a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2220      	movs	r2, #32
 800121c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2203      	movs	r2, #3
 8001222:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001226:	2303      	movs	r3, #3
 8001228:	e078      	b.n	800131c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f003 0301 	and.w	r3, r3, #1
 8001234:	2b00      	cmp	r3, #0
 8001236:	d1e8      	bne.n	800120a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001240:	697a      	ldr	r2, [r7, #20]
 8001242:	4b38      	ldr	r3, [pc, #224]	; (8001324 <HAL_DMA_Init+0x158>)
 8001244:	4013      	ands	r3, r2
 8001246:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	685a      	ldr	r2, [r3, #4]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001256:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	691b      	ldr	r3, [r3, #16]
 800125c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001262:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	699b      	ldr	r3, [r3, #24]
 8001268:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800126e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6a1b      	ldr	r3, [r3, #32]
 8001274:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001276:	697a      	ldr	r2, [r7, #20]
 8001278:	4313      	orrs	r3, r2
 800127a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001280:	2b04      	cmp	r3, #4
 8001282:	d107      	bne.n	8001294 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128c:	4313      	orrs	r3, r2
 800128e:	697a      	ldr	r2, [r7, #20]
 8001290:	4313      	orrs	r3, r2
 8001292:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	697a      	ldr	r2, [r7, #20]
 800129a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	695b      	ldr	r3, [r3, #20]
 80012a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	f023 0307 	bic.w	r3, r3, #7
 80012aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b0:	697a      	ldr	r2, [r7, #20]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ba:	2b04      	cmp	r3, #4
 80012bc:	d117      	bne.n	80012ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012c2:	697a      	ldr	r2, [r7, #20]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d00e      	beq.n	80012ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f000 fa91 	bl	80017f8 <DMA_CheckFifoParam>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d008      	beq.n	80012ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2240      	movs	r2, #64	; 0x40
 80012e0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2201      	movs	r2, #1
 80012e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80012ea:	2301      	movs	r3, #1
 80012ec:	e016      	b.n	800131c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	697a      	ldr	r2, [r7, #20]
 80012f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f000 fa48 	bl	800178c <DMA_CalcBaseAndBitshift>
 80012fc:	4603      	mov	r3, r0
 80012fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001304:	223f      	movs	r2, #63	; 0x3f
 8001306:	409a      	lsls	r2, r3
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2200      	movs	r2, #0
 8001310:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2201      	movs	r2, #1
 8001316:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800131a:	2300      	movs	r3, #0
}
 800131c:	4618      	mov	r0, r3
 800131e:	3718      	adds	r7, #24
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	f010803f 	.word	0xf010803f

08001328 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b086      	sub	sp, #24
 800132c:	af00      	add	r7, sp, #0
 800132e:	60f8      	str	r0, [r7, #12]
 8001330:	60b9      	str	r1, [r7, #8]
 8001332:	607a      	str	r2, [r7, #4]
 8001334:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001336:	2300      	movs	r3, #0
 8001338:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800133e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001346:	2b01      	cmp	r3, #1
 8001348:	d101      	bne.n	800134e <HAL_DMA_Start_IT+0x26>
 800134a:	2302      	movs	r3, #2
 800134c:	e040      	b.n	80013d0 <HAL_DMA_Start_IT+0xa8>
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	2201      	movs	r2, #1
 8001352:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800135c:	b2db      	uxtb	r3, r3
 800135e:	2b01      	cmp	r3, #1
 8001360:	d12f      	bne.n	80013c2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	2202      	movs	r2, #2
 8001366:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	2200      	movs	r2, #0
 800136e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	68b9      	ldr	r1, [r7, #8]
 8001376:	68f8      	ldr	r0, [r7, #12]
 8001378:	f000 f9da 	bl	8001730 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001380:	223f      	movs	r2, #63	; 0x3f
 8001382:	409a      	lsls	r2, r3
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f042 0216 	orr.w	r2, r2, #22
 8001396:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139c:	2b00      	cmp	r3, #0
 800139e:	d007      	beq.n	80013b0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f042 0208 	orr.w	r2, r2, #8
 80013ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f042 0201 	orr.w	r2, r2, #1
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	e005      	b.n	80013ce <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	2200      	movs	r2, #0
 80013c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80013ca:	2302      	movs	r3, #2
 80013cc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80013ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3718      	adds	r7, #24
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d004      	beq.n	80013f6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2280      	movs	r2, #128	; 0x80
 80013f0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e00c      	b.n	8001410 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2205      	movs	r2, #5
 80013fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f022 0201 	bic.w	r2, r2, #1
 800140c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800140e:	2300      	movs	r3, #0
}
 8001410:	4618      	mov	r0, r3
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001424:	2300      	movs	r3, #0
 8001426:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001428:	4b92      	ldr	r3, [pc, #584]	; (8001674 <HAL_DMA_IRQHandler+0x258>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a92      	ldr	r2, [pc, #584]	; (8001678 <HAL_DMA_IRQHandler+0x25c>)
 800142e:	fba2 2303 	umull	r2, r3, r2, r3
 8001432:	0a9b      	lsrs	r3, r3, #10
 8001434:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800143a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001446:	2208      	movs	r2, #8
 8001448:	409a      	lsls	r2, r3
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	4013      	ands	r3, r2
 800144e:	2b00      	cmp	r3, #0
 8001450:	d01a      	beq.n	8001488 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 0304 	and.w	r3, r3, #4
 800145c:	2b00      	cmp	r3, #0
 800145e:	d013      	beq.n	8001488 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f022 0204 	bic.w	r2, r2, #4
 800146e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001474:	2208      	movs	r2, #8
 8001476:	409a      	lsls	r2, r3
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001480:	f043 0201 	orr.w	r2, r3, #1
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800148c:	2201      	movs	r2, #1
 800148e:	409a      	lsls	r2, r3
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	4013      	ands	r3, r2
 8001494:	2b00      	cmp	r3, #0
 8001496:	d012      	beq.n	80014be <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	695b      	ldr	r3, [r3, #20]
 800149e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d00b      	beq.n	80014be <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014aa:	2201      	movs	r2, #1
 80014ac:	409a      	lsls	r2, r3
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014b6:	f043 0202 	orr.w	r2, r3, #2
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014c2:	2204      	movs	r2, #4
 80014c4:	409a      	lsls	r2, r3
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	4013      	ands	r3, r2
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d012      	beq.n	80014f4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 0302 	and.w	r3, r3, #2
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d00b      	beq.n	80014f4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014e0:	2204      	movs	r2, #4
 80014e2:	409a      	lsls	r2, r3
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014ec:	f043 0204 	orr.w	r2, r3, #4
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014f8:	2210      	movs	r2, #16
 80014fa:	409a      	lsls	r2, r3
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	4013      	ands	r3, r2
 8001500:	2b00      	cmp	r3, #0
 8001502:	d043      	beq.n	800158c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0308 	and.w	r3, r3, #8
 800150e:	2b00      	cmp	r3, #0
 8001510:	d03c      	beq.n	800158c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001516:	2210      	movs	r2, #16
 8001518:	409a      	lsls	r2, r3
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d018      	beq.n	800155e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d108      	bne.n	800154c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153e:	2b00      	cmp	r3, #0
 8001540:	d024      	beq.n	800158c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	4798      	blx	r3
 800154a:	e01f      	b.n	800158c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001550:	2b00      	cmp	r3, #0
 8001552:	d01b      	beq.n	800158c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	4798      	blx	r3
 800155c:	e016      	b.n	800158c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001568:	2b00      	cmp	r3, #0
 800156a:	d107      	bne.n	800157c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f022 0208 	bic.w	r2, r2, #8
 800157a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001580:	2b00      	cmp	r3, #0
 8001582:	d003      	beq.n	800158c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001590:	2220      	movs	r2, #32
 8001592:	409a      	lsls	r2, r3
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	4013      	ands	r3, r2
 8001598:	2b00      	cmp	r3, #0
 800159a:	f000 808e 	beq.w	80016ba <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 0310 	and.w	r3, r3, #16
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	f000 8086 	beq.w	80016ba <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015b2:	2220      	movs	r2, #32
 80015b4:	409a      	lsls	r2, r3
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	2b05      	cmp	r3, #5
 80015c4:	d136      	bne.n	8001634 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f022 0216 	bic.w	r2, r2, #22
 80015d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	695a      	ldr	r2, [r3, #20]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d103      	bne.n	80015f6 <HAL_DMA_IRQHandler+0x1da>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d007      	beq.n	8001606 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f022 0208 	bic.w	r2, r2, #8
 8001604:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800160a:	223f      	movs	r2, #63	; 0x3f
 800160c:	409a      	lsls	r2, r3
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2200      	movs	r2, #0
 8001616:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2201      	movs	r2, #1
 800161e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001626:	2b00      	cmp	r3, #0
 8001628:	d07d      	beq.n	8001726 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	4798      	blx	r3
        }
        return;
 8001632:	e078      	b.n	8001726 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d01c      	beq.n	800167c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d108      	bne.n	8001662 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001654:	2b00      	cmp	r3, #0
 8001656:	d030      	beq.n	80016ba <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	4798      	blx	r3
 8001660:	e02b      	b.n	80016ba <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001666:	2b00      	cmp	r3, #0
 8001668:	d027      	beq.n	80016ba <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	4798      	blx	r3
 8001672:	e022      	b.n	80016ba <HAL_DMA_IRQHandler+0x29e>
 8001674:	20000004 	.word	0x20000004
 8001678:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001686:	2b00      	cmp	r3, #0
 8001688:	d10f      	bne.n	80016aa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f022 0210 	bic.w	r2, r2, #16
 8001698:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2200      	movs	r2, #0
 800169e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2201      	movs	r2, #1
 80016a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d003      	beq.n	80016ba <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d032      	beq.n	8001728 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d022      	beq.n	8001714 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2205      	movs	r2, #5
 80016d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f022 0201 	bic.w	r2, r2, #1
 80016e4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	3301      	adds	r3, #1
 80016ea:	60bb      	str	r3, [r7, #8]
 80016ec:	697a      	ldr	r2, [r7, #20]
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d307      	bcc.n	8001702 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0301 	and.w	r3, r3, #1
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d1f2      	bne.n	80016e6 <HAL_DMA_IRQHandler+0x2ca>
 8001700:	e000      	b.n	8001704 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001702:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2200      	movs	r2, #0
 8001708:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2201      	movs	r2, #1
 8001710:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001718:	2b00      	cmp	r3, #0
 800171a:	d005      	beq.n	8001728 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	4798      	blx	r3
 8001724:	e000      	b.n	8001728 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001726:	bf00      	nop
    }
  }
}
 8001728:	3718      	adds	r7, #24
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop

08001730 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	60b9      	str	r1, [r7, #8]
 800173a:	607a      	str	r2, [r7, #4]
 800173c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800174c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	683a      	ldr	r2, [r7, #0]
 8001754:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	2b40      	cmp	r3, #64	; 0x40
 800175c:	d108      	bne.n	8001770 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	68ba      	ldr	r2, [r7, #8]
 800176c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800176e:	e007      	b.n	8001780 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	68ba      	ldr	r2, [r7, #8]
 8001776:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	60da      	str	r2, [r3, #12]
}
 8001780:	bf00      	nop
 8001782:	3714      	adds	r7, #20
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	b2db      	uxtb	r3, r3
 800179a:	3b10      	subs	r3, #16
 800179c:	4a14      	ldr	r2, [pc, #80]	; (80017f0 <DMA_CalcBaseAndBitshift+0x64>)
 800179e:	fba2 2303 	umull	r2, r3, r2, r3
 80017a2:	091b      	lsrs	r3, r3, #4
 80017a4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80017a6:	4a13      	ldr	r2, [pc, #76]	; (80017f4 <DMA_CalcBaseAndBitshift+0x68>)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	4413      	add	r3, r2
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	461a      	mov	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2b03      	cmp	r3, #3
 80017b8:	d909      	bls.n	80017ce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80017c2:	f023 0303 	bic.w	r3, r3, #3
 80017c6:	1d1a      	adds	r2, r3, #4
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	659a      	str	r2, [r3, #88]	; 0x58
 80017cc:	e007      	b.n	80017de <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80017d6:	f023 0303 	bic.w	r3, r3, #3
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3714      	adds	r7, #20
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	aaaaaaab 	.word	0xaaaaaaab
 80017f4:	08003e58 	.word	0x08003e58

080017f8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001800:	2300      	movs	r3, #0
 8001802:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001808:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	699b      	ldr	r3, [r3, #24]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d11f      	bne.n	8001852 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	2b03      	cmp	r3, #3
 8001816:	d855      	bhi.n	80018c4 <DMA_CheckFifoParam+0xcc>
 8001818:	a201      	add	r2, pc, #4	; (adr r2, 8001820 <DMA_CheckFifoParam+0x28>)
 800181a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800181e:	bf00      	nop
 8001820:	08001831 	.word	0x08001831
 8001824:	08001843 	.word	0x08001843
 8001828:	08001831 	.word	0x08001831
 800182c:	080018c5 	.word	0x080018c5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001834:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d045      	beq.n	80018c8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001840:	e042      	b.n	80018c8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001846:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800184a:	d13f      	bne.n	80018cc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001850:	e03c      	b.n	80018cc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	699b      	ldr	r3, [r3, #24]
 8001856:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800185a:	d121      	bne.n	80018a0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	2b03      	cmp	r3, #3
 8001860:	d836      	bhi.n	80018d0 <DMA_CheckFifoParam+0xd8>
 8001862:	a201      	add	r2, pc, #4	; (adr r2, 8001868 <DMA_CheckFifoParam+0x70>)
 8001864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001868:	08001879 	.word	0x08001879
 800186c:	0800187f 	.word	0x0800187f
 8001870:	08001879 	.word	0x08001879
 8001874:	08001891 	.word	0x08001891
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	73fb      	strb	r3, [r7, #15]
      break;
 800187c:	e02f      	b.n	80018de <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001882:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d024      	beq.n	80018d4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800188e:	e021      	b.n	80018d4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001894:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001898:	d11e      	bne.n	80018d8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800189e:	e01b      	b.n	80018d8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d902      	bls.n	80018ac <DMA_CheckFifoParam+0xb4>
 80018a6:	2b03      	cmp	r3, #3
 80018a8:	d003      	beq.n	80018b2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80018aa:	e018      	b.n	80018de <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	73fb      	strb	r3, [r7, #15]
      break;
 80018b0:	e015      	b.n	80018de <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d00e      	beq.n	80018dc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	73fb      	strb	r3, [r7, #15]
      break;
 80018c2:	e00b      	b.n	80018dc <DMA_CheckFifoParam+0xe4>
      break;
 80018c4:	bf00      	nop
 80018c6:	e00a      	b.n	80018de <DMA_CheckFifoParam+0xe6>
      break;
 80018c8:	bf00      	nop
 80018ca:	e008      	b.n	80018de <DMA_CheckFifoParam+0xe6>
      break;
 80018cc:	bf00      	nop
 80018ce:	e006      	b.n	80018de <DMA_CheckFifoParam+0xe6>
      break;
 80018d0:	bf00      	nop
 80018d2:	e004      	b.n	80018de <DMA_CheckFifoParam+0xe6>
      break;
 80018d4:	bf00      	nop
 80018d6:	e002      	b.n	80018de <DMA_CheckFifoParam+0xe6>
      break;   
 80018d8:	bf00      	nop
 80018da:	e000      	b.n	80018de <DMA_CheckFifoParam+0xe6>
      break;
 80018dc:	bf00      	nop
    }
  } 
  
  return status; 
 80018de:	7bfb      	ldrb	r3, [r7, #15]
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3714      	adds	r7, #20
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b089      	sub	sp, #36	; 0x24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018f6:	2300      	movs	r3, #0
 80018f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018fa:	2300      	movs	r3, #0
 80018fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018fe:	2300      	movs	r3, #0
 8001900:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001902:	2300      	movs	r3, #0
 8001904:	61fb      	str	r3, [r7, #28]
 8001906:	e159      	b.n	8001bbc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001908:	2201      	movs	r2, #1
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	697a      	ldr	r2, [r7, #20]
 8001918:	4013      	ands	r3, r2
 800191a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	429a      	cmp	r2, r3
 8001922:	f040 8148 	bne.w	8001bb6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	2b01      	cmp	r3, #1
 800192c:	d00b      	beq.n	8001946 <HAL_GPIO_Init+0x5a>
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	2b02      	cmp	r3, #2
 8001934:	d007      	beq.n	8001946 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800193a:	2b11      	cmp	r3, #17
 800193c:	d003      	beq.n	8001946 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	2b12      	cmp	r3, #18
 8001944:	d130      	bne.n	80019a8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	2203      	movs	r2, #3
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	43db      	mvns	r3, r3
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	4013      	ands	r3, r2
 800195c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	68da      	ldr	r2, [r3, #12]
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	fa02 f303 	lsl.w	r3, r2, r3
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	4313      	orrs	r3, r2
 800196e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	69ba      	ldr	r2, [r7, #24]
 8001974:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800197c:	2201      	movs	r2, #1
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	43db      	mvns	r3, r3
 8001986:	69ba      	ldr	r2, [r7, #24]
 8001988:	4013      	ands	r3, r2
 800198a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	091b      	lsrs	r3, r3, #4
 8001992:	f003 0201 	and.w	r2, r3, #1
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	4313      	orrs	r3, r2
 80019a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	2203      	movs	r2, #3
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	43db      	mvns	r3, r3
 80019ba:	69ba      	ldr	r2, [r7, #24]
 80019bc:	4013      	ands	r3, r2
 80019be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	689a      	ldr	r2, [r3, #8]
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	fa02 f303 	lsl.w	r3, r2, r3
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d003      	beq.n	80019e8 <HAL_GPIO_Init+0xfc>
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	2b12      	cmp	r3, #18
 80019e6:	d123      	bne.n	8001a30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	08da      	lsrs	r2, r3, #3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	3208      	adds	r2, #8
 80019f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	f003 0307 	and.w	r3, r3, #7
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	220f      	movs	r2, #15
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	43db      	mvns	r3, r3
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	691a      	ldr	r2, [r3, #16]
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	f003 0307 	and.w	r3, r3, #7
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	08da      	lsrs	r2, r3, #3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	3208      	adds	r2, #8
 8001a2a:	69b9      	ldr	r1, [r7, #24]
 8001a2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	2203      	movs	r2, #3
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	43db      	mvns	r3, r3
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	4013      	ands	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f003 0203 	and.w	r2, r3, #3
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	f000 80a2 	beq.w	8001bb6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	60fb      	str	r3, [r7, #12]
 8001a76:	4b56      	ldr	r3, [pc, #344]	; (8001bd0 <HAL_GPIO_Init+0x2e4>)
 8001a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7a:	4a55      	ldr	r2, [pc, #340]	; (8001bd0 <HAL_GPIO_Init+0x2e4>)
 8001a7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a80:	6453      	str	r3, [r2, #68]	; 0x44
 8001a82:	4b53      	ldr	r3, [pc, #332]	; (8001bd0 <HAL_GPIO_Init+0x2e4>)
 8001a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a8a:	60fb      	str	r3, [r7, #12]
 8001a8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a8e:	4a51      	ldr	r2, [pc, #324]	; (8001bd4 <HAL_GPIO_Init+0x2e8>)
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	089b      	lsrs	r3, r3, #2
 8001a94:	3302      	adds	r3, #2
 8001a96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	f003 0303 	and.w	r3, r3, #3
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	220f      	movs	r2, #15
 8001aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aaa:	43db      	mvns	r3, r3
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	4013      	ands	r3, r2
 8001ab0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a48      	ldr	r2, [pc, #288]	; (8001bd8 <HAL_GPIO_Init+0x2ec>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d019      	beq.n	8001aee <HAL_GPIO_Init+0x202>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a47      	ldr	r2, [pc, #284]	; (8001bdc <HAL_GPIO_Init+0x2f0>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d013      	beq.n	8001aea <HAL_GPIO_Init+0x1fe>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4a46      	ldr	r2, [pc, #280]	; (8001be0 <HAL_GPIO_Init+0x2f4>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d00d      	beq.n	8001ae6 <HAL_GPIO_Init+0x1fa>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a45      	ldr	r2, [pc, #276]	; (8001be4 <HAL_GPIO_Init+0x2f8>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d007      	beq.n	8001ae2 <HAL_GPIO_Init+0x1f6>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a44      	ldr	r2, [pc, #272]	; (8001be8 <HAL_GPIO_Init+0x2fc>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d101      	bne.n	8001ade <HAL_GPIO_Init+0x1f2>
 8001ada:	2304      	movs	r3, #4
 8001adc:	e008      	b.n	8001af0 <HAL_GPIO_Init+0x204>
 8001ade:	2307      	movs	r3, #7
 8001ae0:	e006      	b.n	8001af0 <HAL_GPIO_Init+0x204>
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e004      	b.n	8001af0 <HAL_GPIO_Init+0x204>
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	e002      	b.n	8001af0 <HAL_GPIO_Init+0x204>
 8001aea:	2301      	movs	r3, #1
 8001aec:	e000      	b.n	8001af0 <HAL_GPIO_Init+0x204>
 8001aee:	2300      	movs	r3, #0
 8001af0:	69fa      	ldr	r2, [r7, #28]
 8001af2:	f002 0203 	and.w	r2, r2, #3
 8001af6:	0092      	lsls	r2, r2, #2
 8001af8:	4093      	lsls	r3, r2
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b00:	4934      	ldr	r1, [pc, #208]	; (8001bd4 <HAL_GPIO_Init+0x2e8>)
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	089b      	lsrs	r3, r3, #2
 8001b06:	3302      	adds	r3, #2
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b0e:	4b37      	ldr	r3, [pc, #220]	; (8001bec <HAL_GPIO_Init+0x300>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	43db      	mvns	r3, r3
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d003      	beq.n	8001b32 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b32:	4a2e      	ldr	r2, [pc, #184]	; (8001bec <HAL_GPIO_Init+0x300>)
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b38:	4b2c      	ldr	r3, [pc, #176]	; (8001bec <HAL_GPIO_Init+0x300>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	43db      	mvns	r3, r3
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	4013      	ands	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d003      	beq.n	8001b5c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b5c:	4a23      	ldr	r2, [pc, #140]	; (8001bec <HAL_GPIO_Init+0x300>)
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b62:	4b22      	ldr	r3, [pc, #136]	; (8001bec <HAL_GPIO_Init+0x300>)
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	43db      	mvns	r3, r3
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d003      	beq.n	8001b86 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b86:	4a19      	ldr	r2, [pc, #100]	; (8001bec <HAL_GPIO_Init+0x300>)
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b8c:	4b17      	ldr	r3, [pc, #92]	; (8001bec <HAL_GPIO_Init+0x300>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	43db      	mvns	r3, r3
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d003      	beq.n	8001bb0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bb0:	4a0e      	ldr	r2, [pc, #56]	; (8001bec <HAL_GPIO_Init+0x300>)
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	3301      	adds	r3, #1
 8001bba:	61fb      	str	r3, [r7, #28]
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	2b0f      	cmp	r3, #15
 8001bc0:	f67f aea2 	bls.w	8001908 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bc4:	bf00      	nop
 8001bc6:	3724      	adds	r7, #36	; 0x24
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	40013800 	.word	0x40013800
 8001bd8:	40020000 	.word	0x40020000
 8001bdc:	40020400 	.word	0x40020400
 8001be0:	40020800 	.word	0x40020800
 8001be4:	40020c00 	.word	0x40020c00
 8001be8:	40021000 	.word	0x40021000
 8001bec:	40013c00 	.word	0x40013c00

08001bf0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	807b      	strh	r3, [r7, #2]
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c00:	787b      	ldrb	r3, [r7, #1]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d003      	beq.n	8001c0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c06:	887a      	ldrh	r2, [r7, #2]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c0c:	e003      	b.n	8001c16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c0e:	887b      	ldrh	r3, [r7, #2]
 8001c10:	041a      	lsls	r2, r3, #16
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	619a      	str	r2, [r3, #24]
}
 8001c16:	bf00      	nop
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
	...

08001c24 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d101      	bne.n	8001c36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e25b      	b.n	80020ee <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d075      	beq.n	8001d2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c42:	4ba3      	ldr	r3, [pc, #652]	; (8001ed0 <HAL_RCC_OscConfig+0x2ac>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f003 030c 	and.w	r3, r3, #12
 8001c4a:	2b04      	cmp	r3, #4
 8001c4c:	d00c      	beq.n	8001c68 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c4e:	4ba0      	ldr	r3, [pc, #640]	; (8001ed0 <HAL_RCC_OscConfig+0x2ac>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c56:	2b08      	cmp	r3, #8
 8001c58:	d112      	bne.n	8001c80 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c5a:	4b9d      	ldr	r3, [pc, #628]	; (8001ed0 <HAL_RCC_OscConfig+0x2ac>)
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c66:	d10b      	bne.n	8001c80 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c68:	4b99      	ldr	r3, [pc, #612]	; (8001ed0 <HAL_RCC_OscConfig+0x2ac>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d05b      	beq.n	8001d2c <HAL_RCC_OscConfig+0x108>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d157      	bne.n	8001d2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e236      	b.n	80020ee <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c88:	d106      	bne.n	8001c98 <HAL_RCC_OscConfig+0x74>
 8001c8a:	4b91      	ldr	r3, [pc, #580]	; (8001ed0 <HAL_RCC_OscConfig+0x2ac>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a90      	ldr	r2, [pc, #576]	; (8001ed0 <HAL_RCC_OscConfig+0x2ac>)
 8001c90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c94:	6013      	str	r3, [r2, #0]
 8001c96:	e01d      	b.n	8001cd4 <HAL_RCC_OscConfig+0xb0>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ca0:	d10c      	bne.n	8001cbc <HAL_RCC_OscConfig+0x98>
 8001ca2:	4b8b      	ldr	r3, [pc, #556]	; (8001ed0 <HAL_RCC_OscConfig+0x2ac>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a8a      	ldr	r2, [pc, #552]	; (8001ed0 <HAL_RCC_OscConfig+0x2ac>)
 8001ca8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cac:	6013      	str	r3, [r2, #0]
 8001cae:	4b88      	ldr	r3, [pc, #544]	; (8001ed0 <HAL_RCC_OscConfig+0x2ac>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a87      	ldr	r2, [pc, #540]	; (8001ed0 <HAL_RCC_OscConfig+0x2ac>)
 8001cb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cb8:	6013      	str	r3, [r2, #0]
 8001cba:	e00b      	b.n	8001cd4 <HAL_RCC_OscConfig+0xb0>
 8001cbc:	4b84      	ldr	r3, [pc, #528]	; (8001ed0 <HAL_RCC_OscConfig+0x2ac>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a83      	ldr	r2, [pc, #524]	; (8001ed0 <HAL_RCC_OscConfig+0x2ac>)
 8001cc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cc6:	6013      	str	r3, [r2, #0]
 8001cc8:	4b81      	ldr	r3, [pc, #516]	; (8001ed0 <HAL_RCC_OscConfig+0x2ac>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a80      	ldr	r2, [pc, #512]	; (8001ed0 <HAL_RCC_OscConfig+0x2ac>)
 8001cce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d013      	beq.n	8001d04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cdc:	f7ff f958 	bl	8000f90 <HAL_GetTick>
 8001ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ce2:	e008      	b.n	8001cf6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ce4:	f7ff f954 	bl	8000f90 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b64      	cmp	r3, #100	; 0x64
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e1fb      	b.n	80020ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cf6:	4b76      	ldr	r3, [pc, #472]	; (8001ed0 <HAL_RCC_OscConfig+0x2ac>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d0f0      	beq.n	8001ce4 <HAL_RCC_OscConfig+0xc0>
 8001d02:	e014      	b.n	8001d2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d04:	f7ff f944 	bl	8000f90 <HAL_GetTick>
 8001d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d0a:	e008      	b.n	8001d1e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d0c:	f7ff f940 	bl	8000f90 <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b64      	cmp	r3, #100	; 0x64
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e1e7      	b.n	80020ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d1e:	4b6c      	ldr	r3, [pc, #432]	; (8001ed0 <HAL_RCC_OscConfig+0x2ac>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d1f0      	bne.n	8001d0c <HAL_RCC_OscConfig+0xe8>
 8001d2a:	e000      	b.n	8001d2e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d063      	beq.n	8001e02 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d3a:	4b65      	ldr	r3, [pc, #404]	; (8001ed0 <HAL_RCC_OscConfig+0x2ac>)
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f003 030c 	and.w	r3, r3, #12
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d00b      	beq.n	8001d5e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d46:	4b62      	ldr	r3, [pc, #392]	; (8001ed0 <HAL_RCC_OscConfig+0x2ac>)
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d4e:	2b08      	cmp	r3, #8
 8001d50:	d11c      	bne.n	8001d8c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d52:	4b5f      	ldr	r3, [pc, #380]	; (8001ed0 <HAL_RCC_OscConfig+0x2ac>)
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d116      	bne.n	8001d8c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d5e:	4b5c      	ldr	r3, [pc, #368]	; (8001ed0 <HAL_RCC_OscConfig+0x2ac>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d005      	beq.n	8001d76 <HAL_RCC_OscConfig+0x152>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d001      	beq.n	8001d76 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e1bb      	b.n	80020ee <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d76:	4b56      	ldr	r3, [pc, #344]	; (8001ed0 <HAL_RCC_OscConfig+0x2ac>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	691b      	ldr	r3, [r3, #16]
 8001d82:	00db      	lsls	r3, r3, #3
 8001d84:	4952      	ldr	r1, [pc, #328]	; (8001ed0 <HAL_RCC_OscConfig+0x2ac>)
 8001d86:	4313      	orrs	r3, r2
 8001d88:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d8a:	e03a      	b.n	8001e02 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d020      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d94:	4b4f      	ldr	r3, [pc, #316]	; (8001ed4 <HAL_RCC_OscConfig+0x2b0>)
 8001d96:	2201      	movs	r2, #1
 8001d98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d9a:	f7ff f8f9 	bl	8000f90 <HAL_GetTick>
 8001d9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001da0:	e008      	b.n	8001db4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001da2:	f7ff f8f5 	bl	8000f90 <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d901      	bls.n	8001db4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e19c      	b.n	80020ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001db4:	4b46      	ldr	r3, [pc, #280]	; (8001ed0 <HAL_RCC_OscConfig+0x2ac>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0302 	and.w	r3, r3, #2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d0f0      	beq.n	8001da2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dc0:	4b43      	ldr	r3, [pc, #268]	; (8001ed0 <HAL_RCC_OscConfig+0x2ac>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	691b      	ldr	r3, [r3, #16]
 8001dcc:	00db      	lsls	r3, r3, #3
 8001dce:	4940      	ldr	r1, [pc, #256]	; (8001ed0 <HAL_RCC_OscConfig+0x2ac>)
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	600b      	str	r3, [r1, #0]
 8001dd4:	e015      	b.n	8001e02 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dd6:	4b3f      	ldr	r3, [pc, #252]	; (8001ed4 <HAL_RCC_OscConfig+0x2b0>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ddc:	f7ff f8d8 	bl	8000f90 <HAL_GetTick>
 8001de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001de2:	e008      	b.n	8001df6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001de4:	f7ff f8d4 	bl	8000f90 <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e17b      	b.n	80020ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001df6:	4b36      	ldr	r3, [pc, #216]	; (8001ed0 <HAL_RCC_OscConfig+0x2ac>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d1f0      	bne.n	8001de4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0308 	and.w	r3, r3, #8
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d030      	beq.n	8001e70 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	695b      	ldr	r3, [r3, #20]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d016      	beq.n	8001e44 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e16:	4b30      	ldr	r3, [pc, #192]	; (8001ed8 <HAL_RCC_OscConfig+0x2b4>)
 8001e18:	2201      	movs	r2, #1
 8001e1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e1c:	f7ff f8b8 	bl	8000f90 <HAL_GetTick>
 8001e20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e22:	e008      	b.n	8001e36 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e24:	f7ff f8b4 	bl	8000f90 <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e15b      	b.n	80020ee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e36:	4b26      	ldr	r3, [pc, #152]	; (8001ed0 <HAL_RCC_OscConfig+0x2ac>)
 8001e38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d0f0      	beq.n	8001e24 <HAL_RCC_OscConfig+0x200>
 8001e42:	e015      	b.n	8001e70 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e44:	4b24      	ldr	r3, [pc, #144]	; (8001ed8 <HAL_RCC_OscConfig+0x2b4>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e4a:	f7ff f8a1 	bl	8000f90 <HAL_GetTick>
 8001e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e50:	e008      	b.n	8001e64 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e52:	f7ff f89d 	bl	8000f90 <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e144      	b.n	80020ee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e64:	4b1a      	ldr	r3, [pc, #104]	; (8001ed0 <HAL_RCC_OscConfig+0x2ac>)
 8001e66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e68:	f003 0302 	and.w	r3, r3, #2
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d1f0      	bne.n	8001e52 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0304 	and.w	r3, r3, #4
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	f000 80a0 	beq.w	8001fbe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e82:	4b13      	ldr	r3, [pc, #76]	; (8001ed0 <HAL_RCC_OscConfig+0x2ac>)
 8001e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d10f      	bne.n	8001eae <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e8e:	2300      	movs	r3, #0
 8001e90:	60bb      	str	r3, [r7, #8]
 8001e92:	4b0f      	ldr	r3, [pc, #60]	; (8001ed0 <HAL_RCC_OscConfig+0x2ac>)
 8001e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e96:	4a0e      	ldr	r2, [pc, #56]	; (8001ed0 <HAL_RCC_OscConfig+0x2ac>)
 8001e98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e9e:	4b0c      	ldr	r3, [pc, #48]	; (8001ed0 <HAL_RCC_OscConfig+0x2ac>)
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea6:	60bb      	str	r3, [r7, #8]
 8001ea8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eae:	4b0b      	ldr	r3, [pc, #44]	; (8001edc <HAL_RCC_OscConfig+0x2b8>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d121      	bne.n	8001efe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eba:	4b08      	ldr	r3, [pc, #32]	; (8001edc <HAL_RCC_OscConfig+0x2b8>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a07      	ldr	r2, [pc, #28]	; (8001edc <HAL_RCC_OscConfig+0x2b8>)
 8001ec0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ec4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ec6:	f7ff f863 	bl	8000f90 <HAL_GetTick>
 8001eca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ecc:	e011      	b.n	8001ef2 <HAL_RCC_OscConfig+0x2ce>
 8001ece:	bf00      	nop
 8001ed0:	40023800 	.word	0x40023800
 8001ed4:	42470000 	.word	0x42470000
 8001ed8:	42470e80 	.word	0x42470e80
 8001edc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ee0:	f7ff f856 	bl	8000f90 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e0fd      	b.n	80020ee <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef2:	4b81      	ldr	r3, [pc, #516]	; (80020f8 <HAL_RCC_OscConfig+0x4d4>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d0f0      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d106      	bne.n	8001f14 <HAL_RCC_OscConfig+0x2f0>
 8001f06:	4b7d      	ldr	r3, [pc, #500]	; (80020fc <HAL_RCC_OscConfig+0x4d8>)
 8001f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f0a:	4a7c      	ldr	r2, [pc, #496]	; (80020fc <HAL_RCC_OscConfig+0x4d8>)
 8001f0c:	f043 0301 	orr.w	r3, r3, #1
 8001f10:	6713      	str	r3, [r2, #112]	; 0x70
 8001f12:	e01c      	b.n	8001f4e <HAL_RCC_OscConfig+0x32a>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	2b05      	cmp	r3, #5
 8001f1a:	d10c      	bne.n	8001f36 <HAL_RCC_OscConfig+0x312>
 8001f1c:	4b77      	ldr	r3, [pc, #476]	; (80020fc <HAL_RCC_OscConfig+0x4d8>)
 8001f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f20:	4a76      	ldr	r2, [pc, #472]	; (80020fc <HAL_RCC_OscConfig+0x4d8>)
 8001f22:	f043 0304 	orr.w	r3, r3, #4
 8001f26:	6713      	str	r3, [r2, #112]	; 0x70
 8001f28:	4b74      	ldr	r3, [pc, #464]	; (80020fc <HAL_RCC_OscConfig+0x4d8>)
 8001f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f2c:	4a73      	ldr	r2, [pc, #460]	; (80020fc <HAL_RCC_OscConfig+0x4d8>)
 8001f2e:	f043 0301 	orr.w	r3, r3, #1
 8001f32:	6713      	str	r3, [r2, #112]	; 0x70
 8001f34:	e00b      	b.n	8001f4e <HAL_RCC_OscConfig+0x32a>
 8001f36:	4b71      	ldr	r3, [pc, #452]	; (80020fc <HAL_RCC_OscConfig+0x4d8>)
 8001f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f3a:	4a70      	ldr	r2, [pc, #448]	; (80020fc <HAL_RCC_OscConfig+0x4d8>)
 8001f3c:	f023 0301 	bic.w	r3, r3, #1
 8001f40:	6713      	str	r3, [r2, #112]	; 0x70
 8001f42:	4b6e      	ldr	r3, [pc, #440]	; (80020fc <HAL_RCC_OscConfig+0x4d8>)
 8001f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f46:	4a6d      	ldr	r2, [pc, #436]	; (80020fc <HAL_RCC_OscConfig+0x4d8>)
 8001f48:	f023 0304 	bic.w	r3, r3, #4
 8001f4c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d015      	beq.n	8001f82 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f56:	f7ff f81b 	bl	8000f90 <HAL_GetTick>
 8001f5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f5c:	e00a      	b.n	8001f74 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f5e:	f7ff f817 	bl	8000f90 <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e0bc      	b.n	80020ee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f74:	4b61      	ldr	r3, [pc, #388]	; (80020fc <HAL_RCC_OscConfig+0x4d8>)
 8001f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d0ee      	beq.n	8001f5e <HAL_RCC_OscConfig+0x33a>
 8001f80:	e014      	b.n	8001fac <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f82:	f7ff f805 	bl	8000f90 <HAL_GetTick>
 8001f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f88:	e00a      	b.n	8001fa0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f8a:	f7ff f801 	bl	8000f90 <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d901      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e0a6      	b.n	80020ee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fa0:	4b56      	ldr	r3, [pc, #344]	; (80020fc <HAL_RCC_OscConfig+0x4d8>)
 8001fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fa4:	f003 0302 	and.w	r3, r3, #2
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d1ee      	bne.n	8001f8a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fac:	7dfb      	ldrb	r3, [r7, #23]
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d105      	bne.n	8001fbe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fb2:	4b52      	ldr	r3, [pc, #328]	; (80020fc <HAL_RCC_OscConfig+0x4d8>)
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb6:	4a51      	ldr	r2, [pc, #324]	; (80020fc <HAL_RCC_OscConfig+0x4d8>)
 8001fb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fbc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	699b      	ldr	r3, [r3, #24]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	f000 8092 	beq.w	80020ec <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001fc8:	4b4c      	ldr	r3, [pc, #304]	; (80020fc <HAL_RCC_OscConfig+0x4d8>)
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f003 030c 	and.w	r3, r3, #12
 8001fd0:	2b08      	cmp	r3, #8
 8001fd2:	d05c      	beq.n	800208e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d141      	bne.n	8002060 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fdc:	4b48      	ldr	r3, [pc, #288]	; (8002100 <HAL_RCC_OscConfig+0x4dc>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe2:	f7fe ffd5 	bl	8000f90 <HAL_GetTick>
 8001fe6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fe8:	e008      	b.n	8001ffc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fea:	f7fe ffd1 	bl	8000f90 <HAL_GetTick>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d901      	bls.n	8001ffc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e078      	b.n	80020ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ffc:	4b3f      	ldr	r3, [pc, #252]	; (80020fc <HAL_RCC_OscConfig+0x4d8>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d1f0      	bne.n	8001fea <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	69da      	ldr	r2, [r3, #28]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a1b      	ldr	r3, [r3, #32]
 8002010:	431a      	orrs	r2, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002016:	019b      	lsls	r3, r3, #6
 8002018:	431a      	orrs	r2, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800201e:	085b      	lsrs	r3, r3, #1
 8002020:	3b01      	subs	r3, #1
 8002022:	041b      	lsls	r3, r3, #16
 8002024:	431a      	orrs	r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800202a:	061b      	lsls	r3, r3, #24
 800202c:	4933      	ldr	r1, [pc, #204]	; (80020fc <HAL_RCC_OscConfig+0x4d8>)
 800202e:	4313      	orrs	r3, r2
 8002030:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002032:	4b33      	ldr	r3, [pc, #204]	; (8002100 <HAL_RCC_OscConfig+0x4dc>)
 8002034:	2201      	movs	r2, #1
 8002036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002038:	f7fe ffaa 	bl	8000f90 <HAL_GetTick>
 800203c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800203e:	e008      	b.n	8002052 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002040:	f7fe ffa6 	bl	8000f90 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b02      	cmp	r3, #2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e04d      	b.n	80020ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002052:	4b2a      	ldr	r3, [pc, #168]	; (80020fc <HAL_RCC_OscConfig+0x4d8>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d0f0      	beq.n	8002040 <HAL_RCC_OscConfig+0x41c>
 800205e:	e045      	b.n	80020ec <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002060:	4b27      	ldr	r3, [pc, #156]	; (8002100 <HAL_RCC_OscConfig+0x4dc>)
 8002062:	2200      	movs	r2, #0
 8002064:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002066:	f7fe ff93 	bl	8000f90 <HAL_GetTick>
 800206a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800206c:	e008      	b.n	8002080 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800206e:	f7fe ff8f 	bl	8000f90 <HAL_GetTick>
 8002072:	4602      	mov	r2, r0
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	2b02      	cmp	r3, #2
 800207a:	d901      	bls.n	8002080 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	e036      	b.n	80020ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002080:	4b1e      	ldr	r3, [pc, #120]	; (80020fc <HAL_RCC_OscConfig+0x4d8>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d1f0      	bne.n	800206e <HAL_RCC_OscConfig+0x44a>
 800208c:	e02e      	b.n	80020ec <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	2b01      	cmp	r3, #1
 8002094:	d101      	bne.n	800209a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e029      	b.n	80020ee <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800209a:	4b18      	ldr	r3, [pc, #96]	; (80020fc <HAL_RCC_OscConfig+0x4d8>)
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	69db      	ldr	r3, [r3, #28]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d11c      	bne.n	80020e8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d115      	bne.n	80020e8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80020bc:	68fa      	ldr	r2, [r7, #12]
 80020be:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80020c2:	4013      	ands	r3, r2
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d10d      	bne.n	80020e8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d106      	bne.n	80020e8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d001      	beq.n	80020ec <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e000      	b.n	80020ee <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3718      	adds	r7, #24
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	40007000 	.word	0x40007000
 80020fc:	40023800 	.word	0x40023800
 8002100:	42470060 	.word	0x42470060

08002104 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d101      	bne.n	8002118 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e0cc      	b.n	80022b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002118:	4b68      	ldr	r3, [pc, #416]	; (80022bc <HAL_RCC_ClockConfig+0x1b8>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 030f 	and.w	r3, r3, #15
 8002120:	683a      	ldr	r2, [r7, #0]
 8002122:	429a      	cmp	r2, r3
 8002124:	d90c      	bls.n	8002140 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002126:	4b65      	ldr	r3, [pc, #404]	; (80022bc <HAL_RCC_ClockConfig+0x1b8>)
 8002128:	683a      	ldr	r2, [r7, #0]
 800212a:	b2d2      	uxtb	r2, r2
 800212c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800212e:	4b63      	ldr	r3, [pc, #396]	; (80022bc <HAL_RCC_ClockConfig+0x1b8>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 030f 	and.w	r3, r3, #15
 8002136:	683a      	ldr	r2, [r7, #0]
 8002138:	429a      	cmp	r2, r3
 800213a:	d001      	beq.n	8002140 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e0b8      	b.n	80022b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0302 	and.w	r3, r3, #2
 8002148:	2b00      	cmp	r3, #0
 800214a:	d020      	beq.n	800218e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0304 	and.w	r3, r3, #4
 8002154:	2b00      	cmp	r3, #0
 8002156:	d005      	beq.n	8002164 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002158:	4b59      	ldr	r3, [pc, #356]	; (80022c0 <HAL_RCC_ClockConfig+0x1bc>)
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	4a58      	ldr	r2, [pc, #352]	; (80022c0 <HAL_RCC_ClockConfig+0x1bc>)
 800215e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002162:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0308 	and.w	r3, r3, #8
 800216c:	2b00      	cmp	r3, #0
 800216e:	d005      	beq.n	800217c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002170:	4b53      	ldr	r3, [pc, #332]	; (80022c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	4a52      	ldr	r2, [pc, #328]	; (80022c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002176:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800217a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800217c:	4b50      	ldr	r3, [pc, #320]	; (80022c0 <HAL_RCC_ClockConfig+0x1bc>)
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	494d      	ldr	r1, [pc, #308]	; (80022c0 <HAL_RCC_ClockConfig+0x1bc>)
 800218a:	4313      	orrs	r3, r2
 800218c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	2b00      	cmp	r3, #0
 8002198:	d044      	beq.n	8002224 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d107      	bne.n	80021b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021a2:	4b47      	ldr	r3, [pc, #284]	; (80022c0 <HAL_RCC_ClockConfig+0x1bc>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d119      	bne.n	80021e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e07f      	b.n	80022b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d003      	beq.n	80021c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021be:	2b03      	cmp	r3, #3
 80021c0:	d107      	bne.n	80021d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021c2:	4b3f      	ldr	r3, [pc, #252]	; (80022c0 <HAL_RCC_ClockConfig+0x1bc>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d109      	bne.n	80021e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e06f      	b.n	80022b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021d2:	4b3b      	ldr	r3, [pc, #236]	; (80022c0 <HAL_RCC_ClockConfig+0x1bc>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d101      	bne.n	80021e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e067      	b.n	80022b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021e2:	4b37      	ldr	r3, [pc, #220]	; (80022c0 <HAL_RCC_ClockConfig+0x1bc>)
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f023 0203 	bic.w	r2, r3, #3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	4934      	ldr	r1, [pc, #208]	; (80022c0 <HAL_RCC_ClockConfig+0x1bc>)
 80021f0:	4313      	orrs	r3, r2
 80021f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021f4:	f7fe fecc 	bl	8000f90 <HAL_GetTick>
 80021f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021fa:	e00a      	b.n	8002212 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021fc:	f7fe fec8 	bl	8000f90 <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	f241 3288 	movw	r2, #5000	; 0x1388
 800220a:	4293      	cmp	r3, r2
 800220c:	d901      	bls.n	8002212 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e04f      	b.n	80022b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002212:	4b2b      	ldr	r3, [pc, #172]	; (80022c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	f003 020c 	and.w	r2, r3, #12
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	429a      	cmp	r2, r3
 8002222:	d1eb      	bne.n	80021fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002224:	4b25      	ldr	r3, [pc, #148]	; (80022bc <HAL_RCC_ClockConfig+0x1b8>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 030f 	and.w	r3, r3, #15
 800222c:	683a      	ldr	r2, [r7, #0]
 800222e:	429a      	cmp	r2, r3
 8002230:	d20c      	bcs.n	800224c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002232:	4b22      	ldr	r3, [pc, #136]	; (80022bc <HAL_RCC_ClockConfig+0x1b8>)
 8002234:	683a      	ldr	r2, [r7, #0]
 8002236:	b2d2      	uxtb	r2, r2
 8002238:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800223a:	4b20      	ldr	r3, [pc, #128]	; (80022bc <HAL_RCC_ClockConfig+0x1b8>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 030f 	and.w	r3, r3, #15
 8002242:	683a      	ldr	r2, [r7, #0]
 8002244:	429a      	cmp	r2, r3
 8002246:	d001      	beq.n	800224c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e032      	b.n	80022b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0304 	and.w	r3, r3, #4
 8002254:	2b00      	cmp	r3, #0
 8002256:	d008      	beq.n	800226a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002258:	4b19      	ldr	r3, [pc, #100]	; (80022c0 <HAL_RCC_ClockConfig+0x1bc>)
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	4916      	ldr	r1, [pc, #88]	; (80022c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002266:	4313      	orrs	r3, r2
 8002268:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0308 	and.w	r3, r3, #8
 8002272:	2b00      	cmp	r3, #0
 8002274:	d009      	beq.n	800228a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002276:	4b12      	ldr	r3, [pc, #72]	; (80022c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	490e      	ldr	r1, [pc, #56]	; (80022c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002286:	4313      	orrs	r3, r2
 8002288:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800228a:	f000 f821 	bl	80022d0 <HAL_RCC_GetSysClockFreq>
 800228e:	4601      	mov	r1, r0
 8002290:	4b0b      	ldr	r3, [pc, #44]	; (80022c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	091b      	lsrs	r3, r3, #4
 8002296:	f003 030f 	and.w	r3, r3, #15
 800229a:	4a0a      	ldr	r2, [pc, #40]	; (80022c4 <HAL_RCC_ClockConfig+0x1c0>)
 800229c:	5cd3      	ldrb	r3, [r2, r3]
 800229e:	fa21 f303 	lsr.w	r3, r1, r3
 80022a2:	4a09      	ldr	r2, [pc, #36]	; (80022c8 <HAL_RCC_ClockConfig+0x1c4>)
 80022a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80022a6:	4b09      	ldr	r3, [pc, #36]	; (80022cc <HAL_RCC_ClockConfig+0x1c8>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7fe fe2c 	bl	8000f08 <HAL_InitTick>

  return HAL_OK;
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3710      	adds	r7, #16
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	40023c00 	.word	0x40023c00
 80022c0:	40023800 	.word	0x40023800
 80022c4:	08003e40 	.word	0x08003e40
 80022c8:	20000004 	.word	0x20000004
 80022cc:	20000008 	.word	0x20000008

080022d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80022d6:	2300      	movs	r3, #0
 80022d8:	607b      	str	r3, [r7, #4]
 80022da:	2300      	movs	r3, #0
 80022dc:	60fb      	str	r3, [r7, #12]
 80022de:	2300      	movs	r3, #0
 80022e0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80022e2:	2300      	movs	r3, #0
 80022e4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022e6:	4b50      	ldr	r3, [pc, #320]	; (8002428 <HAL_RCC_GetSysClockFreq+0x158>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f003 030c 	and.w	r3, r3, #12
 80022ee:	2b04      	cmp	r3, #4
 80022f0:	d007      	beq.n	8002302 <HAL_RCC_GetSysClockFreq+0x32>
 80022f2:	2b08      	cmp	r3, #8
 80022f4:	d008      	beq.n	8002308 <HAL_RCC_GetSysClockFreq+0x38>
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	f040 808d 	bne.w	8002416 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022fc:	4b4b      	ldr	r3, [pc, #300]	; (800242c <HAL_RCC_GetSysClockFreq+0x15c>)
 80022fe:	60bb      	str	r3, [r7, #8]
       break;
 8002300:	e08c      	b.n	800241c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002302:	4b4b      	ldr	r3, [pc, #300]	; (8002430 <HAL_RCC_GetSysClockFreq+0x160>)
 8002304:	60bb      	str	r3, [r7, #8]
      break;
 8002306:	e089      	b.n	800241c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002308:	4b47      	ldr	r3, [pc, #284]	; (8002428 <HAL_RCC_GetSysClockFreq+0x158>)
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002310:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002312:	4b45      	ldr	r3, [pc, #276]	; (8002428 <HAL_RCC_GetSysClockFreq+0x158>)
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d023      	beq.n	8002366 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800231e:	4b42      	ldr	r3, [pc, #264]	; (8002428 <HAL_RCC_GetSysClockFreq+0x158>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	099b      	lsrs	r3, r3, #6
 8002324:	f04f 0400 	mov.w	r4, #0
 8002328:	f240 11ff 	movw	r1, #511	; 0x1ff
 800232c:	f04f 0200 	mov.w	r2, #0
 8002330:	ea03 0501 	and.w	r5, r3, r1
 8002334:	ea04 0602 	and.w	r6, r4, r2
 8002338:	4a3d      	ldr	r2, [pc, #244]	; (8002430 <HAL_RCC_GetSysClockFreq+0x160>)
 800233a:	fb02 f106 	mul.w	r1, r2, r6
 800233e:	2200      	movs	r2, #0
 8002340:	fb02 f205 	mul.w	r2, r2, r5
 8002344:	440a      	add	r2, r1
 8002346:	493a      	ldr	r1, [pc, #232]	; (8002430 <HAL_RCC_GetSysClockFreq+0x160>)
 8002348:	fba5 0101 	umull	r0, r1, r5, r1
 800234c:	1853      	adds	r3, r2, r1
 800234e:	4619      	mov	r1, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f04f 0400 	mov.w	r4, #0
 8002356:	461a      	mov	r2, r3
 8002358:	4623      	mov	r3, r4
 800235a:	f7fd ff3d 	bl	80001d8 <__aeabi_uldivmod>
 800235e:	4603      	mov	r3, r0
 8002360:	460c      	mov	r4, r1
 8002362:	60fb      	str	r3, [r7, #12]
 8002364:	e049      	b.n	80023fa <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002366:	4b30      	ldr	r3, [pc, #192]	; (8002428 <HAL_RCC_GetSysClockFreq+0x158>)
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	099b      	lsrs	r3, r3, #6
 800236c:	f04f 0400 	mov.w	r4, #0
 8002370:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002374:	f04f 0200 	mov.w	r2, #0
 8002378:	ea03 0501 	and.w	r5, r3, r1
 800237c:	ea04 0602 	and.w	r6, r4, r2
 8002380:	4629      	mov	r1, r5
 8002382:	4632      	mov	r2, r6
 8002384:	f04f 0300 	mov.w	r3, #0
 8002388:	f04f 0400 	mov.w	r4, #0
 800238c:	0154      	lsls	r4, r2, #5
 800238e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002392:	014b      	lsls	r3, r1, #5
 8002394:	4619      	mov	r1, r3
 8002396:	4622      	mov	r2, r4
 8002398:	1b49      	subs	r1, r1, r5
 800239a:	eb62 0206 	sbc.w	r2, r2, r6
 800239e:	f04f 0300 	mov.w	r3, #0
 80023a2:	f04f 0400 	mov.w	r4, #0
 80023a6:	0194      	lsls	r4, r2, #6
 80023a8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80023ac:	018b      	lsls	r3, r1, #6
 80023ae:	1a5b      	subs	r3, r3, r1
 80023b0:	eb64 0402 	sbc.w	r4, r4, r2
 80023b4:	f04f 0100 	mov.w	r1, #0
 80023b8:	f04f 0200 	mov.w	r2, #0
 80023bc:	00e2      	lsls	r2, r4, #3
 80023be:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80023c2:	00d9      	lsls	r1, r3, #3
 80023c4:	460b      	mov	r3, r1
 80023c6:	4614      	mov	r4, r2
 80023c8:	195b      	adds	r3, r3, r5
 80023ca:	eb44 0406 	adc.w	r4, r4, r6
 80023ce:	f04f 0100 	mov.w	r1, #0
 80023d2:	f04f 0200 	mov.w	r2, #0
 80023d6:	02a2      	lsls	r2, r4, #10
 80023d8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80023dc:	0299      	lsls	r1, r3, #10
 80023de:	460b      	mov	r3, r1
 80023e0:	4614      	mov	r4, r2
 80023e2:	4618      	mov	r0, r3
 80023e4:	4621      	mov	r1, r4
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f04f 0400 	mov.w	r4, #0
 80023ec:	461a      	mov	r2, r3
 80023ee:	4623      	mov	r3, r4
 80023f0:	f7fd fef2 	bl	80001d8 <__aeabi_uldivmod>
 80023f4:	4603      	mov	r3, r0
 80023f6:	460c      	mov	r4, r1
 80023f8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80023fa:	4b0b      	ldr	r3, [pc, #44]	; (8002428 <HAL_RCC_GetSysClockFreq+0x158>)
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	0c1b      	lsrs	r3, r3, #16
 8002400:	f003 0303 	and.w	r3, r3, #3
 8002404:	3301      	adds	r3, #1
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800240a:	68fa      	ldr	r2, [r7, #12]
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002412:	60bb      	str	r3, [r7, #8]
      break;
 8002414:	e002      	b.n	800241c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002416:	4b05      	ldr	r3, [pc, #20]	; (800242c <HAL_RCC_GetSysClockFreq+0x15c>)
 8002418:	60bb      	str	r3, [r7, #8]
      break;
 800241a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800241c:	68bb      	ldr	r3, [r7, #8]
}
 800241e:	4618      	mov	r0, r3
 8002420:	3714      	adds	r7, #20
 8002422:	46bd      	mov	sp, r7
 8002424:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002426:	bf00      	nop
 8002428:	40023800 	.word	0x40023800
 800242c:	00f42400 	.word	0x00f42400
 8002430:	017d7840 	.word	0x017d7840

08002434 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002438:	4b03      	ldr	r3, [pc, #12]	; (8002448 <HAL_RCC_GetHCLKFreq+0x14>)
 800243a:	681b      	ldr	r3, [r3, #0]
}
 800243c:	4618      	mov	r0, r3
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	20000004 	.word	0x20000004

0800244c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002450:	f7ff fff0 	bl	8002434 <HAL_RCC_GetHCLKFreq>
 8002454:	4601      	mov	r1, r0
 8002456:	4b05      	ldr	r3, [pc, #20]	; (800246c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	0a9b      	lsrs	r3, r3, #10
 800245c:	f003 0307 	and.w	r3, r3, #7
 8002460:	4a03      	ldr	r2, [pc, #12]	; (8002470 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002462:	5cd3      	ldrb	r3, [r2, r3]
 8002464:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002468:	4618      	mov	r0, r3
 800246a:	bd80      	pop	{r7, pc}
 800246c:	40023800 	.word	0x40023800
 8002470:	08003e50 	.word	0x08003e50

08002474 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002478:	f7ff ffdc 	bl	8002434 <HAL_RCC_GetHCLKFreq>
 800247c:	4601      	mov	r1, r0
 800247e:	4b05      	ldr	r3, [pc, #20]	; (8002494 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	0b5b      	lsrs	r3, r3, #13
 8002484:	f003 0307 	and.w	r3, r3, #7
 8002488:	4a03      	ldr	r2, [pc, #12]	; (8002498 <HAL_RCC_GetPCLK2Freq+0x24>)
 800248a:	5cd3      	ldrb	r3, [r2, r3]
 800248c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002490:	4618      	mov	r0, r3
 8002492:	bd80      	pop	{r7, pc}
 8002494:	40023800 	.word	0x40023800
 8002498:	08003e50 	.word	0x08003e50

0800249c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e056      	b.n	800255c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d106      	bne.n	80024ce <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f7fe fb5d 	bl	8000b88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2202      	movs	r2, #2
 80024d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024e4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685a      	ldr	r2, [r3, #4]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	431a      	orrs	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	431a      	orrs	r2, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	431a      	orrs	r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	695b      	ldr	r3, [r3, #20]
 8002500:	431a      	orrs	r2, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	699b      	ldr	r3, [r3, #24]
 8002506:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800250a:	431a      	orrs	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	69db      	ldr	r3, [r3, #28]
 8002510:	431a      	orrs	r2, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a1b      	ldr	r3, [r3, #32]
 8002516:	ea42 0103 	orr.w	r1, r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	430a      	orrs	r2, r1
 8002524:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	699b      	ldr	r3, [r3, #24]
 800252a:	0c1b      	lsrs	r3, r3, #16
 800252c:	f003 0104 	and.w	r1, r3, #4
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	430a      	orrs	r2, r1
 800253a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	69da      	ldr	r2, [r3, #28]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800254a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2201      	movs	r2, #1
 8002556:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800255a:	2300      	movs	r3, #0
}
 800255c:	4618      	mov	r0, r3
 800255e:	3708      	adds	r7, #8
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b086      	sub	sp, #24
 8002568:	af00      	add	r7, sp, #0
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	60b9      	str	r1, [r7, #8]
 800256e:	4613      	mov	r3, r2
 8002570:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002572:	2300      	movs	r3, #0
 8002574:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800257c:	2b01      	cmp	r3, #1
 800257e:	d101      	bne.n	8002584 <HAL_SPI_Transmit_DMA+0x20>
 8002580:	2302      	movs	r3, #2
 8002582:	e093      	b.n	80026ac <HAL_SPI_Transmit_DMA+0x148>
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002592:	b2db      	uxtb	r3, r3
 8002594:	2b01      	cmp	r3, #1
 8002596:	d002      	beq.n	800259e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8002598:	2302      	movs	r3, #2
 800259a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800259c:	e081      	b.n	80026a2 <HAL_SPI_Transmit_DMA+0x13e>
  }

  if ((pData == NULL) || (Size == 0U))
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d002      	beq.n	80025aa <HAL_SPI_Transmit_DMA+0x46>
 80025a4:	88fb      	ldrh	r3, [r7, #6]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d102      	bne.n	80025b0 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	75fb      	strb	r3, [r7, #23]
    goto error;
 80025ae:	e078      	b.n	80026a2 <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2203      	movs	r2, #3
 80025b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2200      	movs	r2, #0
 80025bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	68ba      	ldr	r2, [r7, #8]
 80025c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	88fa      	ldrh	r2, [r7, #6]
 80025c8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	88fa      	ldrh	r2, [r7, #6]
 80025ce:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2200      	movs	r2, #0
 80025d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2200      	movs	r2, #0
 80025da:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2200      	movs	r2, #0
 80025e0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2200      	movs	r2, #0
 80025e6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2200      	movs	r2, #0
 80025ec:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025f6:	d107      	bne.n	8002608 <HAL_SPI_Transmit_DMA+0xa4>
  {
    SPI_1LINE_TX(hspi);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002606:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800260c:	4a29      	ldr	r2, [pc, #164]	; (80026b4 <HAL_SPI_Transmit_DMA+0x150>)
 800260e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002614:	4a28      	ldr	r2, [pc, #160]	; (80026b8 <HAL_SPI_Transmit_DMA+0x154>)
 8002616:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800261c:	4a27      	ldr	r2, [pc, #156]	; (80026bc <HAL_SPI_Transmit_DMA+0x158>)
 800261e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002624:	2200      	movs	r2, #0
 8002626:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002630:	4619      	mov	r1, r3
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	330c      	adds	r3, #12
 8002638:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800263e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002640:	f7fe fe72 	bl	8001328 <HAL_DMA_Start_IT>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d00c      	beq.n	8002664 <HAL_SPI_Transmit_DMA+0x100>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800264e:	f043 0210 	orr.w	r2, r3, #16
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2201      	movs	r2, #1
 800265e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8002662:	e01e      	b.n	80026a2 <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800266e:	2b40      	cmp	r3, #64	; 0x40
 8002670:	d007      	beq.n	8002682 <HAL_SPI_Transmit_DMA+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002680:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	685a      	ldr	r2, [r3, #4]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f042 0220 	orr.w	r2, r2, #32
 8002690:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	685a      	ldr	r2, [r3, #4]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f042 0202 	orr.w	r2, r2, #2
 80026a0:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80026aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3718      	adds	r7, #24
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	08002991 	.word	0x08002991
 80026b8:	080028e9 	.word	0x080028e9
 80026bc:	080029ad 	.word	0x080029ad

080026c0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b088      	sub	sp, #32
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	099b      	lsrs	r3, r3, #6
 80026dc:	f003 0301 	and.w	r3, r3, #1
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d10f      	bne.n	8002704 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d00a      	beq.n	8002704 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	099b      	lsrs	r3, r3, #6
 80026f2:	f003 0301 	and.w	r3, r3, #1
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d004      	beq.n	8002704 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	4798      	blx	r3
    return;
 8002702:	e0d8      	b.n	80028b6 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	085b      	lsrs	r3, r3, #1
 8002708:	f003 0301 	and.w	r3, r3, #1
 800270c:	2b00      	cmp	r3, #0
 800270e:	d00a      	beq.n	8002726 <HAL_SPI_IRQHandler+0x66>
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	09db      	lsrs	r3, r3, #7
 8002714:	f003 0301 	and.w	r3, r3, #1
 8002718:	2b00      	cmp	r3, #0
 800271a:	d004      	beq.n	8002726 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	4798      	blx	r3
    return;
 8002724:	e0c7      	b.n	80028b6 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	095b      	lsrs	r3, r3, #5
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	2b00      	cmp	r3, #0
 8002730:	d10c      	bne.n	800274c <HAL_SPI_IRQHandler+0x8c>
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	099b      	lsrs	r3, r3, #6
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	2b00      	cmp	r3, #0
 800273c:	d106      	bne.n	800274c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	0a1b      	lsrs	r3, r3, #8
 8002742:	f003 0301 	and.w	r3, r3, #1
 8002746:	2b00      	cmp	r3, #0
 8002748:	f000 80b5 	beq.w	80028b6 <HAL_SPI_IRQHandler+0x1f6>
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	095b      	lsrs	r3, r3, #5
 8002750:	f003 0301 	and.w	r3, r3, #1
 8002754:	2b00      	cmp	r3, #0
 8002756:	f000 80ae 	beq.w	80028b6 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	099b      	lsrs	r3, r3, #6
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	2b00      	cmp	r3, #0
 8002764:	d023      	beq.n	80027ae <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800276c:	b2db      	uxtb	r3, r3
 800276e:	2b03      	cmp	r3, #3
 8002770:	d011      	beq.n	8002796 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002776:	f043 0204 	orr.w	r2, r3, #4
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800277e:	2300      	movs	r3, #0
 8002780:	617b      	str	r3, [r7, #20]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	617b      	str	r3, [r7, #20]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	617b      	str	r3, [r7, #20]
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	e00b      	b.n	80027ae <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002796:	2300      	movs	r3, #0
 8002798:	613b      	str	r3, [r7, #16]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	613b      	str	r3, [r7, #16]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	613b      	str	r3, [r7, #16]
 80027aa:	693b      	ldr	r3, [r7, #16]
        return;
 80027ac:	e083      	b.n	80028b6 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	095b      	lsrs	r3, r3, #5
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d014      	beq.n	80027e4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027be:	f043 0201 	orr.w	r2, r3, #1
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80027c6:	2300      	movs	r3, #0
 80027c8:	60fb      	str	r3, [r7, #12]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	60fb      	str	r3, [r7, #12]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027e0:	601a      	str	r2, [r3, #0]
 80027e2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	0a1b      	lsrs	r3, r3, #8
 80027e8:	f003 0301 	and.w	r3, r3, #1
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d00c      	beq.n	800280a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027f4:	f043 0208 	orr.w	r2, r3, #8
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80027fc:	2300      	movs	r3, #0
 80027fe:	60bb      	str	r3, [r7, #8]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	60bb      	str	r3, [r7, #8]
 8002808:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800280e:	2b00      	cmp	r3, #0
 8002810:	d050      	beq.n	80028b4 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	685a      	ldr	r2, [r3, #4]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002820:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2201      	movs	r2, #1
 8002826:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	f003 0302 	and.w	r3, r3, #2
 8002830:	2b00      	cmp	r3, #0
 8002832:	d104      	bne.n	800283e <HAL_SPI_IRQHandler+0x17e>
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	2b00      	cmp	r3, #0
 800283c:	d034      	beq.n	80028a8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	685a      	ldr	r2, [r3, #4]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f022 0203 	bic.w	r2, r2, #3
 800284c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002852:	2b00      	cmp	r3, #0
 8002854:	d011      	beq.n	800287a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800285a:	4a18      	ldr	r2, [pc, #96]	; (80028bc <HAL_SPI_IRQHandler+0x1fc>)
 800285c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002862:	4618      	mov	r0, r3
 8002864:	f7fe fdb8 	bl	80013d8 <HAL_DMA_Abort_IT>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d005      	beq.n	800287a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002872:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800287e:	2b00      	cmp	r3, #0
 8002880:	d016      	beq.n	80028b0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002886:	4a0d      	ldr	r2, [pc, #52]	; (80028bc <HAL_SPI_IRQHandler+0x1fc>)
 8002888:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800288e:	4618      	mov	r0, r3
 8002890:	f7fe fda2 	bl	80013d8 <HAL_DMA_Abort_IT>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d00a      	beq.n	80028b0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800289e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80028a6:	e003      	b.n	80028b0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f000 f813 	bl	80028d4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80028ae:	e000      	b.n	80028b2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80028b0:	bf00      	nop
    return;
 80028b2:	bf00      	nop
 80028b4:	bf00      	nop
  }
}
 80028b6:	3720      	adds	r7, #32
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	080029ed 	.word	0x080029ed

080028c0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80028c8:	bf00      	nop
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80028dc:	bf00      	nop
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b086      	sub	sp, #24
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80028f6:	f7fe fb4b 	bl	8000f90 <HAL_GetTick>
 80028fa:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002906:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800290a:	d03b      	beq.n	8002984 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	685a      	ldr	r2, [r3, #4]
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f022 0220 	bic.w	r2, r2, #32
 800291a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	685a      	ldr	r2, [r3, #4]
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f022 0202 	bic.w	r2, r2, #2
 800292a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800292c:	693a      	ldr	r2, [r7, #16]
 800292e:	2164      	movs	r1, #100	; 0x64
 8002930:	6978      	ldr	r0, [r7, #20]
 8002932:	f000 f8d9 	bl	8002ae8 <SPI_EndRxTxTransaction>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d005      	beq.n	8002948 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002940:	f043 0220 	orr.w	r2, r3, #32
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d10a      	bne.n	8002966 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002950:	2300      	movs	r3, #0
 8002952:	60fb      	str	r3, [r7, #12]
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	60fb      	str	r3, [r7, #12]
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	60fb      	str	r3, [r7, #12]
 8002964:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	2200      	movs	r2, #0
 800296a:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002978:	2b00      	cmp	r3, #0
 800297a:	d003      	beq.n	8002984 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800297c:	6978      	ldr	r0, [r7, #20]
 800297e:	f7ff ffa9 	bl	80028d4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002982:	e002      	b.n	800298a <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8002984:	6978      	ldr	r0, [r7, #20]
 8002986:	f7fd fda7 	bl	80004d8 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800298a:	3718      	adds	r7, #24
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800299c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800299e:	68f8      	ldr	r0, [r7, #12]
 80029a0:	f7ff ff8e 	bl	80028c0 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80029a4:	bf00      	nop
 80029a6:	3710      	adds	r7, #16
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029b8:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	685a      	ldr	r2, [r3, #4]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f022 0203 	bic.w	r2, r2, #3
 80029c8:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ce:	f043 0210 	orr.w	r2, r3, #16
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2201      	movs	r2, #1
 80029da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80029de:	68f8      	ldr	r0, [r7, #12]
 80029e0:	f7ff ff78 	bl	80028d4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80029e4:	bf00      	nop
 80029e6:	3710      	adds	r7, #16
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2200      	movs	r2, #0
 80029fe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2200      	movs	r2, #0
 8002a04:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002a06:	68f8      	ldr	r0, [r7, #12]
 8002a08:	f7ff ff64 	bl	80028d4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002a0c:	bf00      	nop
 8002a0e:	3710      	adds	r7, #16
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	603b      	str	r3, [r7, #0]
 8002a20:	4613      	mov	r3, r2
 8002a22:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a24:	e04c      	b.n	8002ac0 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a2c:	d048      	beq.n	8002ac0 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002a2e:	f7fe faaf 	bl	8000f90 <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	683a      	ldr	r2, [r7, #0]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d902      	bls.n	8002a44 <SPI_WaitFlagStateUntilTimeout+0x30>
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d13d      	bne.n	8002ac0 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	685a      	ldr	r2, [r3, #4]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002a52:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a5c:	d111      	bne.n	8002a82 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a66:	d004      	beq.n	8002a72 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a70:	d107      	bne.n	8002a82 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a80:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a8a:	d10f      	bne.n	8002aac <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a9a:	601a      	str	r2, [r3, #0]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002aaa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	e00f      	b.n	8002ae0 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	689a      	ldr	r2, [r3, #8]
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	68ba      	ldr	r2, [r7, #8]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	bf0c      	ite	eq
 8002ad0:	2301      	moveq	r3, #1
 8002ad2:	2300      	movne	r3, #0
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	79fb      	ldrb	r3, [r7, #7]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d1a3      	bne.n	8002a26 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3710      	adds	r7, #16
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b088      	sub	sp, #32
 8002aec:	af02      	add	r7, sp, #8
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002af4:	4b1b      	ldr	r3, [pc, #108]	; (8002b64 <SPI_EndRxTxTransaction+0x7c>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a1b      	ldr	r2, [pc, #108]	; (8002b68 <SPI_EndRxTxTransaction+0x80>)
 8002afa:	fba2 2303 	umull	r2, r3, r2, r3
 8002afe:	0d5b      	lsrs	r3, r3, #21
 8002b00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002b04:	fb02 f303 	mul.w	r3, r2, r3
 8002b08:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b12:	d112      	bne.n	8002b3a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	9300      	str	r3, [sp, #0]
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	2180      	movs	r1, #128	; 0x80
 8002b1e:	68f8      	ldr	r0, [r7, #12]
 8002b20:	f7ff ff78 	bl	8002a14 <SPI_WaitFlagStateUntilTimeout>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d016      	beq.n	8002b58 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b2e:	f043 0220 	orr.w	r2, r3, #32
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e00f      	b.n	8002b5a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d00a      	beq.n	8002b56 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	3b01      	subs	r3, #1
 8002b44:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b50:	2b80      	cmp	r3, #128	; 0x80
 8002b52:	d0f2      	beq.n	8002b3a <SPI_EndRxTxTransaction+0x52>
 8002b54:	e000      	b.n	8002b58 <SPI_EndRxTxTransaction+0x70>
        break;
 8002b56:	bf00      	nop
  }

  return HAL_OK;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3718      	adds	r7, #24
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	20000004 	.word	0x20000004
 8002b68:	165e9f81 	.word	0x165e9f81

08002b6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d101      	bne.n	8002b7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e03f      	b.n	8002bfe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d106      	bne.n	8002b98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f7fe f882 	bl	8000c9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2224      	movs	r2, #36	; 0x24
 8002b9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	68da      	ldr	r2, [r3, #12]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f000 fb8b 	bl	80032cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	691a      	ldr	r2, [r3, #16]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002bc4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	695a      	ldr	r2, [r3, #20]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002bd4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	68da      	ldr	r2, [r3, #12]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002be4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2220      	movs	r2, #32
 8002bf0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2220      	movs	r2, #32
 8002bf8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3708      	adds	r7, #8
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
	...

08002c08 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b086      	sub	sp, #24
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	4613      	mov	r3, r2
 8002c14:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	2b20      	cmp	r3, #32
 8002c20:	d166      	bne.n	8002cf0 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d002      	beq.n	8002c2e <HAL_UART_Receive_DMA+0x26>
 8002c28:	88fb      	ldrh	r3, [r7, #6]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d101      	bne.n	8002c32 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e05f      	b.n	8002cf2 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d101      	bne.n	8002c40 <HAL_UART_Receive_DMA+0x38>
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	e058      	b.n	8002cf2 <HAL_UART_Receive_DMA+0xea>
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8002c48:	68ba      	ldr	r2, [r7, #8]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	88fa      	ldrh	r2, [r7, #6]
 8002c52:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2200      	movs	r2, #0
 8002c58:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2222      	movs	r2, #34	; 0x22
 8002c5e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c66:	4a25      	ldr	r2, [pc, #148]	; (8002cfc <HAL_UART_Receive_DMA+0xf4>)
 8002c68:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c6e:	4a24      	ldr	r2, [pc, #144]	; (8002d00 <HAL_UART_Receive_DMA+0xf8>)
 8002c70:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c76:	4a23      	ldr	r2, [pc, #140]	; (8002d04 <HAL_UART_Receive_DMA+0xfc>)
 8002c78:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c7e:	2200      	movs	r2, #0
 8002c80:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8002c82:	f107 0308 	add.w	r3, r7, #8
 8002c86:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	3304      	adds	r3, #4
 8002c92:	4619      	mov	r1, r3
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	88fb      	ldrh	r3, [r7, #6]
 8002c9a:	f7fe fb45 	bl	8001328 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	613b      	str	r3, [r7, #16]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	613b      	str	r3, [r7, #16]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	613b      	str	r3, [r7, #16]
 8002cb2:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	68da      	ldr	r2, [r3, #12]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cca:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	695a      	ldr	r2, [r3, #20]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f042 0201 	orr.w	r2, r2, #1
 8002cda:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	695a      	ldr	r2, [r3, #20]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cea:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8002cec:	2300      	movs	r3, #0
 8002cee:	e000      	b.n	8002cf2 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8002cf0:	2302      	movs	r3, #2
  }
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3718      	adds	r7, #24
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	08002f45 	.word	0x08002f45
 8002d00:	08002fad 	.word	0x08002fad
 8002d04:	08002fc9 	.word	0x08002fc9

08002d08 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b088      	sub	sp, #32
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	f003 030f 	and.w	r3, r3, #15
 8002d36:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d10d      	bne.n	8002d5a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	f003 0320 	and.w	r3, r3, #32
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d008      	beq.n	8002d5a <HAL_UART_IRQHandler+0x52>
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	f003 0320 	and.w	r3, r3, #32
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d003      	beq.n	8002d5a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 fa38 	bl	80031c8 <UART_Receive_IT>
      return;
 8002d58:	e0d1      	b.n	8002efe <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	f000 80b0 	beq.w	8002ec2 <HAL_UART_IRQHandler+0x1ba>
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	f003 0301 	and.w	r3, r3, #1
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d105      	bne.n	8002d78 <HAL_UART_IRQHandler+0x70>
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	f000 80a5 	beq.w	8002ec2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d00a      	beq.n	8002d98 <HAL_UART_IRQHandler+0x90>
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d005      	beq.n	8002d98 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d90:	f043 0201 	orr.w	r2, r3, #1
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	f003 0304 	and.w	r3, r3, #4
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d00a      	beq.n	8002db8 <HAL_UART_IRQHandler+0xb0>
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	f003 0301 	and.w	r3, r3, #1
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d005      	beq.n	8002db8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db0:	f043 0202 	orr.w	r2, r3, #2
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	f003 0302 	and.w	r3, r3, #2
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00a      	beq.n	8002dd8 <HAL_UART_IRQHandler+0xd0>
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	f003 0301 	and.w	r3, r3, #1
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d005      	beq.n	8002dd8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dd0:	f043 0204 	orr.w	r2, r3, #4
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	f003 0308 	and.w	r3, r3, #8
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d00f      	beq.n	8002e02 <HAL_UART_IRQHandler+0xfa>
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	f003 0320 	and.w	r3, r3, #32
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d104      	bne.n	8002df6 <HAL_UART_IRQHandler+0xee>
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d005      	beq.n	8002e02 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dfa:	f043 0208 	orr.w	r2, r3, #8
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d078      	beq.n	8002efc <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	f003 0320 	and.w	r3, r3, #32
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d007      	beq.n	8002e24 <HAL_UART_IRQHandler+0x11c>
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	f003 0320 	and.w	r3, r3, #32
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d002      	beq.n	8002e24 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f000 f9d2 	bl	80031c8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	695b      	ldr	r3, [r3, #20]
 8002e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e2e:	2b40      	cmp	r3, #64	; 0x40
 8002e30:	bf0c      	ite	eq
 8002e32:	2301      	moveq	r3, #1
 8002e34:	2300      	movne	r3, #0
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e3e:	f003 0308 	and.w	r3, r3, #8
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d102      	bne.n	8002e4c <HAL_UART_IRQHandler+0x144>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d031      	beq.n	8002eb0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f000 f91b 	bl	8003088 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	695b      	ldr	r3, [r3, #20]
 8002e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e5c:	2b40      	cmp	r3, #64	; 0x40
 8002e5e:	d123      	bne.n	8002ea8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	695a      	ldr	r2, [r3, #20]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e6e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d013      	beq.n	8002ea0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e7c:	4a21      	ldr	r2, [pc, #132]	; (8002f04 <HAL_UART_IRQHandler+0x1fc>)
 8002e7e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7fe faa7 	bl	80013d8 <HAL_DMA_Abort_IT>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d016      	beq.n	8002ebe <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e9a:	4610      	mov	r0, r2
 8002e9c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e9e:	e00e      	b.n	8002ebe <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f000 f845 	bl	8002f30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ea6:	e00a      	b.n	8002ebe <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f000 f841 	bl	8002f30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002eae:	e006      	b.n	8002ebe <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f000 f83d 	bl	8002f30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002ebc:	e01e      	b.n	8002efc <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ebe:	bf00      	nop
    return;
 8002ec0:	e01c      	b.n	8002efc <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d008      	beq.n	8002ede <HAL_UART_IRQHandler+0x1d6>
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d003      	beq.n	8002ede <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f000 f908 	bl	80030ec <UART_Transmit_IT>
    return;
 8002edc:	e00f      	b.n	8002efe <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d00a      	beq.n	8002efe <HAL_UART_IRQHandler+0x1f6>
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d005      	beq.n	8002efe <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 f950 	bl	8003198 <UART_EndTransmit_IT>
    return;
 8002ef8:	bf00      	nop
 8002efa:	e000      	b.n	8002efe <HAL_UART_IRQHandler+0x1f6>
    return;
 8002efc:	bf00      	nop
  }
}
 8002efe:	3720      	adds	r7, #32
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	080030c5 	.word	0x080030c5

08002f08 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002f10:	bf00      	nop
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002f24:	bf00      	nop
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f50:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d11e      	bne.n	8002f9e <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2200      	movs	r2, #0
 8002f64:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	68da      	ldr	r2, [r3, #12]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f74:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	695a      	ldr	r2, [r3, #20]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f022 0201 	bic.w	r2, r2, #1
 8002f84:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	695a      	ldr	r2, [r3, #20]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f94:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2220      	movs	r2, #32
 8002f9a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8002f9e:	68f8      	ldr	r0, [r7, #12]
 8002fa0:	f7fd fab8 	bl	8000514 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002fa4:	bf00      	nop
 8002fa6:	3710      	adds	r7, #16
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8002fba:	68f8      	ldr	r0, [r7, #12]
 8002fbc:	f7ff ffae 	bl	8002f1c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002fc0:	bf00      	nop
 8002fc2:	3710      	adds	r7, #16
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	695b      	ldr	r3, [r3, #20]
 8002fe0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fe4:	2b80      	cmp	r3, #128	; 0x80
 8002fe6:	bf0c      	ite	eq
 8002fe8:	2301      	moveq	r3, #1
 8002fea:	2300      	movne	r3, #0
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	2b21      	cmp	r3, #33	; 0x21
 8002ffa:	d108      	bne.n	800300e <UART_DMAError+0x46>
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d005      	beq.n	800300e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	2200      	movs	r2, #0
 8003006:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003008:	68b8      	ldr	r0, [r7, #8]
 800300a:	f000 f827 	bl	800305c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	695b      	ldr	r3, [r3, #20]
 8003014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003018:	2b40      	cmp	r3, #64	; 0x40
 800301a:	bf0c      	ite	eq
 800301c:	2301      	moveq	r3, #1
 800301e:	2300      	movne	r3, #0
 8003020:	b2db      	uxtb	r3, r3
 8003022:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800302a:	b2db      	uxtb	r3, r3
 800302c:	2b22      	cmp	r3, #34	; 0x22
 800302e:	d108      	bne.n	8003042 <UART_DMAError+0x7a>
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d005      	beq.n	8003042 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	2200      	movs	r2, #0
 800303a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800303c:	68b8      	ldr	r0, [r7, #8]
 800303e:	f000 f823 	bl	8003088 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003046:	f043 0210 	orr.w	r2, r3, #16
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800304e:	68b8      	ldr	r0, [r7, #8]
 8003050:	f7ff ff6e 	bl	8002f30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003054:	bf00      	nop
 8003056:	3710      	adds	r7, #16
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}

0800305c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	68da      	ldr	r2, [r3, #12]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003072:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2220      	movs	r2, #32
 8003078:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800307c:	bf00      	nop
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	68da      	ldr	r2, [r3, #12]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800309e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	695a      	ldr	r2, [r3, #20]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f022 0201 	bic.w	r2, r2, #1
 80030ae:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2220      	movs	r2, #32
 80030b4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80030b8:	bf00      	nop
 80030ba:	370c      	adds	r7, #12
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr

080030c4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2200      	movs	r2, #0
 80030d6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2200      	movs	r2, #0
 80030dc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80030de:	68f8      	ldr	r0, [r7, #12]
 80030e0:	f7ff ff26 	bl	8002f30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80030e4:	bf00      	nop
 80030e6:	3710      	adds	r7, #16
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b085      	sub	sp, #20
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	2b21      	cmp	r3, #33	; 0x21
 80030fe:	d144      	bne.n	800318a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003108:	d11a      	bne.n	8003140 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a1b      	ldr	r3, [r3, #32]
 800310e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	881b      	ldrh	r3, [r3, #0]
 8003114:	461a      	mov	r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800311e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	691b      	ldr	r3, [r3, #16]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d105      	bne.n	8003134 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a1b      	ldr	r3, [r3, #32]
 800312c:	1c9a      	adds	r2, r3, #2
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	621a      	str	r2, [r3, #32]
 8003132:	e00e      	b.n	8003152 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a1b      	ldr	r3, [r3, #32]
 8003138:	1c5a      	adds	r2, r3, #1
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	621a      	str	r2, [r3, #32]
 800313e:	e008      	b.n	8003152 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a1b      	ldr	r3, [r3, #32]
 8003144:	1c59      	adds	r1, r3, #1
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	6211      	str	r1, [r2, #32]
 800314a:	781a      	ldrb	r2, [r3, #0]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003156:	b29b      	uxth	r3, r3
 8003158:	3b01      	subs	r3, #1
 800315a:	b29b      	uxth	r3, r3
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	4619      	mov	r1, r3
 8003160:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003162:	2b00      	cmp	r3, #0
 8003164:	d10f      	bne.n	8003186 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68da      	ldr	r2, [r3, #12]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003174:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	68da      	ldr	r2, [r3, #12]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003184:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003186:	2300      	movs	r3, #0
 8003188:	e000      	b.n	800318c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800318a:	2302      	movs	r3, #2
  }
}
 800318c:	4618      	mov	r0, r3
 800318e:	3714      	adds	r7, #20
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	68da      	ldr	r2, [r3, #12]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031ae:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2220      	movs	r2, #32
 80031b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f7ff fea5 	bl	8002f08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80031be:	2300      	movs	r3, #0
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3708      	adds	r7, #8
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	2b22      	cmp	r3, #34	; 0x22
 80031da:	d171      	bne.n	80032c0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031e4:	d123      	bne.n	800322e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ea:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	691b      	ldr	r3, [r3, #16]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d10e      	bne.n	8003212 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003200:	b29a      	uxth	r2, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800320a:	1c9a      	adds	r2, r3, #2
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	629a      	str	r2, [r3, #40]	; 0x28
 8003210:	e029      	b.n	8003266 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	b29b      	uxth	r3, r3
 800321a:	b2db      	uxtb	r3, r3
 800321c:	b29a      	uxth	r2, r3
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003226:	1c5a      	adds	r2, r3, #1
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	629a      	str	r2, [r3, #40]	; 0x28
 800322c:	e01b      	b.n	8003266 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d10a      	bne.n	800324c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	6858      	ldr	r0, [r3, #4]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003240:	1c59      	adds	r1, r3, #1
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	6291      	str	r1, [r2, #40]	; 0x28
 8003246:	b2c2      	uxtb	r2, r0
 8003248:	701a      	strb	r2, [r3, #0]
 800324a:	e00c      	b.n	8003266 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	b2da      	uxtb	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003258:	1c58      	adds	r0, r3, #1
 800325a:	6879      	ldr	r1, [r7, #4]
 800325c:	6288      	str	r0, [r1, #40]	; 0x28
 800325e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003262:	b2d2      	uxtb	r2, r2
 8003264:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800326a:	b29b      	uxth	r3, r3
 800326c:	3b01      	subs	r3, #1
 800326e:	b29b      	uxth	r3, r3
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	4619      	mov	r1, r3
 8003274:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003276:	2b00      	cmp	r3, #0
 8003278:	d120      	bne.n	80032bc <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	68da      	ldr	r2, [r3, #12]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f022 0220 	bic.w	r2, r2, #32
 8003288:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68da      	ldr	r2, [r3, #12]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003298:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	695a      	ldr	r2, [r3, #20]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f022 0201 	bic.w	r2, r2, #1
 80032a8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2220      	movs	r2, #32
 80032ae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f7fd f92e 	bl	8000514 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80032b8:	2300      	movs	r3, #0
 80032ba:	e002      	b.n	80032c2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80032bc:	2300      	movs	r3, #0
 80032be:	e000      	b.n	80032c2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80032c0:	2302      	movs	r3, #2
  }
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3710      	adds	r7, #16
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
	...

080032cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032d0:	b085      	sub	sp, #20
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	691b      	ldr	r3, [r3, #16]
 80032dc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	68da      	ldr	r2, [r3, #12]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	430a      	orrs	r2, r1
 80032ea:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	689a      	ldr	r2, [r3, #8]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	691b      	ldr	r3, [r3, #16]
 80032f4:	431a      	orrs	r2, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	695b      	ldr	r3, [r3, #20]
 80032fa:	431a      	orrs	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	69db      	ldr	r3, [r3, #28]
 8003300:	4313      	orrs	r3, r2
 8003302:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800330e:	f023 030c 	bic.w	r3, r3, #12
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	6812      	ldr	r2, [r2, #0]
 8003316:	68f9      	ldr	r1, [r7, #12]
 8003318:	430b      	orrs	r3, r1
 800331a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	699a      	ldr	r2, [r3, #24]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	430a      	orrs	r2, r1
 8003330:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	69db      	ldr	r3, [r3, #28]
 8003336:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800333a:	f040 818b 	bne.w	8003654 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4ac1      	ldr	r2, [pc, #772]	; (8003648 <UART_SetConfig+0x37c>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d005      	beq.n	8003354 <UART_SetConfig+0x88>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4abf      	ldr	r2, [pc, #764]	; (800364c <UART_SetConfig+0x380>)
 800334e:	4293      	cmp	r3, r2
 8003350:	f040 80bd 	bne.w	80034ce <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003354:	f7ff f88e 	bl	8002474 <HAL_RCC_GetPCLK2Freq>
 8003358:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	461d      	mov	r5, r3
 800335e:	f04f 0600 	mov.w	r6, #0
 8003362:	46a8      	mov	r8, r5
 8003364:	46b1      	mov	r9, r6
 8003366:	eb18 0308 	adds.w	r3, r8, r8
 800336a:	eb49 0409 	adc.w	r4, r9, r9
 800336e:	4698      	mov	r8, r3
 8003370:	46a1      	mov	r9, r4
 8003372:	eb18 0805 	adds.w	r8, r8, r5
 8003376:	eb49 0906 	adc.w	r9, r9, r6
 800337a:	f04f 0100 	mov.w	r1, #0
 800337e:	f04f 0200 	mov.w	r2, #0
 8003382:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003386:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800338a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800338e:	4688      	mov	r8, r1
 8003390:	4691      	mov	r9, r2
 8003392:	eb18 0005 	adds.w	r0, r8, r5
 8003396:	eb49 0106 	adc.w	r1, r9, r6
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	461d      	mov	r5, r3
 80033a0:	f04f 0600 	mov.w	r6, #0
 80033a4:	196b      	adds	r3, r5, r5
 80033a6:	eb46 0406 	adc.w	r4, r6, r6
 80033aa:	461a      	mov	r2, r3
 80033ac:	4623      	mov	r3, r4
 80033ae:	f7fc ff13 	bl	80001d8 <__aeabi_uldivmod>
 80033b2:	4603      	mov	r3, r0
 80033b4:	460c      	mov	r4, r1
 80033b6:	461a      	mov	r2, r3
 80033b8:	4ba5      	ldr	r3, [pc, #660]	; (8003650 <UART_SetConfig+0x384>)
 80033ba:	fba3 2302 	umull	r2, r3, r3, r2
 80033be:	095b      	lsrs	r3, r3, #5
 80033c0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	461d      	mov	r5, r3
 80033c8:	f04f 0600 	mov.w	r6, #0
 80033cc:	46a9      	mov	r9, r5
 80033ce:	46b2      	mov	sl, r6
 80033d0:	eb19 0309 	adds.w	r3, r9, r9
 80033d4:	eb4a 040a 	adc.w	r4, sl, sl
 80033d8:	4699      	mov	r9, r3
 80033da:	46a2      	mov	sl, r4
 80033dc:	eb19 0905 	adds.w	r9, r9, r5
 80033e0:	eb4a 0a06 	adc.w	sl, sl, r6
 80033e4:	f04f 0100 	mov.w	r1, #0
 80033e8:	f04f 0200 	mov.w	r2, #0
 80033ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033f0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80033f4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80033f8:	4689      	mov	r9, r1
 80033fa:	4692      	mov	sl, r2
 80033fc:	eb19 0005 	adds.w	r0, r9, r5
 8003400:	eb4a 0106 	adc.w	r1, sl, r6
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	461d      	mov	r5, r3
 800340a:	f04f 0600 	mov.w	r6, #0
 800340e:	196b      	adds	r3, r5, r5
 8003410:	eb46 0406 	adc.w	r4, r6, r6
 8003414:	461a      	mov	r2, r3
 8003416:	4623      	mov	r3, r4
 8003418:	f7fc fede 	bl	80001d8 <__aeabi_uldivmod>
 800341c:	4603      	mov	r3, r0
 800341e:	460c      	mov	r4, r1
 8003420:	461a      	mov	r2, r3
 8003422:	4b8b      	ldr	r3, [pc, #556]	; (8003650 <UART_SetConfig+0x384>)
 8003424:	fba3 1302 	umull	r1, r3, r3, r2
 8003428:	095b      	lsrs	r3, r3, #5
 800342a:	2164      	movs	r1, #100	; 0x64
 800342c:	fb01 f303 	mul.w	r3, r1, r3
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	00db      	lsls	r3, r3, #3
 8003434:	3332      	adds	r3, #50	; 0x32
 8003436:	4a86      	ldr	r2, [pc, #536]	; (8003650 <UART_SetConfig+0x384>)
 8003438:	fba2 2303 	umull	r2, r3, r2, r3
 800343c:	095b      	lsrs	r3, r3, #5
 800343e:	005b      	lsls	r3, r3, #1
 8003440:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003444:	4498      	add	r8, r3
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	461d      	mov	r5, r3
 800344a:	f04f 0600 	mov.w	r6, #0
 800344e:	46a9      	mov	r9, r5
 8003450:	46b2      	mov	sl, r6
 8003452:	eb19 0309 	adds.w	r3, r9, r9
 8003456:	eb4a 040a 	adc.w	r4, sl, sl
 800345a:	4699      	mov	r9, r3
 800345c:	46a2      	mov	sl, r4
 800345e:	eb19 0905 	adds.w	r9, r9, r5
 8003462:	eb4a 0a06 	adc.w	sl, sl, r6
 8003466:	f04f 0100 	mov.w	r1, #0
 800346a:	f04f 0200 	mov.w	r2, #0
 800346e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003472:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003476:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800347a:	4689      	mov	r9, r1
 800347c:	4692      	mov	sl, r2
 800347e:	eb19 0005 	adds.w	r0, r9, r5
 8003482:	eb4a 0106 	adc.w	r1, sl, r6
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	461d      	mov	r5, r3
 800348c:	f04f 0600 	mov.w	r6, #0
 8003490:	196b      	adds	r3, r5, r5
 8003492:	eb46 0406 	adc.w	r4, r6, r6
 8003496:	461a      	mov	r2, r3
 8003498:	4623      	mov	r3, r4
 800349a:	f7fc fe9d 	bl	80001d8 <__aeabi_uldivmod>
 800349e:	4603      	mov	r3, r0
 80034a0:	460c      	mov	r4, r1
 80034a2:	461a      	mov	r2, r3
 80034a4:	4b6a      	ldr	r3, [pc, #424]	; (8003650 <UART_SetConfig+0x384>)
 80034a6:	fba3 1302 	umull	r1, r3, r3, r2
 80034aa:	095b      	lsrs	r3, r3, #5
 80034ac:	2164      	movs	r1, #100	; 0x64
 80034ae:	fb01 f303 	mul.w	r3, r1, r3
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	00db      	lsls	r3, r3, #3
 80034b6:	3332      	adds	r3, #50	; 0x32
 80034b8:	4a65      	ldr	r2, [pc, #404]	; (8003650 <UART_SetConfig+0x384>)
 80034ba:	fba2 2303 	umull	r2, r3, r2, r3
 80034be:	095b      	lsrs	r3, r3, #5
 80034c0:	f003 0207 	and.w	r2, r3, #7
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4442      	add	r2, r8
 80034ca:	609a      	str	r2, [r3, #8]
 80034cc:	e26f      	b.n	80039ae <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80034ce:	f7fe ffbd 	bl	800244c <HAL_RCC_GetPCLK1Freq>
 80034d2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	461d      	mov	r5, r3
 80034d8:	f04f 0600 	mov.w	r6, #0
 80034dc:	46a8      	mov	r8, r5
 80034de:	46b1      	mov	r9, r6
 80034e0:	eb18 0308 	adds.w	r3, r8, r8
 80034e4:	eb49 0409 	adc.w	r4, r9, r9
 80034e8:	4698      	mov	r8, r3
 80034ea:	46a1      	mov	r9, r4
 80034ec:	eb18 0805 	adds.w	r8, r8, r5
 80034f0:	eb49 0906 	adc.w	r9, r9, r6
 80034f4:	f04f 0100 	mov.w	r1, #0
 80034f8:	f04f 0200 	mov.w	r2, #0
 80034fc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003500:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003504:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003508:	4688      	mov	r8, r1
 800350a:	4691      	mov	r9, r2
 800350c:	eb18 0005 	adds.w	r0, r8, r5
 8003510:	eb49 0106 	adc.w	r1, r9, r6
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	461d      	mov	r5, r3
 800351a:	f04f 0600 	mov.w	r6, #0
 800351e:	196b      	adds	r3, r5, r5
 8003520:	eb46 0406 	adc.w	r4, r6, r6
 8003524:	461a      	mov	r2, r3
 8003526:	4623      	mov	r3, r4
 8003528:	f7fc fe56 	bl	80001d8 <__aeabi_uldivmod>
 800352c:	4603      	mov	r3, r0
 800352e:	460c      	mov	r4, r1
 8003530:	461a      	mov	r2, r3
 8003532:	4b47      	ldr	r3, [pc, #284]	; (8003650 <UART_SetConfig+0x384>)
 8003534:	fba3 2302 	umull	r2, r3, r3, r2
 8003538:	095b      	lsrs	r3, r3, #5
 800353a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	461d      	mov	r5, r3
 8003542:	f04f 0600 	mov.w	r6, #0
 8003546:	46a9      	mov	r9, r5
 8003548:	46b2      	mov	sl, r6
 800354a:	eb19 0309 	adds.w	r3, r9, r9
 800354e:	eb4a 040a 	adc.w	r4, sl, sl
 8003552:	4699      	mov	r9, r3
 8003554:	46a2      	mov	sl, r4
 8003556:	eb19 0905 	adds.w	r9, r9, r5
 800355a:	eb4a 0a06 	adc.w	sl, sl, r6
 800355e:	f04f 0100 	mov.w	r1, #0
 8003562:	f04f 0200 	mov.w	r2, #0
 8003566:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800356a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800356e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003572:	4689      	mov	r9, r1
 8003574:	4692      	mov	sl, r2
 8003576:	eb19 0005 	adds.w	r0, r9, r5
 800357a:	eb4a 0106 	adc.w	r1, sl, r6
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	461d      	mov	r5, r3
 8003584:	f04f 0600 	mov.w	r6, #0
 8003588:	196b      	adds	r3, r5, r5
 800358a:	eb46 0406 	adc.w	r4, r6, r6
 800358e:	461a      	mov	r2, r3
 8003590:	4623      	mov	r3, r4
 8003592:	f7fc fe21 	bl	80001d8 <__aeabi_uldivmod>
 8003596:	4603      	mov	r3, r0
 8003598:	460c      	mov	r4, r1
 800359a:	461a      	mov	r2, r3
 800359c:	4b2c      	ldr	r3, [pc, #176]	; (8003650 <UART_SetConfig+0x384>)
 800359e:	fba3 1302 	umull	r1, r3, r3, r2
 80035a2:	095b      	lsrs	r3, r3, #5
 80035a4:	2164      	movs	r1, #100	; 0x64
 80035a6:	fb01 f303 	mul.w	r3, r1, r3
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	00db      	lsls	r3, r3, #3
 80035ae:	3332      	adds	r3, #50	; 0x32
 80035b0:	4a27      	ldr	r2, [pc, #156]	; (8003650 <UART_SetConfig+0x384>)
 80035b2:	fba2 2303 	umull	r2, r3, r2, r3
 80035b6:	095b      	lsrs	r3, r3, #5
 80035b8:	005b      	lsls	r3, r3, #1
 80035ba:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80035be:	4498      	add	r8, r3
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	461d      	mov	r5, r3
 80035c4:	f04f 0600 	mov.w	r6, #0
 80035c8:	46a9      	mov	r9, r5
 80035ca:	46b2      	mov	sl, r6
 80035cc:	eb19 0309 	adds.w	r3, r9, r9
 80035d0:	eb4a 040a 	adc.w	r4, sl, sl
 80035d4:	4699      	mov	r9, r3
 80035d6:	46a2      	mov	sl, r4
 80035d8:	eb19 0905 	adds.w	r9, r9, r5
 80035dc:	eb4a 0a06 	adc.w	sl, sl, r6
 80035e0:	f04f 0100 	mov.w	r1, #0
 80035e4:	f04f 0200 	mov.w	r2, #0
 80035e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035ec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80035f0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80035f4:	4689      	mov	r9, r1
 80035f6:	4692      	mov	sl, r2
 80035f8:	eb19 0005 	adds.w	r0, r9, r5
 80035fc:	eb4a 0106 	adc.w	r1, sl, r6
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	461d      	mov	r5, r3
 8003606:	f04f 0600 	mov.w	r6, #0
 800360a:	196b      	adds	r3, r5, r5
 800360c:	eb46 0406 	adc.w	r4, r6, r6
 8003610:	461a      	mov	r2, r3
 8003612:	4623      	mov	r3, r4
 8003614:	f7fc fde0 	bl	80001d8 <__aeabi_uldivmod>
 8003618:	4603      	mov	r3, r0
 800361a:	460c      	mov	r4, r1
 800361c:	461a      	mov	r2, r3
 800361e:	4b0c      	ldr	r3, [pc, #48]	; (8003650 <UART_SetConfig+0x384>)
 8003620:	fba3 1302 	umull	r1, r3, r3, r2
 8003624:	095b      	lsrs	r3, r3, #5
 8003626:	2164      	movs	r1, #100	; 0x64
 8003628:	fb01 f303 	mul.w	r3, r1, r3
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	00db      	lsls	r3, r3, #3
 8003630:	3332      	adds	r3, #50	; 0x32
 8003632:	4a07      	ldr	r2, [pc, #28]	; (8003650 <UART_SetConfig+0x384>)
 8003634:	fba2 2303 	umull	r2, r3, r2, r3
 8003638:	095b      	lsrs	r3, r3, #5
 800363a:	f003 0207 	and.w	r2, r3, #7
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4442      	add	r2, r8
 8003644:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003646:	e1b2      	b.n	80039ae <UART_SetConfig+0x6e2>
 8003648:	40011000 	.word	0x40011000
 800364c:	40011400 	.word	0x40011400
 8003650:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4ad7      	ldr	r2, [pc, #860]	; (80039b8 <UART_SetConfig+0x6ec>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d005      	beq.n	800366a <UART_SetConfig+0x39e>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4ad6      	ldr	r2, [pc, #856]	; (80039bc <UART_SetConfig+0x6f0>)
 8003664:	4293      	cmp	r3, r2
 8003666:	f040 80d1 	bne.w	800380c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800366a:	f7fe ff03 	bl	8002474 <HAL_RCC_GetPCLK2Freq>
 800366e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	469a      	mov	sl, r3
 8003674:	f04f 0b00 	mov.w	fp, #0
 8003678:	46d0      	mov	r8, sl
 800367a:	46d9      	mov	r9, fp
 800367c:	eb18 0308 	adds.w	r3, r8, r8
 8003680:	eb49 0409 	adc.w	r4, r9, r9
 8003684:	4698      	mov	r8, r3
 8003686:	46a1      	mov	r9, r4
 8003688:	eb18 080a 	adds.w	r8, r8, sl
 800368c:	eb49 090b 	adc.w	r9, r9, fp
 8003690:	f04f 0100 	mov.w	r1, #0
 8003694:	f04f 0200 	mov.w	r2, #0
 8003698:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800369c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80036a0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80036a4:	4688      	mov	r8, r1
 80036a6:	4691      	mov	r9, r2
 80036a8:	eb1a 0508 	adds.w	r5, sl, r8
 80036ac:	eb4b 0609 	adc.w	r6, fp, r9
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	4619      	mov	r1, r3
 80036b6:	f04f 0200 	mov.w	r2, #0
 80036ba:	f04f 0300 	mov.w	r3, #0
 80036be:	f04f 0400 	mov.w	r4, #0
 80036c2:	0094      	lsls	r4, r2, #2
 80036c4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80036c8:	008b      	lsls	r3, r1, #2
 80036ca:	461a      	mov	r2, r3
 80036cc:	4623      	mov	r3, r4
 80036ce:	4628      	mov	r0, r5
 80036d0:	4631      	mov	r1, r6
 80036d2:	f7fc fd81 	bl	80001d8 <__aeabi_uldivmod>
 80036d6:	4603      	mov	r3, r0
 80036d8:	460c      	mov	r4, r1
 80036da:	461a      	mov	r2, r3
 80036dc:	4bb8      	ldr	r3, [pc, #736]	; (80039c0 <UART_SetConfig+0x6f4>)
 80036de:	fba3 2302 	umull	r2, r3, r3, r2
 80036e2:	095b      	lsrs	r3, r3, #5
 80036e4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	469b      	mov	fp, r3
 80036ec:	f04f 0c00 	mov.w	ip, #0
 80036f0:	46d9      	mov	r9, fp
 80036f2:	46e2      	mov	sl, ip
 80036f4:	eb19 0309 	adds.w	r3, r9, r9
 80036f8:	eb4a 040a 	adc.w	r4, sl, sl
 80036fc:	4699      	mov	r9, r3
 80036fe:	46a2      	mov	sl, r4
 8003700:	eb19 090b 	adds.w	r9, r9, fp
 8003704:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003708:	f04f 0100 	mov.w	r1, #0
 800370c:	f04f 0200 	mov.w	r2, #0
 8003710:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003714:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003718:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800371c:	4689      	mov	r9, r1
 800371e:	4692      	mov	sl, r2
 8003720:	eb1b 0509 	adds.w	r5, fp, r9
 8003724:	eb4c 060a 	adc.w	r6, ip, sl
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	4619      	mov	r1, r3
 800372e:	f04f 0200 	mov.w	r2, #0
 8003732:	f04f 0300 	mov.w	r3, #0
 8003736:	f04f 0400 	mov.w	r4, #0
 800373a:	0094      	lsls	r4, r2, #2
 800373c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003740:	008b      	lsls	r3, r1, #2
 8003742:	461a      	mov	r2, r3
 8003744:	4623      	mov	r3, r4
 8003746:	4628      	mov	r0, r5
 8003748:	4631      	mov	r1, r6
 800374a:	f7fc fd45 	bl	80001d8 <__aeabi_uldivmod>
 800374e:	4603      	mov	r3, r0
 8003750:	460c      	mov	r4, r1
 8003752:	461a      	mov	r2, r3
 8003754:	4b9a      	ldr	r3, [pc, #616]	; (80039c0 <UART_SetConfig+0x6f4>)
 8003756:	fba3 1302 	umull	r1, r3, r3, r2
 800375a:	095b      	lsrs	r3, r3, #5
 800375c:	2164      	movs	r1, #100	; 0x64
 800375e:	fb01 f303 	mul.w	r3, r1, r3
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	011b      	lsls	r3, r3, #4
 8003766:	3332      	adds	r3, #50	; 0x32
 8003768:	4a95      	ldr	r2, [pc, #596]	; (80039c0 <UART_SetConfig+0x6f4>)
 800376a:	fba2 2303 	umull	r2, r3, r2, r3
 800376e:	095b      	lsrs	r3, r3, #5
 8003770:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003774:	4498      	add	r8, r3
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	469b      	mov	fp, r3
 800377a:	f04f 0c00 	mov.w	ip, #0
 800377e:	46d9      	mov	r9, fp
 8003780:	46e2      	mov	sl, ip
 8003782:	eb19 0309 	adds.w	r3, r9, r9
 8003786:	eb4a 040a 	adc.w	r4, sl, sl
 800378a:	4699      	mov	r9, r3
 800378c:	46a2      	mov	sl, r4
 800378e:	eb19 090b 	adds.w	r9, r9, fp
 8003792:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003796:	f04f 0100 	mov.w	r1, #0
 800379a:	f04f 0200 	mov.w	r2, #0
 800379e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80037a2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80037a6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80037aa:	4689      	mov	r9, r1
 80037ac:	4692      	mov	sl, r2
 80037ae:	eb1b 0509 	adds.w	r5, fp, r9
 80037b2:	eb4c 060a 	adc.w	r6, ip, sl
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	4619      	mov	r1, r3
 80037bc:	f04f 0200 	mov.w	r2, #0
 80037c0:	f04f 0300 	mov.w	r3, #0
 80037c4:	f04f 0400 	mov.w	r4, #0
 80037c8:	0094      	lsls	r4, r2, #2
 80037ca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80037ce:	008b      	lsls	r3, r1, #2
 80037d0:	461a      	mov	r2, r3
 80037d2:	4623      	mov	r3, r4
 80037d4:	4628      	mov	r0, r5
 80037d6:	4631      	mov	r1, r6
 80037d8:	f7fc fcfe 	bl	80001d8 <__aeabi_uldivmod>
 80037dc:	4603      	mov	r3, r0
 80037de:	460c      	mov	r4, r1
 80037e0:	461a      	mov	r2, r3
 80037e2:	4b77      	ldr	r3, [pc, #476]	; (80039c0 <UART_SetConfig+0x6f4>)
 80037e4:	fba3 1302 	umull	r1, r3, r3, r2
 80037e8:	095b      	lsrs	r3, r3, #5
 80037ea:	2164      	movs	r1, #100	; 0x64
 80037ec:	fb01 f303 	mul.w	r3, r1, r3
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	011b      	lsls	r3, r3, #4
 80037f4:	3332      	adds	r3, #50	; 0x32
 80037f6:	4a72      	ldr	r2, [pc, #456]	; (80039c0 <UART_SetConfig+0x6f4>)
 80037f8:	fba2 2303 	umull	r2, r3, r2, r3
 80037fc:	095b      	lsrs	r3, r3, #5
 80037fe:	f003 020f 	and.w	r2, r3, #15
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4442      	add	r2, r8
 8003808:	609a      	str	r2, [r3, #8]
 800380a:	e0d0      	b.n	80039ae <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800380c:	f7fe fe1e 	bl	800244c <HAL_RCC_GetPCLK1Freq>
 8003810:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	469a      	mov	sl, r3
 8003816:	f04f 0b00 	mov.w	fp, #0
 800381a:	46d0      	mov	r8, sl
 800381c:	46d9      	mov	r9, fp
 800381e:	eb18 0308 	adds.w	r3, r8, r8
 8003822:	eb49 0409 	adc.w	r4, r9, r9
 8003826:	4698      	mov	r8, r3
 8003828:	46a1      	mov	r9, r4
 800382a:	eb18 080a 	adds.w	r8, r8, sl
 800382e:	eb49 090b 	adc.w	r9, r9, fp
 8003832:	f04f 0100 	mov.w	r1, #0
 8003836:	f04f 0200 	mov.w	r2, #0
 800383a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800383e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003842:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003846:	4688      	mov	r8, r1
 8003848:	4691      	mov	r9, r2
 800384a:	eb1a 0508 	adds.w	r5, sl, r8
 800384e:	eb4b 0609 	adc.w	r6, fp, r9
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	4619      	mov	r1, r3
 8003858:	f04f 0200 	mov.w	r2, #0
 800385c:	f04f 0300 	mov.w	r3, #0
 8003860:	f04f 0400 	mov.w	r4, #0
 8003864:	0094      	lsls	r4, r2, #2
 8003866:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800386a:	008b      	lsls	r3, r1, #2
 800386c:	461a      	mov	r2, r3
 800386e:	4623      	mov	r3, r4
 8003870:	4628      	mov	r0, r5
 8003872:	4631      	mov	r1, r6
 8003874:	f7fc fcb0 	bl	80001d8 <__aeabi_uldivmod>
 8003878:	4603      	mov	r3, r0
 800387a:	460c      	mov	r4, r1
 800387c:	461a      	mov	r2, r3
 800387e:	4b50      	ldr	r3, [pc, #320]	; (80039c0 <UART_SetConfig+0x6f4>)
 8003880:	fba3 2302 	umull	r2, r3, r3, r2
 8003884:	095b      	lsrs	r3, r3, #5
 8003886:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	469b      	mov	fp, r3
 800388e:	f04f 0c00 	mov.w	ip, #0
 8003892:	46d9      	mov	r9, fp
 8003894:	46e2      	mov	sl, ip
 8003896:	eb19 0309 	adds.w	r3, r9, r9
 800389a:	eb4a 040a 	adc.w	r4, sl, sl
 800389e:	4699      	mov	r9, r3
 80038a0:	46a2      	mov	sl, r4
 80038a2:	eb19 090b 	adds.w	r9, r9, fp
 80038a6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80038aa:	f04f 0100 	mov.w	r1, #0
 80038ae:	f04f 0200 	mov.w	r2, #0
 80038b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038b6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80038ba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80038be:	4689      	mov	r9, r1
 80038c0:	4692      	mov	sl, r2
 80038c2:	eb1b 0509 	adds.w	r5, fp, r9
 80038c6:	eb4c 060a 	adc.w	r6, ip, sl
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	4619      	mov	r1, r3
 80038d0:	f04f 0200 	mov.w	r2, #0
 80038d4:	f04f 0300 	mov.w	r3, #0
 80038d8:	f04f 0400 	mov.w	r4, #0
 80038dc:	0094      	lsls	r4, r2, #2
 80038de:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80038e2:	008b      	lsls	r3, r1, #2
 80038e4:	461a      	mov	r2, r3
 80038e6:	4623      	mov	r3, r4
 80038e8:	4628      	mov	r0, r5
 80038ea:	4631      	mov	r1, r6
 80038ec:	f7fc fc74 	bl	80001d8 <__aeabi_uldivmod>
 80038f0:	4603      	mov	r3, r0
 80038f2:	460c      	mov	r4, r1
 80038f4:	461a      	mov	r2, r3
 80038f6:	4b32      	ldr	r3, [pc, #200]	; (80039c0 <UART_SetConfig+0x6f4>)
 80038f8:	fba3 1302 	umull	r1, r3, r3, r2
 80038fc:	095b      	lsrs	r3, r3, #5
 80038fe:	2164      	movs	r1, #100	; 0x64
 8003900:	fb01 f303 	mul.w	r3, r1, r3
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	011b      	lsls	r3, r3, #4
 8003908:	3332      	adds	r3, #50	; 0x32
 800390a:	4a2d      	ldr	r2, [pc, #180]	; (80039c0 <UART_SetConfig+0x6f4>)
 800390c:	fba2 2303 	umull	r2, r3, r2, r3
 8003910:	095b      	lsrs	r3, r3, #5
 8003912:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003916:	4498      	add	r8, r3
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	469b      	mov	fp, r3
 800391c:	f04f 0c00 	mov.w	ip, #0
 8003920:	46d9      	mov	r9, fp
 8003922:	46e2      	mov	sl, ip
 8003924:	eb19 0309 	adds.w	r3, r9, r9
 8003928:	eb4a 040a 	adc.w	r4, sl, sl
 800392c:	4699      	mov	r9, r3
 800392e:	46a2      	mov	sl, r4
 8003930:	eb19 090b 	adds.w	r9, r9, fp
 8003934:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003938:	f04f 0100 	mov.w	r1, #0
 800393c:	f04f 0200 	mov.w	r2, #0
 8003940:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003944:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003948:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800394c:	4689      	mov	r9, r1
 800394e:	4692      	mov	sl, r2
 8003950:	eb1b 0509 	adds.w	r5, fp, r9
 8003954:	eb4c 060a 	adc.w	r6, ip, sl
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	4619      	mov	r1, r3
 800395e:	f04f 0200 	mov.w	r2, #0
 8003962:	f04f 0300 	mov.w	r3, #0
 8003966:	f04f 0400 	mov.w	r4, #0
 800396a:	0094      	lsls	r4, r2, #2
 800396c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003970:	008b      	lsls	r3, r1, #2
 8003972:	461a      	mov	r2, r3
 8003974:	4623      	mov	r3, r4
 8003976:	4628      	mov	r0, r5
 8003978:	4631      	mov	r1, r6
 800397a:	f7fc fc2d 	bl	80001d8 <__aeabi_uldivmod>
 800397e:	4603      	mov	r3, r0
 8003980:	460c      	mov	r4, r1
 8003982:	461a      	mov	r2, r3
 8003984:	4b0e      	ldr	r3, [pc, #56]	; (80039c0 <UART_SetConfig+0x6f4>)
 8003986:	fba3 1302 	umull	r1, r3, r3, r2
 800398a:	095b      	lsrs	r3, r3, #5
 800398c:	2164      	movs	r1, #100	; 0x64
 800398e:	fb01 f303 	mul.w	r3, r1, r3
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	011b      	lsls	r3, r3, #4
 8003996:	3332      	adds	r3, #50	; 0x32
 8003998:	4a09      	ldr	r2, [pc, #36]	; (80039c0 <UART_SetConfig+0x6f4>)
 800399a:	fba2 2303 	umull	r2, r3, r2, r3
 800399e:	095b      	lsrs	r3, r3, #5
 80039a0:	f003 020f 	and.w	r2, r3, #15
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4442      	add	r2, r8
 80039aa:	609a      	str	r2, [r3, #8]
}
 80039ac:	e7ff      	b.n	80039ae <UART_SetConfig+0x6e2>
 80039ae:	bf00      	nop
 80039b0:	3714      	adds	r7, #20
 80039b2:	46bd      	mov	sp, r7
 80039b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039b8:	40011000 	.word	0x40011000
 80039bc:	40011400 	.word	0x40011400
 80039c0:	51eb851f 	.word	0x51eb851f

080039c4 <__libc_init_array>:
 80039c4:	b570      	push	{r4, r5, r6, lr}
 80039c6:	4e0d      	ldr	r6, [pc, #52]	; (80039fc <__libc_init_array+0x38>)
 80039c8:	4c0d      	ldr	r4, [pc, #52]	; (8003a00 <__libc_init_array+0x3c>)
 80039ca:	1ba4      	subs	r4, r4, r6
 80039cc:	10a4      	asrs	r4, r4, #2
 80039ce:	2500      	movs	r5, #0
 80039d0:	42a5      	cmp	r5, r4
 80039d2:	d109      	bne.n	80039e8 <__libc_init_array+0x24>
 80039d4:	4e0b      	ldr	r6, [pc, #44]	; (8003a04 <__libc_init_array+0x40>)
 80039d6:	4c0c      	ldr	r4, [pc, #48]	; (8003a08 <__libc_init_array+0x44>)
 80039d8:	f000 f820 	bl	8003a1c <_init>
 80039dc:	1ba4      	subs	r4, r4, r6
 80039de:	10a4      	asrs	r4, r4, #2
 80039e0:	2500      	movs	r5, #0
 80039e2:	42a5      	cmp	r5, r4
 80039e4:	d105      	bne.n	80039f2 <__libc_init_array+0x2e>
 80039e6:	bd70      	pop	{r4, r5, r6, pc}
 80039e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80039ec:	4798      	blx	r3
 80039ee:	3501      	adds	r5, #1
 80039f0:	e7ee      	b.n	80039d0 <__libc_init_array+0xc>
 80039f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80039f6:	4798      	blx	r3
 80039f8:	3501      	adds	r5, #1
 80039fa:	e7f2      	b.n	80039e2 <__libc_init_array+0x1e>
 80039fc:	08003e68 	.word	0x08003e68
 8003a00:	08003e68 	.word	0x08003e68
 8003a04:	08003e68 	.word	0x08003e68
 8003a08:	08003e6c 	.word	0x08003e6c

08003a0c <memset>:
 8003a0c:	4402      	add	r2, r0
 8003a0e:	4603      	mov	r3, r0
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d100      	bne.n	8003a16 <memset+0xa>
 8003a14:	4770      	bx	lr
 8003a16:	f803 1b01 	strb.w	r1, [r3], #1
 8003a1a:	e7f9      	b.n	8003a10 <memset+0x4>

08003a1c <_init>:
 8003a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a1e:	bf00      	nop
 8003a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a22:	bc08      	pop	{r3}
 8003a24:	469e      	mov	lr, r3
 8003a26:	4770      	bx	lr

08003a28 <_fini>:
 8003a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a2a:	bf00      	nop
 8003a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a2e:	bc08      	pop	{r3}
 8003a30:	469e      	mov	lr, r3
 8003a32:	4770      	bx	lr
